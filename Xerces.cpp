/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/*************************************************************** -*- c -*-
 * perl5/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Perl_TypeRegister
#define SWIG_TypeCheck       SWIG_Perl_TypeCheck
#define SWIG_TypeCast        SWIG_Perl_TypeCast
#define SWIG_TypeDynamicCast SWIG_Perl_TypeDynamicCast
#define SWIG_TypeName        SWIG_Perl_TypeName
#define SWIG_TypePrettyName  SWIG_Perl_TypePrettyName
#define SWIG_TypeQuery       SWIG_Perl_TypeQuery
#define SWIG_TypeClientData  SWIG_Perl_TypeClientData
#define SWIG_PackData        SWIG_Perl_PackData 
#define SWIG_UnpackData      SWIG_Perl_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/swig/SWIG/Lib/perl5/perlrun.swg,v 1.14 2003/12/04 19:14:14 beazley Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_TypeCheckRV(rv, ty) \
     SWIG_Perl_TypeCheckRV(pPerl, rv, ty)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_TypeCheckRV(rv, ty) \
     SWIG_Perl_TypeCheckRV(rv, ty)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *, void **, swig_type_info *, int flags);
SWIGIMPORT(void)              SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *, void *, swig_type_info *, int flags);
SWIGIMPORT(SV *)              SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *, swig_type_info *, int flags);
SWIGIMPORT(void)              SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *, void *, int, swig_type_info *);
SWIGIMPORT(int)               SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *, void *, int, swig_type_info *, int flags);
SWIGIMPORT(swig_type_info *)  SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty);
SWIGIMPORT(SV *)              SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT char *);

#else

SWIGRUNTIME(swig_type_info *)
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (sv_derived_from(rv, (char *) s->name)) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME(int) 
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_type_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          SV *rsv = mg->mg_obj;
          if (sv_isobject(rsv)) {
            tmp = SvIV((SV*)SvRV(rsv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    tc = SWIG_TypeCheckRV(sv,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

SWIGRUNTIME(void)
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

SWIGRUNTIME(SV *)
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME(void)
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

SWIGRUNTIME(void)
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

SWIGRUNTIME(void)
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

SWIGRUNTIME(void)
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

#endif

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}






#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#if 0
#ifdef ENTER
  #undef ENTER
#endif
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_void swig_types[0] 
#define  SWIGTYPE_p_p_void swig_types[1] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils swig_types[2] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList swig_types[3] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap swig_types[4] 
#define  SWIGTYPE_p_IdentityConstraint swig_types[5] 
#define  SWIGTYPE_p_PSVIDefs__Complexity swig_types[6] 
#define  SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t swig_types[7] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel swig_types[8] 
#define  SWIGTYPE_FileHandle swig_types[9] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[10] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation swig_types[11] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation swig_types[12] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText swig_types[13] 
#define  SWIGTYPE_p_XMLBuffer swig_types[14] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilderFilter swig_types[15] 
#define  SWIGTYPE_p_DOMWriterFilter swig_types[16] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter swig_types[17] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[18] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[19] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[20] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Base64 swig_types[21] 
#define  SWIGTYPE_p_PSVIDefs__PSVIScope swig_types[22] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr swig_types[23] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni swig_types[24] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS swig_types[25] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__HexBin swig_types[26] 
#define  SWIGTYPE_p_XSerializeEngine swig_types[27] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator swig_types[28] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator swig_types[29] 
#define  SWIGTYPE_p_DatatypeValidator swig_types[30] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator swig_types[31] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator swig_types[32] 
#define  SWIGTYPE_p_PSVIDefs__Validity swig_types[33] 
#define  SWIGTYPE_p_unsigned_int swig_types[34] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement swig_types[35] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts swig_types[36] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument swig_types[37] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation swig_types[38] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader swig_types[39] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter swig_types[40] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser swig_types[41] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMConfiguration swig_types[42] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMemory swig_types[43] 
#define  SWIGTYPE_p_ValueVectorOfTunsigned_int_t swig_types[44] 
#define  SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t swig_types[45] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLTranscoder swig_types[46] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLErrorReporter swig_types[47] 
#define  SWIGTYPE_p_XMLErrorReporter swig_types[48] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference swig_types[49] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl swig_types[50] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl swig_types[51] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl swig_types[52] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken swig_types[53] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment swig_types[54] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator swig_types[55] 
#define  SWIGTYPE_p_SV swig_types[56] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry swig_types[57] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode swig_types[58] 
#define  SWIGTYPE_p_RefHash2KeysTableOfTSchemaAttDef_t swig_types[59] 
#define  SWIGTYPE_p_RefHashTableOfTDTDAttDef_t swig_types[60] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream swig_types[61] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLScanner swig_types[62] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[63] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[64] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser swig_types[65] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser swig_types[66] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[67] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser swig_types[68] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription swig_types[69] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar swig_types[70] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar swig_types[71] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar swig_types[72] 
#define  SWIGTYPE_p_ValidationContext swig_types[73] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef swig_types[74] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef swig_types[75] 
#define  SWIGTYPE_p_XMLAttDef swig_types[76] 
#define  SWIGTYPE_p_DTDAttDef swig_types[77] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL swig_types[78] 
#define  SWIGTYPE_p_size_t swig_types[79] 
#define  SWIGTYPE_p_RefHashTableOfTXMLRefInfo_t swig_types[80] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope swig_types[81] 
#define  SWIGTYPE_p_XMLValid__Codes swig_types[82] 
#define  SWIGTYPE_p_PSVIDefs__Validation swig_types[83] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t swig_types[84] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[85] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[86] 
#define  SWIGTYPE_p_int swig_types[87] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter swig_types[88] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget swig_types[89] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget swig_types[90] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget swig_types[91] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget swig_types[92] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarPool swig_types[93] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLMutex swig_types[94] 
#define  SWIGTYPE_p_PanicHandler__PanicReasons swig_types[95] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource swig_types[96] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource swig_types[97] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdInInputSource swig_types[98] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource swig_types[99] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource swig_types[100] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource swig_types[101] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter swig_types[102] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList swig_types[103] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList swig_types[104] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList swig_types[105] 
#define  SWIGTYPE_p_XMLAttDefList swig_types[106] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource swig_types[107] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource swig_types[108] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationSource swig_types[109] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler swig_types[110] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler swig_types[111] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler swig_types[112] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocTypeHandler swig_types[113] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityHandler swig_types[114] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler swig_types[115] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler swig_types[116] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler swig_types[117] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler swig_types[118] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler swig_types[119] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler swig_types[120] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler swig_types[121] 
#define  SWIGTYPE_p_PerlCallbackHandler swig_types[122] 
#define  SWIGTYPE_p_PanicHandler swig_types[123] 
#define  SWIGTYPE_p_bool swig_types[124] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList swig_types[125] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMErrorHandler swig_types[126] 
#define  SWIGTYPE_p_PerlErrorCallbackHandler swig_types[127] 
#define  SWIGTYPE_p_PerlDocumentCallbackHandler swig_types[128] 
#define  SWIGTYPE_p_PerlContentCallbackHandler swig_types[129] 
#define  SWIGTYPE_p_PerlEntityResolverHandler swig_types[130] 
#define  SWIGTYPE_p_PerlNodeFilterCallbackHandler swig_types[131] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction swig_types[132] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef swig_types[133] 
#define  SWIGTYPE_p_SchemaAttDef swig_types[134] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException swig_types[135] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException swig_types[136] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException swig_types[137] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException swig_types[138] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException swig_types[139] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException swig_types[140] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException swig_types[141] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl swig_types[142] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl swig_types[143] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator swig_types[144] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator swig_types[145] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase swig_types[146] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo swig_types[147] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo swig_types[148] 
#define  SWIGTYPE_p_ComplexTypeInfo swig_types[149] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode swig_types[150] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentRange swig_types[151] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLReaderFactory swig_types[152] 
#define  SWIGTYPE_p_DatatypeValidatorFactory swig_types[153] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLMsgLoader swig_types[154] 
#define  SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t swig_types[155] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment swig_types[156] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl swig_types[157] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal swig_types[158] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange swig_types[159] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker swig_types[160] 
#define  SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t swig_types[161] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName swig_types[162] 
#define  SWIGTYPE_p_p_XERCES_CPP_NAMESPACE__QName swig_types[163] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection swig_types[164] 
#define  SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t swig_types[165] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity swig_types[166] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLBufferMgr swig_types[167] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver swig_types[168] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__GrammarResolver swig_types[169] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver swig_types[170] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes swig_types[171] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityResolver swig_types[172] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder swig_types[173] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__ReaderMgr swig_types[174] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData swig_types[175] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri swig_types[176] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr swig_types[177] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType swig_types[178] 
#define  SWIGTYPE_p_SecurityManager swig_types[179] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager swig_types[180] 
#define  SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter swig_types[181] 
static swig_type_info *swig_types[183];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_XML__Xerces

#define SWIG_name   "XML::Xercesc::boot_XML__Xerces"
#define SWIG_prefix "XML::Xercesc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT(void) SWIG_init (CV* cv);
#else
SWIGEXPORT(void) SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT(void) SWIG_init (CV *cv, CPerlObj *);
#endif


#include "stdio.h"
#include "string.h"
#include "xercesc/sax/InputSource.hpp"
#include "xercesc/sax/SAXException.hpp"
#include "xercesc/sax/SAXParseException.hpp"
#include "xercesc/sax/Locator.hpp"
#include "xercesc/sax/HandlerBase.hpp"
#include "xercesc/sax2/Attributes.hpp"
#include "xercesc/sax2/ContentHandler.hpp"
#include "xercesc/sax2/LexicalHandler.hpp"
#include "xercesc/sax2/DefaultHandler.hpp"
#include "xercesc/sax2/SAX2XMLReader.hpp"
#include "xercesc/sax2/XMLReaderFactory.hpp"
#include "xercesc/util/PlatformUtils.hpp"
#include "xercesc/util/TransService.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/util/XMLUri.hpp"
#include "xercesc/util/QName.hpp"
#include "xercesc/util/HexBin.hpp"
#include "xercesc/util/Base64.hpp"
#include "xercesc/parsers/AbstractDOMParser.hpp"
#include "xercesc/parsers/XercesDOMParser.hpp"
#include "xercesc/parsers/SAXParser.hpp"
#include "xercesc/dom/DOM.hpp"
#include "xercesc/framework/LocalFileInputSource.hpp"
#include "xercesc/framework/MemBufInputSource.hpp"
#include "xercesc/framework/StdInInputSource.hpp"
#include "xercesc/framework/URLInputSource.hpp"
#include "xercesc/util/NameIdPool.hpp"
#include "xercesc/util/XMLEnumerator.hpp"
#include "xercesc/framework/XMLValidator.hpp"
#include "xercesc/validators/common/Grammar.hpp"
#include "xercesc/validators/DTD/DTDAttDef.hpp"
#include "xercesc/validators/DTD/DTDAttDefList.hpp"
#include "xercesc/validators/DTD/DTDGrammar.hpp"
#include "xercesc/validators/DTD/DTDValidator.hpp"
#include "xercesc/validators/schema/SchemaGrammar.hpp"
#include "xercesc/validators/schema/SchemaValidator.hpp"
#include "xercesc/validators/schema/SchemaAttDefList.hpp"
#include "xercesc/validators/schema/SchemaAttDef.hpp"
#include "xercesc/framework/XMLFormatter.hpp"
#include "xercesc/framework/MemBufFormatTarget.hpp"
#include "xercesc/framework/LocalFileFormatTarget.hpp"
#include "xercesc/framework/StdOutFormatTarget.hpp"
#include "xercesc/framework/Wrapper4InputSource.hpp"
#include "xercesc/framework/Wrapper4DOMInputSource.hpp"

#include "PerlCallbackHandler.hpp"
#include "PerlErrorCallbackHandler.hpp"
#include "PerlDocumentCallbackHandler.hpp"
#include "PerlContentCallbackHandler.hpp"

#include "PerlEntityResolverHandler.i"
#include "PerlNodeFilterCallbackHandler.i"

XERCES_CPP_NAMESPACE_USE

// we initialize the static UTF-8 transcoding info
// these are used by the typemaps to convert between
// Xerces internal UTF-16 and Perl's internal UTF-8
static XMLCh* UTF8_ENCODING = NULL; 
static XMLTranscoder* UTF8_TRANSCODER  = NULL;

static XMLCh* ISO_8859_1_ENCODING = NULL; 
static XMLTranscoder* ISO_8859_1_TRANSCODER  = NULL;

static bool DEBUG_UTF8_OUT = 0;
static bool DEBUG_UTF8_IN = 0;

static char debug_char[2048];
static XMLCh debug_xml[2048];

char*
debugPrint(const XMLCh* str){
    return (char*)XMLString::transcode(str);
}

// These exception creation methods make the Xerces.C code *much* smaller
void
makeXMLException(const XMLException& e){
    SV *tmpsv;
    HV *hash = newHV();
    char *XML_EXCEPTION = "XML::Xerces::XMLException";
    HV *XML_EXCEPTION_STASH = gv_stashpv(XML_EXCEPTION, FALSE);
    hv_magic(hash, 
	     (GV *)sv_setref_pv(sv_newmortal(), 
				XML_EXCEPTION, (void *)&e), 
	     'P');
    tmpsv = sv_bless(newRV_noinc((SV *)hash), XML_EXCEPTION_STASH);
    SV *error = ERRSV;
    SvSetSV(error,tmpsv);
    (void)SvUPGRADE(error, SVt_PV);
    croak(Nullch);
}

void
makeDOMException(const DOMException& e){
    SV *tmpsv;
    HV *hash = newHV();
    char *DOM_EXCEPTION = "XML::Xerces::DOMException";
    HV *DOM_EXCEPTION_STASH = gv_stashpv(DOM_EXCEPTION, FALSE);
    hv_magic(hash, 
	     (GV *)sv_setref_pv(sv_newmortal(), 
				DOM_EXCEPTION, (void *)&e), 
	     'P');
    tmpsv = sv_bless(newRV_noinc((SV *)hash), DOM_EXCEPTION_STASH);
    SV *error = ERRSV;
    SvSetSV(error,tmpsv);
    (void)SvUPGRADE(error, SVt_PV);
    croak(Nullch);
}

void
makeSAXNotRecognizedException(const SAXNotRecognizedException& e){
    SV *tmpsv;
    HV *hash = newHV();
    char *SAX_NOT_RECOGNIZED_EXCEPTION = "XML::Xerces::SAXNotRecognizedException";
    HV *SAX_NOT_RECOGNIZED_EXCEPTION_STASH = gv_stashpv(SAX_NOT_RECOGNIZED_EXCEPTION, FALSE);
    hv_magic(hash, 
	     (GV *)sv_setref_pv(sv_newmortal(), 
				SAX_NOT_RECOGNIZED_EXCEPTION, (void *)&e), 
	     'P');
    tmpsv = sv_bless(newRV_noinc((SV *)hash), SAX_NOT_RECOGNIZED_EXCEPTION_STASH);
    SV *error = ERRSV;
    SvSetSV(error,tmpsv);
    (void)SvUPGRADE(error, SVt_PV);
    croak(Nullch);
}

void
makeSAXNotSupportedException(const SAXNotSupportedException& e){
    SV *tmpsv;
    HV *hash = newHV();
    char *SAX_NOT_SUPPORTED_EXCEPTION = "XML::Xerces::SAXNotSupportedException";
    HV *SAX_NOT_SUPPORTED_EXCEPTION_STASH = gv_stashpv(SAX_NOT_SUPPORTED_EXCEPTION, FALSE);
    hv_magic(hash, 
	     (GV *)sv_setref_pv(sv_newmortal(), 
				SAX_NOT_SUPPORTED_EXCEPTION, (void *)&e), 
	     'P');
    tmpsv = sv_bless(newRV_noinc((SV *)hash), SAX_NOT_SUPPORTED_EXCEPTION_STASH);
    SV *error = ERRSV;
    SvSetSV(error,tmpsv);
    (void)SvUPGRADE(error, SVt_PV);
    croak(Nullch);
}



SV*
XMLString2Perl(const XMLCh* input) {
    SV *output;
  unsigned int charsEaten = 0;
  int length  = XMLString::stringLen(input);      // string length
  XMLByte* res = new XMLByte[length * UTF8_MAXLEN];          // output string
  unsigned int total_chars =
    UTF8_TRANSCODER->transcodeTo((const XMLCh*) input, 
				   (unsigned int) length,
				   (XMLByte*) res,
				   (unsigned int) length*UTF8_MAXLEN,
				   charsEaten,
				   XMLTranscoder::UnRep_Throw
				   );
  res[total_chars] = '\0';
  if (DEBUG_UTF8_OUT) {
      printf("Xerces out length = %d: ",total_chars);
      for (int i=0;i<length;i++){
	  printf("<0x%.4X>",res[i]);
      }
      printf("\n");
  }
  output = sv_newmortal();
  sv_setpv((SV*)output, (char *)res );
  SvUTF8_on((SV*)output);
  delete[] res;
  return output;
}

XMLCh* 
Perl2XMLString(SV* input){
    XMLCh* output;

    STRLEN length;
    char *ptr = (char *)SvPV(input,length);
    if (DEBUG_UTF8_IN) {
	printf("Perl in length = %d: ",length);
	for (unsigned int i=0;i<length;i++){
	    printf("<0x%.4X>",ptr[i]);
	}
	printf("\n");
    }
    if (SvUTF8(input)) {
	unsigned int charsEaten = 0;
        unsigned char* sizes = new unsigned char[length+1];
        output = new XMLCh[length+1];
	unsigned int chars_stored = 
	    UTF8_TRANSCODER->transcodeFrom((const XMLByte*) ptr,
					   (unsigned int) length,
					   (XMLCh*) output, 
					   (unsigned int) length,
					   charsEaten,
					   (unsigned char*)sizes
					   );
	delete [] sizes;
	if (DEBUG_UTF8_IN) {
	    printf("Xerces in length = %d: ",chars_stored);
	    for (unsigned int i=0;i<chars_stored;i++){
		printf("<0x%.4X>",output[i]);
	    }
	    printf("\n");
	}
	    // indicate the end of the string
	output[chars_stored] = '\0';
    } else {
	output = XMLString::transcode(ptr);
	if (DEBUG_UTF8_IN) {
	    printf("Xerces: ");
	    for (int i=0;output[i];i++){
		printf("<0x%.4X>",output[i]);
	    }
	    printf("\n");
	}
    }
    return(output);
}


static swig_type_info *
Grammar_dynamic_cast(void **ptr) {
   Grammar **nptr = (Grammar **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->getGrammarType();
   if (type == Grammar::DTDGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar;
   }
   if (type == Grammar::SchemaGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar;
   }
   return NULL;
}


static swig_type_info *
PerlCallbackHandler_dynamic_cast(void **ptr) {
   PerlCallbackHandler **nptr = (PerlCallbackHandler **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->type();
   if (type == PERLCALLBACKHANDLER_BASE_TYPE) {
      die("Can't cast a PerlCallbackHandler base type node\n");
   }
   if (type == PERLCALLBACKHANDLER_ERROR_TYPE) {
      return SWIGTYPE_p_PerlErrorCallbackHandler;
   }
   if (type == PERLCALLBACKHANDLER_ENTITY_TYPE) {
      return SWIGTYPE_p_PerlEntityResolverHandler;
   }
   if (type == PERLCALLBACKHANDLER_CONTENT_TYPE) {
      return SWIGTYPE_p_PerlContentCallbackHandler;
   }
   if (type == PERLCALLBACKHANDLER_DOCUMENT_TYPE) {
      return SWIGTYPE_p_PerlDocumentCallbackHandler;
   }
   if (type == PERLCALLBACKHANDLER_NODE_TYPE) {
      return SWIGTYPE_p_PerlNodeFilterCallbackHandler;
   }
   return NULL;
}


static swig_type_info *
DOMNode_dynamic_cast(void **ptr) {
   DOMNode **nptr = (DOMNode **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->getNodeType();
   if (type == DOMNode::TEXT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText;
   }
   if (type == DOMNode::PROCESSING_INSTRUCTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction;
   }
   if (type == DOMNode::DOCUMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument;
   }
   if (type == DOMNode::ELEMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement;
   }
   if (type == DOMNode::ENTITY_REFERENCE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference;
   }
   if (type == DOMNode::CDATA_SECTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection;
   }
   if (type == DOMNode::CDATA_SECTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection;
   }
   if (type == DOMNode::COMMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment;
   }
   if (type == DOMNode::DOCUMENT_TYPE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType;
   }
   if (type == DOMNode::ENTITY_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity;
   }
   if (type == DOMNode::ATTRIBUTE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr;
   }
   if (type == DOMNode::NOTATION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation;
   }
   return NULL;
}

bool XERCES_CPP_NAMESPACE_DOMNode_operator_Se__Se_(XERCES_CPP_NAMESPACE::DOMNode *self,XERCES_CPP_NAMESPACE::DOMNode const *other){
       return self->isSameNode(other);
   }
bool XERCES_CPP_NAMESPACE_DOMNode_operator_SN__Se_(XERCES_CPP_NAMESPACE::DOMNode *self,XERCES_CPP_NAMESPACE::DOMNode const *other){
       return !self->isSameNode(other);
   }
XERCES_CPP_NAMESPACE::DOMNode *XERCES_CPP_NAMESPACE_DOMDocument_toDOMNode(XERCES_CPP_NAMESPACE::DOMDocument *self){
     return (DOMNode*) self;
   }
XERCES_CPP_NAMESPACE::DOMDocumentTraversal *XERCES_CPP_NAMESPACE_DOMDocument_toDOMDocumentTraversal(XERCES_CPP_NAMESPACE::DOMDocument *self){
     return (DOMDocumentTraversal*) self;
   }
#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_XML::Xerces_var::
class _wrap_XML::Xerces_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_set_DEBUG_UTF8_OUT(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    DEBUG_UTF8_OUT = (bool) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_DEBUG_UTF8_OUT(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) DEBUG_UTF8_OUT);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_DEBUG_UTF8_IN(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    DEBUG_UTF8_IN = (bool) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_DEBUG_UTF8_IN(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) DEBUG_UTF8_IN);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_XMLPlatformUtils_fgArrayMemoryManager(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        if (SWIG_ConvertPtr(sv, (void **) &XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgArrayMemoryManager, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
            croak("Type error in argument $argnum of XMLPlatformUtils_fgArrayMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
        }
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLPlatformUtils_fgArrayMemoryManager(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv),(IV) XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgArrayMemoryManager);
    return 1;
}


SWIGCLASS_STATIC int _wrap_set_XMLPlatformUtils_fgAtomicMutex(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        if (SWIG_ConvertPtr(sv, (void **) &XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgAtomicMutex, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLMutex,0) < 0) {
            croak("Type error in argument $argnum of XMLPlatformUtils_fgAtomicMutex. Expected _p_XERCES_CPP_NAMESPACE__XMLMutex");
        }
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLPlatformUtils_fgAtomicMutex(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv),(IV) XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgAtomicMutex);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLElementDecl_fgInvalidElemId(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) XERCES_CPP_NAMESPACE::XMLElementDecl::fgInvalidElemId);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLElementDecl_fgPCDataElemId(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) XERCES_CPP_NAMESPACE::XMLElementDecl::fgPCDataElemId);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLElementDecl_fgPCDataElemName(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLElementDecl::fgPCDataElemName));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLAttDef_fgInvalidAttrId(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) XERCES_CPP_NAMESPACE::XMLAttDef::fgInvalidAttrId);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgAnyString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgAnyString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgAttListString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgAttListString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgCommentString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgCommentString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgCDATAString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgCDATAString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDefaultString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDefaultString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDocTypeString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDocTypeString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEBCDICEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEBCDICEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgElemString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgElemString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEmptyString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEmptyString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEntitString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEntitString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEntityString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEntityString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEntitiesString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEntitiesString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEnumerationString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEnumerationString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgExceptDomain(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgExceptDomain));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgFixedString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgFixedString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM037EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM037EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM037EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM037EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1047EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1047EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1047EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1047EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1140EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1140EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1140EncodingString3(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString3));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIBM1140EncodingString4(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString4));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIESString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIESString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIDString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIDString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIDRefString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIDRefString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIDRefsString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIDRefsString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgImpliedString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgImpliedString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIgnoreString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIgnoreString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIncludeString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIncludeString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString3(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString3));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString4(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString4));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString5(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString5));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString6(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString6));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString7(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString7));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString8(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString8));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString9(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString9));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString10(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString10));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString11(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString11));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgISO88591EncodingString12(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString12));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgLocalHostString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgLocalHostString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNoString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNoString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNotationString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNotationString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNDATAString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNDATAString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNmTokenString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNmTokenString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNmTokensString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNmTokensString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgPCDATAString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgPCDATAString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgPIString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgPIString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgPubIDString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgPubIDString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgRefString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgRefString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgRequiredString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgRequiredString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgStandaloneString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgStandaloneString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgVersion1_0(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgVersion1_0));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgVersion1_1(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgVersion1_1));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSysIDString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSysIDString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUnknownURIName(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUnknownURIName));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4EncodingString3(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString3));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4BEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4BEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4BEncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4BEncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4LEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4LEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUCS4LEncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4LEncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUSASCIIEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUSASCIIEncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUSASCIIEncodingString3(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString3));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUSASCIIEncodingString4(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString4));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF8EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF8EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF8EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF8EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16EncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16EncodingString3(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString3));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16EncodingString4(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString4));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16EncodingString5(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString5));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16BEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16BEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16BEncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16BEncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16LEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16LEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTF16LEncodingString2(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16LEncodingString2));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgVersionString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgVersionString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgValidityDomain(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgValidityDomain));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgWin1252EncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgWin1252EncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLChEncodingString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLChEncodingString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDOMMsgDomain(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDOMMsgDomain));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringSpace(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringSpace));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringHTab(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringHTab));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringCR(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringCR));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringLF(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringLF));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringSpaceU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringSpaceU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringHTabU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringHTabU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringCRU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringCRU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLStringLFU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringLFU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringSpace(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringSpace));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringHTab(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringHTab));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringLF(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringLF));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringCR(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringCR));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringSpaceU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringSpaceU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringHTabU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringHTabU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringLFU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringLFU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLDeclStringCRU(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringCRU));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLNSString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLNSColonString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSColonString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLNSURIName(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSURIName));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLErrDomain(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLErrDomain));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLURIName(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLURIName));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgYesString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgYesString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgZeroLenString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgZeroLenString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDTDEntityString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDTDEntityString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgAmp(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgAmp));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgLT(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgLT));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgGT(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgGT));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgQuot(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgQuot));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgApos(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgApos));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgWFXMLScanner(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgWFXMLScanner));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIGXMLScanner(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIGXMLScanner));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSGXMLScanner(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSGXMLScanner));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDGXMLScanner(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDGXMLScanner));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgCDataStart(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgCDataStart));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgCDataEnd(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgCDataEnd));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgArrayIndexOutOfBoundsException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgArrayIndexOutOfBoundsException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEmptyStackException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEmptyStackException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIllegalArgumentException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIllegalArgumentException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgInvalidCastException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidCastException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgIOException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgIOException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNoSuchElementException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNoSuchElementException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNullPointerException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNullPointerException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXMLPlatformUtilsException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXMLPlatformUtilsException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgRuntimeException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgRuntimeException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgTranscodingException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgTranscodingException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUnexpectedEOFException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUnexpectedEOFException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUnsupportedEncodingException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUnsupportedEncodingException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgUTFDataFormatException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgUTFDataFormatException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNetAccessorException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNetAccessorException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgMalformedURLException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgMalformedURLException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNumberFormatException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNumberFormatException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgParseException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgParseException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgInvalidDatatypeFacetException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidDatatypeFacetException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgInvalidDatatypeValueException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidDatatypeValueException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSchemaDateTimeException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSchemaDateTimeException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXPathException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXPathException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXSerializationException_Name(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXSerializationException_Name));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNegINFString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNegINFString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNegZeroString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNegZeroString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgPosZeroString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgPosZeroString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgPosINFString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgPosINFString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNaNString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNaNString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgEString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgEString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgZeroString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgZeroString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgNullString(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgNullString));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesDynamic(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesDynamic));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesSchema(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchema));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesSchemaFullChecking(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaFullChecking));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesSchemaExternalSchemaLocation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaExternalSchemaLocation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaExternalNoNameSpaceSchemaLocation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesSecurityManager(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSecurityManager));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesLoadExternalDTD(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesLoadExternalDTD));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesContinueAfterFatalError(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesContinueAfterFatalError));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesValidationErrorAsFatal(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesValidationErrorAsFatal));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesUserAdoptsDOMDocument(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesUserAdoptsDOMDocument));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesCacheGrammarFromParse(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesCacheGrammarFromParse));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesUseCachedGrammarInParse(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesUseCachedGrammarInParse));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesScannerName(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesScannerName));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesParserUseDocumentFromImplementation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesParserUseDocumentFromImplementation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesCalculateSrcOfs(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesCalculateSrcOfs));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercesStandardUriConformant(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgXercesStandardUriConformant));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSAX2CoreValidation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreValidation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSAX2CoreNameSpaces(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreNameSpaces));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgSAX2CoreNameSpacePrefixes(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreNameSpacePrefixes));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMCanonicalForm(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCanonicalForm));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMCDATASections(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCDATASections));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMComments(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMComments));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMCharsetOverridesXMLEncoding(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCharsetOverridesXMLEncoding));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMDatatypeNormalization(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMDatatypeNormalization));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMEntities(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMEntities));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMInfoset(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMInfoset));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMNamespaces(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMNamespaces));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMNamespaceDeclarations(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMNamespaceDeclarations));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMSupportedMediatypesOnly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMSupportedMediatypesOnly));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMValidateIfSchema(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMValidateIfSchema));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMValidation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMValidation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWhitespaceInElementContent(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWhitespaceInElementContent));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTCanonicalForm(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTCanonicalForm));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTDiscardDefaultContent(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTDiscardDefaultContent));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTEntities(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTEntities));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTFormatPrettyPrint(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTFormatPrettyPrint));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTNormalizeCharacters(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTNormalizeCharacters));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTSplitCdataSections(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTSplitCdataSections));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTValidation(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTValidation));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTWhitespaceInElementContent(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTWhitespaceInElementContent));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMWRTBOM(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTBOM));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgDOMXMLDeclaration(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    {
        sv_setsv((SV*)sv, XMLString2Perl(XERCES_CPP_NAMESPACE::XMLUni::fgDOMXMLDeclaration));
    }
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_XMLUni_fgXercescDefaultLocale(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    if (XERCES_CPP_NAMESPACE::XMLUni::fgXercescDefaultLocale) {
        sv_setpv((SV*)sv, (char *) XERCES_CPP_NAMESPACE::XMLUni::fgXercescDefaultLocale);
    } else {
        sv_setsv((SV*)sv, &PL_sv_undef);
    }
    return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_delete_XMLDeleter) {
    {
        XERCES_CPP_NAMESPACE::XMLDeleter *arg1 = (XERCES_CPP_NAMESPACE::XMLDeleter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLDeleter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLDeleter. Expected _p_XERCES_CPP_NAMESPACE__XMLDeleter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_Initialize) {
    {
        char *arg1 = (char *) (char *)XERCES_CPP_NAMESPACE::XMLUni::fgXercescDefaultLocale ;
        char *arg2 = (char *) (char *)0 ;
        PanicHandler *arg3 = (PanicHandler *) (PanicHandler *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 4)) {
            SWIG_croak("Usage: XMLPlatformUtils_Initialize(locale,nlsHome,panicHandler,memoryManager);");
        }
        if (items > 0) {
            if (!SvOK((SV*) ST(0))) arg1 = 0;
            else arg1 = (char *) SvPV(ST(0), PL_na);
        }
        if (items > 1) {
            if (!SvOK((SV*) ST(1))) arg2 = 0;
            else arg2 = (char *) SvPV(ST(1), PL_na);
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_PanicHandler,0) < 0) {
                    SWIG_croak("Type error in argument 3 of XMLPlatformUtils_Initialize. Expected _p_PanicHandler");
                }
            }
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of XMLPlatformUtils_Initialize. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize((char const *)arg1,(char const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_Terminate) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLPlatformUtils_Terminate();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::Terminate();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_panic) {
    {
        PanicHandler::PanicReasons arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_panic(reason);");
        }
        {
            PanicHandler::PanicReasons * argp;
            if (SWIG_ConvertPtr(ST(0),(void **) &argp, SWIGTYPE_p_PanicHandler__PanicReasons,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_panic. Expected _p_PanicHandler__PanicReasons");
            }
            arg1 = *argp;
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::panic(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_curFilePos) {
    {
        FileHandle arg1 = (FileHandle) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_curFilePos(theFile,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_curFilePos. Expected _FileHandle");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_curFilePos. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (unsigned int)XERCES_CPP_NAMESPACE::XMLPlatformUtils::curFilePos(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_closeFile) {
    {
        FileHandle arg1 = (FileHandle) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_closeFile(theFile,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_closeFile. Expected _FileHandle");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_closeFile. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::closeFile(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_fileSize) {
    {
        FileHandle arg1 = (FileHandle) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_fileSize(theFile,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_fileSize. Expected _FileHandle");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_fileSize. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (unsigned int)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fileSize(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_openFile__SWIG_0) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        FileHandle result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_openFile(fileName,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_openFile. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (FileHandle)XERCES_CPP_NAMESPACE::XMLPlatformUtils::openFile((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_FileHandle, 0|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_openFile__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        FileHandle result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_openFile(fileName,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_openFile, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_openFile. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (FileHandle)XERCES_CPP_NAMESPACE::XMLPlatformUtils::openFile((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_FileHandle, 0|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_openFile) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFile__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFile__SWIG_1); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFile__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFile__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLPlatformUtils_openFile'");
    XSRETURN(0);
}


XS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_0) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        FileHandle result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_openFileToWrite(fileName,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_openFileToWrite. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (FileHandle)XERCES_CPP_NAMESPACE::XMLPlatformUtils::openFileToWrite((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_FileHandle, 0|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        FileHandle result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_openFileToWrite(fileName,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_openFileToWrite, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_openFileToWrite. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (FileHandle)XERCES_CPP_NAMESPACE::XMLPlatformUtils::openFileToWrite((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_FileHandle, 0|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_openFileToWrite) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_1); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLPlatformUtils_openFileToWrite__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLPlatformUtils_openFileToWrite'");
    XSRETURN(0);
}


XS(_wrap_XMLPlatformUtils_openStdInHandle) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        FileHandle result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_openStdInHandle(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of XMLPlatformUtils_openStdInHandle. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (FileHandle)XERCES_CPP_NAMESPACE::XMLPlatformUtils::openStdInHandle(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_FileHandle, 0|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_readFileBuffer) {
    {
        FileHandle arg1 = (FileHandle) 0 ;
        unsigned int arg2 ;
        XMLByte *arg3 = (XMLByte *) (XMLByte *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: XMLPlatformUtils_readFileBuffer(theFile,toRead,toFill,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_readFileBuffer. Expected _FileHandle");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (XMLByte *) SvPV(ST(2), PL_na);
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of XMLPlatformUtils_readFileBuffer. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (unsigned int)XERCES_CPP_NAMESPACE::XMLPlatformUtils::readFileBuffer(arg1,arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_writeBufferToFile) {
    {
        FileHandle arg1 = (FileHandle) (FileHandle)0 ;
        long arg2 ;
        XMLByte *arg3 = (XMLByte *) (XMLByte *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: XMLPlatformUtils_writeBufferToFile(theFile,toWrite,toFlush,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_writeBufferToFile. Expected _FileHandle");
            }
        }
        arg2 = (long) SvIV(ST(1));
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (XMLByte *) SvPV(ST(2), PL_na);
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of XMLPlatformUtils_writeBufferToFile. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::writeBufferToFile(arg1,arg2,(XMLByte const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_resetFile) {
    {
        FileHandle arg1 = (FileHandle) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_resetFile(theFile,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_resetFile. Expected _FileHandle");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_resetFile. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::resetFile(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_getFullPath) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_getFullPath(srcPath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_getFullPath, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_getFullPath. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::getFullPath((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_getCurrentDirectory) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_getCurrentDirectory(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of XMLPlatformUtils_getCurrentDirectory. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::getCurrentDirectory(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_removeDotSlash) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_removeDotSlash(srcPath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_removeDotSlash, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_removeDotSlash. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::removeDotSlash(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_removeDotDotSlash) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_removeDotDotSlash(srcPath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_removeDotDotSlash, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_removeDotDotSlash. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::removeDotDotSlash(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_isRelative) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_isRelative(toCheck,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_isRelative, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_isRelative. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLPlatformUtils::isRelative((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_weavePaths) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: XMLPlatformUtils_weavePaths(basePath,relativePath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_weavePaths, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_weavePaths, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of XMLPlatformUtils_weavePaths. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::weavePaths((XMLCh const *)arg1,(XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_getCurrentMillis) {
    {
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLPlatformUtils_getCurrentMillis();");
        }
        {
            try {
                result = (unsigned long)XERCES_CPP_NAMESPACE::XMLPlatformUtils::getCurrentMillis();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_closeMutex) {
    {
        void *arg1 = (void *) (void *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_closeMutex(mtxHandle);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_closeMutex. Expected _p_void");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::closeMutex(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_lockMutex) {
    {
        void *arg1 = (void *) (void *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_lockMutex(mtxHandle);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_lockMutex. Expected _p_void");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::lockMutex(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_makeMutex) {
    {
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLPlatformUtils_makeMutex();");
        }
        {
            try {
                result = (void *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::makeMutex();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_unlockMutex) {
    {
        void *arg1 = (void *) (void *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_unlockMutex(mtxHandle);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_unlockMutex. Expected _p_void");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::unlockMutex(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_loadMsgSet) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLMsgLoader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_loadMsgSet(msgDomain);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLPlatformUtils_loadMsgSet, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLMsgLoader *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::loadMsgSet((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLMsgLoader, 0|0);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_compareAndSwap) {
    {
        void **arg1 = (void **) 0 ;
        void *arg2 = (void *) (void *)0 ;
        void *arg3 = (void *) (void *)0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLPlatformUtils_compareAndSwap(toFill,newValue,toCompare);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_void,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_compareAndSwap. Expected _p_p_void");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLPlatformUtils_compareAndSwap. Expected _p_void");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of XMLPlatformUtils_compareAndSwap. Expected _p_void");
            }
        }
        {
            try {
                result = (void *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::compareAndSwap(arg1,(void const *)arg2,(void const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_atomicIncrement) {
    {
        int *arg1 = 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_atomicIncrement(location);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_atomicIncrement. Expected _p_int");
            }
        }
        {
            try {
                result = (int)XERCES_CPP_NAMESPACE::XMLPlatformUtils::atomicIncrement(*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_atomicDecrement) {
    {
        int *arg1 = 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_atomicDecrement(location);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLPlatformUtils_atomicDecrement. Expected _p_int");
            }
        }
        {
            try {
                result = (int)XERCES_CPP_NAMESPACE::XMLPlatformUtils::atomicDecrement(*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_recognizeNEL) {
    {
        bool arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLPlatformUtils_recognizeNEL(state,manager);");
        }
        arg1 = (bool) SvIV(ST(0));
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLPlatformUtils_recognizeNEL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::recognizeNEL(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_isNELRecognized) {
    {
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLPlatformUtils_isNELRecognized();");
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLPlatformUtils::isNELRecognized();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_strictIANAEncoding) {
    {
        bool arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_strictIANAEncoding(state);");
        }
        arg1 = (bool) SvIV(ST(0));
        {
            try {
                XERCES_CPP_NAMESPACE::XMLPlatformUtils::strictIANAEncoding(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_isStrictIANAEncoding) {
    {
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLPlatformUtils_isStrictIANAEncoding();");
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLPlatformUtils::isStrictIANAEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLPlatformUtils_alignPointerForNewBlockAllocation) {
    {
        size_t arg1 ;
        size_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLPlatformUtils_alignPointerForNewBlockAllocation(ptrSize);");
        }
        arg1 = (size_t) SvUV(ST(0));
        {
            try {
                result = XERCES_CPP_NAMESPACE::XMLPlatformUtils::alignPointerForNewBlockAllocation(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLPlatformUtils) {
    {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils *arg1 = (XERCES_CPP_NAMESPACE::XMLPlatformUtils *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLPlatformUtils(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLPlatformUtils. Expected _p_XERCES_CPP_NAMESPACE__XMLPlatformUtils");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_lookupByName) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_lookupByName(protoName);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLURL_lookupByName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (int)XERCES_CPP_NAMESPACE::XMLURL::lookupByName((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_parse) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_parse(urlText,xmlURL);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLURL_parse, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLURL_parse. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLURL::parse((XMLCh const *)arg1,*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_XMLURL(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_XMLURL(baseURL,relativeURL,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_XMLURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XMLCh const *)arg1,(XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_XMLURL(baseURL,relativeURL,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XMLCh const *)arg1,(char const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_XMLURL(baseURL,relativeURL);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_XMLURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg1,(XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_4) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_XMLURL(urlText,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_5) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_XMLURL(urlText,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL__SWIG_6) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_XMLURL(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLURL) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_6); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_4); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_4); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_5); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_5); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_3); return;
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_1); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_2); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLURL__SWIG_2); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_XMLURL'");
    XSRETURN(0);
}


XS(_wrap_delete_XMLURL) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLURL(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_operator_equal_to) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_operator_equal_to(self,toCompare);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLURL_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->operator ==((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_operator_not_equal_to) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_operator_not_equal_to(self,toCompare);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_operator_not_equal_to. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLURL_operator_not_equal_to. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->operator !=((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getFragment) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getFragment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getFragment. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getFragment();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getHost) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getHost(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getHost. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getHost();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getPassword) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getPassword(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getPassword. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPassword();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getPath) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getPath(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getPath. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPath();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getPortNum) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getPortNum(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getPortNum. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPortNum();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getProtocol) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getProtocol(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getProtocol. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getProtocol();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getProtocolName) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getProtocolName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getProtocolName. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getProtocolName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getQuery) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getQuery(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getQuery. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getQuery();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getURLText) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getURLText(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getURLText. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getURLText();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getUser) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getUser(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getUser. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getUser();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_setURL__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_setURL(self,urlText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setURL((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_setURL__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setURL((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_setURL__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_setURL__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL,xmlURL);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLURL_setURL, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 4 of XMLURL_setURL. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)(arg1)->setURL((XMLCh const *)arg2,(XMLCh const *)arg3,*arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_setURL) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_2); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_3); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLURL_setURL'");
    XSRETURN(0);
}


XS(_wrap_XMLURL_isRelative) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_isRelative(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_isRelative. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->isRelative();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_hasInvalidChar) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_hasInvalidChar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_hasInvalidChar. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->hasInvalidChar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_makeNewStream) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLURL_makeNewStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_makeNewStream. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->makeNewStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_makeRelativeTo__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_makeRelativeTo(self,baseURLText);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_makeRelativeTo. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLURL_makeRelativeTo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->makeRelativeTo((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_makeRelativeTo__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLURL_makeRelativeTo(self,baseURL);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLURL_makeRelativeTo. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLURL_makeRelativeTo. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        {
            try {
                (arg1)->makeRelativeTo((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLURL_makeRelativeTo) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_makeRelativeTo__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLURL_makeRelativeTo__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLURL_makeRelativeTo'");
    XSRETURN(0);
}


XS(_wrap_new_XMLUri__SWIG_0) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLUri *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_XMLUri(uriSpec,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLUri, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLUri__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) (XERCES_CPP_NAMESPACE::XMLUri *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLUri *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_XMLUri(baseURI,uriSpec,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_XMLUri, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XERCES_CPP_NAMESPACE::XMLUri const *)arg1,(XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLUri__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::XMLUri *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_XMLUri(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XERCES_CPP_NAMESPACE::XMLUri const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLUri) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getUriText) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getUriText(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getUriText. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getUriText();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getScheme) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getScheme(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getScheme. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getScheme();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getUserInfo) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getUserInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getUserInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getUserInfo();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getHost) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getHost(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getHost. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getHost();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getPort) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getPort(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getPort. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getPort();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getRegBasedAuthority) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getRegBasedAuthority(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getRegBasedAuthority. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getRegBasedAuthority();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getPath) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getPath(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getPath. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getPath();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getQueryString) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getQueryString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getQueryString. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getQueryString();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_getFragment) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_getFragment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_getFragment. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getFragment();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setScheme) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setScheme(self,newScheme);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setScheme. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setScheme, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setScheme((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setUserInfo) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setUserInfo(self,newUserInfo);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setUserInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setUserInfo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setUserInfo((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setHost) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setHost(self,newHost);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setHost. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setHost, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setHost((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setPort) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setPort(self,newPort);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setPort. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setPort(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setRegBasedAuthority) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setRegBasedAuthority(self,newRegAuth);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setRegBasedAuthority. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setRegBasedAuthority, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setRegBasedAuthority((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setPath) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setPath(self,newPath);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setPath. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setPath, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPath((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setQueryString) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setQueryString(self,newQueryString);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setQueryString. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setQueryString, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setQueryString((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_setFragment) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_setFragment(self,newFragment);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_setFragment. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_setFragment, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setFragment((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_isURIString) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLUri_isURIString(uric);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of XMLUri_isURIString, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isURIString((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_isValidURI__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) (XERCES_CPP_NAMESPACE::XMLUri *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_isValidURI(baseURI,uriStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLUri_isValidURI. Expected _p_XERCES_CPP_NAMESPACE__XMLUri");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_isValidURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI((XERCES_CPP_NAMESPACE::XMLUri const *)arg1,(XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_isValidURI__SWIG_1) {
    {
        bool arg1 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLUri_isValidURI(haveBaseURI,uriStr);");
        }
        arg1 = (bool) SvIV(ST(0));
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLUri_isValidURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI(arg1,(XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLUri_isValidURI) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLUri_isValidURI'");
    XSRETURN(0);
}


XS(_wrap_new_XMLUri__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLUri *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_XMLUri(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_XMLUri. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLUri) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_3); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_3); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_2); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_0); return;
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_1); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLUri__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_XMLUri'");
    XSRETURN(0);
}


XS(_wrap_new_QName__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_QName(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_QName. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_QName__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: new_QName(prefix,localPart,uriId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_QName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_QName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_QName. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_QName__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_QName(rawName,uriId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_QName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_QName. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XMLCh const *)arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_QName__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_QName(qname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_QName. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XERCES_CPP_NAMESPACE::QName const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_QName) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_3); return;
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_2); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_2); return;
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_1); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_QName__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_QName'");
    XSRETURN(0);
}


XS(_wrap_delete_QName) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_QName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_QName. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_getPrefix) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: QName_getPrefix(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_getPrefix. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->getPrefix();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_getLocalPart) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: QName_getLocalPart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_getLocalPart. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->getLocalPart();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_getRawName) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: QName_getRawName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_getRawName. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->getRawName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: QName_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::QName const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setName) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: QName_setName(self,prefix,localPart,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setName. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of QName_setName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of QName_setName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (unsigned int) SvUV(ST(3));
        {
            try {
                (arg1)->setName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setPrefix) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: QName_setPrefix(self,XMLCh const *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setPrefix. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of QName_setPrefix, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPrefix((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setLocalPart) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: QName_setLocalPart(self,XMLCh const *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setLocalPart. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of QName_setLocalPart, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setLocalPart((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setNPrefix) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: QName_setNPrefix(self,XMLCh const *,unsigned int const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setNPrefix. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of QName_setNPrefix, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->setNPrefix((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setNLocalPart) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: QName_setNLocalPart(self,XMLCh const *,unsigned int const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setNLocalPart. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of QName_setNLocalPart, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->setNLocalPart((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setURI) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: QName_setURI(self,unsigned int const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setURI. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setURI(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_setValues) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XERCES_CPP_NAMESPACE::QName *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: QName_setValues(self,qname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_setValues. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 2 of QName_setValues. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                (arg1)->setValues((XERCES_CPP_NAMESPACE::QName const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_operator_equal_to) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        XERCES_CPP_NAMESPACE::QName *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: QName_operator_equal_to(self,XERCES_CPP_NAMESPACE::QName const &);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 2 of QName_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::QName const *)arg1)->operator ==((XERCES_CPP_NAMESPACE::QName const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_QName_cleanUp) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: QName_cleanUp(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of QName_cleanUp. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                (arg1)->cleanUp();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HexBin_getDataLength) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HexBin_getDataLength(hexData);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of HexBin_getDataLength, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (int)XERCES_CPP_NAMESPACE::HexBin::getDataLength((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HexBin_isArrayByteHex) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HexBin_isArrayByteHex(hexData);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of HexBin_isArrayByteHex, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE::HexBin::isArrayByteHex((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_HexBin) {
    {
        XERCES_CPP_NAMESPACE::HexBin *arg1 = (XERCES_CPP_NAMESPACE::HexBin *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_HexBin(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HexBin,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_HexBin. Expected _p_XERCES_CPP_NAMESPACE__HexBin");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Base64_encode) {
    {
        XMLByte *arg1 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg2 ;
        unsigned int *arg3 = (unsigned int *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
        XMLByte *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: Base64_encode(inputData,inputLength,outputLength,memMgr);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (XMLByte *) SvPV(ST(0), PL_na);
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 3 of Base64_encode. Expected _p_unsigned_int");
            }
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of Base64_encode. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLByte *)XERCES_CPP_NAMESPACE::Base64::encode((XMLByte const *)arg1,arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Base64_decode__SWIG_0) {
    {
        XMLByte *arg1 = (XMLByte *) (XMLByte *)0 ;
        unsigned int *arg2 = (unsigned int *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
        XMLByte *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: Base64_decode(inputData,outputLength,memMgr);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (XMLByte *) SvPV(ST(0), PL_na);
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of Base64_decode. Expected _p_unsigned_int");
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of Base64_decode. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLByte *)XERCES_CPP_NAMESPACE::Base64::decode((XMLByte const *)arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Base64_decode__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        unsigned int *arg2 = (unsigned int *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: Base64_decode(inputData,outputLength,memMgr);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of Base64_decode, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of Base64_decode. Expected _p_unsigned_int");
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of Base64_decode. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::Base64::decode((XMLCh const *)arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Base64_decode) {
    dXSARGS;
    
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_unsigned_int, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Base64_decode__SWIG_1); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Base64_decode__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_unsigned_int, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Base64_decode__SWIG_0); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Base64_decode__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Base64_decode'");
    XSRETURN(0);
}


XS(_wrap_Base64_getDataLength) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: Base64_getDataLength(inputData,memMgr);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of Base64_getDataLength, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of Base64_getDataLength. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (int)XERCES_CPP_NAMESPACE::Base64::getDataLength((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Base64) {
    {
        XERCES_CPP_NAMESPACE::Base64 *arg1 = (XERCES_CPP_NAMESPACE::Base64 *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Base64(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Base64,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Base64. Expected _p_XERCES_CPP_NAMESPACE__Base64");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLExcepts) {
    {
        XERCES_CPP_NAMESPACE::XMLExcepts *arg1 = (XERCES_CPP_NAMESPACE::XMLExcepts *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLExcepts(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLExcepts. Expected _p_XERCES_CPP_NAMESPACE__XMLExcepts");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLException) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLException. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getType) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getType. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getCode) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getCode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getCode. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getCode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getMessage) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getMessage(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getMessage. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getMessage();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getSrcFile) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getSrcFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getSrcFile. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (char *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getSrcFile();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getSrcLine) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getSrcLine(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getSrcLine. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getSrcLine();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_getErrorType) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLException_getErrorType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_getErrorType. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getErrorType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_setPosition) {
    {
        XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
        char *arg2 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLException_setPosition(self,file,line);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLException_setPosition. Expected _p_XERCES_CPP_NAMESPACE__XMLException");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->setPosition((char const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_reinitMsgMutex) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLException_reinitMsgMutex();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLException::reinitMsgMutex();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLException_reinitMsgLoader) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLException_reinitMsgLoader();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLException::reinitMsgLoader();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLElementDecl) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLElementDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLElementDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_findAttr) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int arg6 ;
        bool *arg7 = 0 ;
        XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: XMLElementDecl_findAttr(self,qName,uriId,baseName,prefix,options,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_findAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (int) SvIV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of XMLElementDecl_findAttr. Expected _p_bool");
            }
        }
        {
            try {
                result = (XMLAttDef *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->findAttr((XMLCh const *)arg2,arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XERCES_CPP_NAMESPACE::XMLElementDecl::LookupOpts )arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getAttDefList) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getAttDefList. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                {
                    XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getAttDefList();
                    result = (XMLAttDefList *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XMLAttDefList, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getCharDataOpts) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getCharDataOpts(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getCharDataOpts. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getCharDataOpts();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_hasAttDefs) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_hasAttDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_hasAttDefs. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->hasAttDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_resetDefs) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_resetDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_resetDefs. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (bool)(arg1)->resetDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getContentSpec) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getContentSpec(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getContentSpec. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setContentSpec) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setContentSpec(self,toAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__ContentSpecNode");
            }
        }
        {
            try {
                (arg1)->setContentSpec(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getContentModel) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setContentModel) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setContentModel(self,newModelToAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLContentModel");
            }
        }
        {
            try {
                (arg1)->setContentModel(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getFormattedContentModel) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getFormattedContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getFormattedContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getFormattedContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getBaseName) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getBaseName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getBaseName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->getBaseName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getURI) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getURI. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getElementName) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getElementName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getElementName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)(arg1)->getElementName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getFullName) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getFullName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getFullName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getFullName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getCreateReason) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getCreateReason(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getCreateReason. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getCreateReason();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getId) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getId. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_isDeclared) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_isDeclared(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_isDeclared. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->isDeclared();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_isExternal) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_isExternal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_isExternal. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->isExternal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: XMLElementDecl_setElementName(self,prefix,localPart,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setElementName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_setElementName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_setElementName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (int) SvIV(ST(3));
        {
            try {
                (arg1)->setElementName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLElementDecl_setElementName(self,rawName,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setElementName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLElementDecl_setElementName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        {
            try {
                (arg1)->setElementName((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::QName *arg2 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setElementName(self,elementName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setElementName. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLElementDecl_setElementName. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        {
            try {
                (arg1)->setElementName((XERCES_CPP_NAMESPACE::QName const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setElementName) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_2); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLElementDecl_setElementName'");
    XSRETURN(0);
}


XS(_wrap_XMLElementDecl_setCreateReason) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setCreateReason(self,newReason);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setCreateReason. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setCreateReason((XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setId) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setId. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_setExternalElemDeclaration) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_setExternalElemDeclaration(self,aValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_setExternalElemDeclaration. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExternalElemDeclaration(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_getObjectType) {
    {
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_getObjectType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_getObjectType. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getObjectType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_storeElementDecl) {
    {
        XSerializeEngine *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLElementDecl_storeElementDecl(serEng,element);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XSerializeEngine,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_storeElementDecl. Expected _p_XSerializeEngine");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLElementDecl_storeElementDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLElementDecl::storeElementDecl(*arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLElementDecl_loadElementDecl) {
    {
        XSerializeEngine *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLElementDecl_loadElementDecl(serEng);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XSerializeEngine,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLElementDecl_loadElementDecl. Expected _p_XSerializeEngine");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)XERCES_CPP_NAMESPACE::XMLElementDecl::loadElementDecl(*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLEntityDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getDeclaredInIntSubset) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getDeclaredInIntSubset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getDeclaredInIntSubset. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getDeclaredInIntSubset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getIsParameter) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getIsParameter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getIsParameter. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getIsParameter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getIsSpecialChar) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getIsSpecialChar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getIsSpecialChar. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getIsSpecialChar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getName) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getName. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getNotationName) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getNotationName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getNotationName. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getNotationName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getBaseURI) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getBaseURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getBaseURI. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getBaseURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getValue) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getValue. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getValueLen) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getValueLen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getValueLen. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getValueLen();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_isExternal) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_isExternal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_isExternal. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->isExternal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_isUnparsed) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_isUnparsed(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_isUnparsed. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->isUnparsed();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setName) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setName(self,entName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setName. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setNotationName) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setNotationName(self,newName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setNotationName. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setNotationName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setNotationName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setPublicId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setSystemId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setBaseURI) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setBaseURI(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setBaseURI. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setBaseURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setBaseURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setValue) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setValue(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setValue. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLEntityDecl_setValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_setId) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLEntityDecl_setId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_setId. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLEntityDecl_getKey) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLEntityDecl_getKey(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLEntityDecl_getKey. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getKey();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLNotationDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_XMLNotationDecl(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_XMLNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)new XERCES_CPP_NAMESPACE::XMLNotationDecl(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLNotationDecl__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg5 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: new_XMLNotationDecl(notName,pubId,sysId,baseURI,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_XMLNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of new_XMLNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            {
                if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                    arg4 = Perl2XMLString(ST(3));
                } else {
                    croak("Type error in argument 2 of new_XMLNotationDecl, Expected perl-string.");
                    XSRETURN(1);
                }
            }
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 5 of new_XMLNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)new XERCES_CPP_NAMESPACE::XMLNotationDecl((XMLCh const *)arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLNotationDecl) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_0); return;
        }
    }
    if ((items >= 3) && (items <= 5)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_1); return;
                    }
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_1); return;
                        }
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_1); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_XMLNotationDecl'");
    XSRETURN(0);
}


XS(_wrap_delete_XMLNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLNotationDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getName) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getName. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getBaseURI) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getBaseURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getBaseURI. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getBaseURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getNameSpaceId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getNameSpaceId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getNameSpaceId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getNameSpaceId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setName) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setName(self,notName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setName. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLNotationDecl_setName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setPublicId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLNotationDecl_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setSystemId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLNotationDecl_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setBaseURI) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setBaseURI(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setBaseURI. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLNotationDecl_setBaseURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setBaseURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_setNameSpaceId) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLNotationDecl_setNameSpaceId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_setNameSpaceId. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setNameSpaceId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLNotationDecl_getKey) {
    {
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLNotationDecl_getKey(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLNotationDecl_getKey. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getKey();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLAttDefList) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLAttDefList. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_isEmpty) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_isEmpty(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_isEmpty. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->isEmpty();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_ignore_me_for_now) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        unsigned long arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLAttDefList_ignore_me_for_now(self,uriID,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_ignore_me_for_now. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLAttDefList_ignore_me_for_now, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_findAttDef) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLAttDefList_findAttDef(self,attURI,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_findAttDef. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_nextElement) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_nextElement. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_Reset) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_Reset. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_getAttDefCount) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_getAttDefCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_getAttDefCount. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->getAttDefCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_getAttDef__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_getAttDef__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef const &_result_ref = ((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDefList_getAttDef) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLAttDefList_getAttDef__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XMLAttDefList_getAttDef__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'XMLAttDefList_getAttDef'");
    XSRETURN(0);
}


XS(_wrap_XMLAttDefList_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDefList_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDefList_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDefList");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getAttTypeString) {
    {
        int arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_getAttTypeString(attrType,manager);");
        }
        arg1 = (int) SvIV(ST(0));
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLAttDef_getAttTypeString. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLAttDef::getAttTypeString((XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getDefAttTypeString) {
    {
        int arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_getDefAttTypeString(attrType,manager);");
        }
        arg1 = (int) SvIV(ST(0));
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLAttDef_getDefAttTypeString. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLAttDef::getDefAttTypeString((XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLAttDef) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLAttDef(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLAttDef. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getFullName) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getFullName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getFullName. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getFullName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_reset) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_reset. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getDefaultType) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getDefaultType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getDefaultType. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getDefaultType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getEnumeration) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getEnumeration(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getEnumeration. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getEnumeration();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getId) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getId. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getProvided) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getProvided(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getProvided. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getProvided();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getType) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getType. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getValue) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getValue. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getCreateReason) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getCreateReason(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getCreateReason. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getCreateReason();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_isExternal) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_isExternal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_isExternal. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->isExternal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLAttDef_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setDefaultType) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setDefaultType(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setDefaultType. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setDefaultType((XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setId) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setId. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setProvided) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setProvided(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setProvided. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setProvided(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setType) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setType(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setType. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setType((XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setValue) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setValue(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setValue. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLAttDef_setValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setEnumeration) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setEnumeration(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setEnumeration. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLAttDef_setEnumeration, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEnumeration((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setCreateReason) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setCreateReason(self,newReason);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setCreateReason. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setCreateReason((XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLAttDef_setExternalAttDeclaration) {
    {
        XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLAttDef_setExternalAttDeclaration(self,aValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLAttDef_setExternalAttDeclaration. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExternalAttDeclaration(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLValidator) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLValidator. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_checkContent) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        XERCES_CPP_NAMESPACE::QName **arg3 = (XERCES_CPP_NAMESPACE::QName **) (XERCES_CPP_NAMESPACE::QName **)0 ;
        unsigned int arg4 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: XMLValidator_checkContent(self,elemDecl,children,childCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 3 of XMLValidator_checkContent. Expected _p_p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        arg4 = (unsigned int) SvUV(ST(3));
        {
            try {
                result = (int)(arg1)->checkContent(arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_faultInAttr) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttr *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLValidator_faultInAttr(self,toFill,attDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttr");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 3 of XMLValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                ((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->faultInAttr(*arg2,(XERCES_CPP_NAMESPACE::XMLAttDef const &)*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_preContentValidation) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        bool arg2 ;
        bool arg3 = (bool) false ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: XMLValidator_preContentValidation(self,reuseGrammar,validateDefAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_preContentValidation. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                (arg1)->preContentValidation(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_postParseValidation) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_postParseValidation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_postParseValidation. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                (arg1)->postParseValidation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_reset) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_reset. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_requiresNamespaces) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_requiresNamespaces(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_requiresNamespaces. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->requiresNamespaces();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_validateAttrValue) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg2 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        bool arg4 = (bool) false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg5 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: XMLValidator_validateAttrValue(self,attDef,attrValue,preValidation,elemDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLValidator_validateAttrValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                    SWIG_croak("Type error in argument 5 of XMLValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
                }
            }
        }
        {
            try {
                (arg1)->validateAttrValue((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg2,(XMLCh const *)arg3,arg4,(XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_validateElement) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLValidator_validateElement(self,elemDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                (arg1)->validateElement((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_getGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->getGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_setGrammar) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLValidator_setGrammar(self,aGrammar);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                (arg1)->setGrammar(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_handlesDTD) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_handlesDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_handlesDTD. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->handlesDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_handlesSchema) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLValidator_handlesSchema(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_handlesSchema. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->handlesSchema();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_setScannerInfo) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLScanner *arg2 = (XERCES_CPP_NAMESPACE::XMLScanner *) (XERCES_CPP_NAMESPACE::XMLScanner *)0 ;
        XERCES_CPP_NAMESPACE::ReaderMgr *arg3 = (XERCES_CPP_NAMESPACE::ReaderMgr *) (XERCES_CPP_NAMESPACE::ReaderMgr *)0 ;
        XERCES_CPP_NAMESPACE::XMLBufferMgr *arg4 = (XERCES_CPP_NAMESPACE::XMLBufferMgr *) (XERCES_CPP_NAMESPACE::XMLBufferMgr *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: XMLValidator_setScannerInfo(self,owningScanner,readerMgr,bufMgr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_setScannerInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLScanner,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_setScannerInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLScanner");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ReaderMgr,0) < 0) {
                SWIG_croak("Type error in argument 3 of XMLValidator_setScannerInfo. Expected _p_XERCES_CPP_NAMESPACE__ReaderMgr");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLBufferMgr,0) < 0) {
                SWIG_croak("Type error in argument 4 of XMLValidator_setScannerInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLBufferMgr");
            }
        }
        {
            try {
                (arg1)->setScannerInfo(arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_setErrorReporter) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XMLErrorReporter *arg2 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLValidator_setErrorReporter(self,errorReporter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_setErrorReporter. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XMLErrorReporter,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_setErrorReporter. Expected _p_XMLErrorReporter");
            }
        }
        {
            try {
                (arg1)->setErrorReporter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_emitError) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        XMLValid::Codes arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLValidator_emitError(self,toEmit);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_emitError. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            XMLValid::Codes * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_XMLValid__Codes,0) < 0) {
                SWIG_croak("Type error in argument 2 of XMLValidator_emitError. Expected _p_XMLValid__Codes");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->emitError(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_checkRootElement) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        unsigned int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLValidator_checkRootElement(self,unsigned int const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLValidator_checkRootElement. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (bool)(arg1)->checkRootElement(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_reinitMsgMutex) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLValidator_reinitMsgMutex();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLValidator::reinitMsgMutex();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLValidator_reinitMsgLoader) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: XMLValidator_reinitMsgLoader();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::XMLValidator::reinitMsgLoader();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Grammar) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Grammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Grammar. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getGrammarType) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_getGrammarType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getGrammarType. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getGrammarType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getTargetNamespace) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_getTargetNamespace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getTargetNamespace. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getTargetNamespace();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getValidated) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_getValidated(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getValidated. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getValidated();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_findOrAddElemDecl) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool *arg7 = 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: Grammar_findOrAddElemDecl(self,uriId,baseName,prefixName,qName,scope,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_findOrAddElemDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Grammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of Grammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of Grammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of Grammar_findOrAddElemDecl. Expected _p_bool");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->findOrAddElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getElemId) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: Grammar_getElemId(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getElemId. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Grammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of Grammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getElemId(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: Grammar_getElemDecl(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Grammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of Grammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_getElemDecl(self,elemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getElemDecl) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_getElemDecl__SWIG_1); return;
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_getElemDecl__SWIG_0); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Grammar_getElemDecl'");
    XSRETURN(0);
}


XS(_wrap_Grammar_getNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_getNotationDecl(self,notName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Grammar_getNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)(arg1)->getNotationDecl((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_putElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool arg7 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 7)) {
            SWIG_croak("Usage: Grammar_putElemDecl(self,uriId,baseName,prefixName,qName,scope,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Grammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of Grammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of Grammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        if (items > 6) {
            arg7 = (bool) SvIV(ST(6));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->putElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_putElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        bool arg3 = (bool) (bool)false ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: Grammar_putElemDecl(self,elemDecl,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of Grammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                result = (unsigned int)(arg1)->putElemDecl(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_putElemDecl) {
    dXSARGS;
    
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_putElemDecl__SWIG_1); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_putElemDecl__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 6) && (items <= 7)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                if (items <= 6) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_putElemDecl__SWIG_0); return;
                                }
                                {
                                    _v = SvIOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Grammar_putElemDecl__SWIG_0); return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Grammar_putElemDecl'");
    XSRETURN(0);
}


XS(_wrap_Grammar_putNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) (XERCES_CPP_NAMESPACE::XMLNotationDecl *)0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_putNotationDecl(self,notationDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of Grammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->putNotationDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_setValidated) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_setValidated(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_setValidated. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidated(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_reset) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_reset. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_setGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription,0) < 0) {
                SWIG_croak("Type error in argument 2 of Grammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarDescription");
            }
        }
        {
            try {
                (arg1)->setGrammarDescription(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_getGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_getGrammarDescription(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_getGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getGrammarDescription();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_storeGrammar) {
    {
        XSerializeEngine *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) (XERCES_CPP_NAMESPACE::Grammar *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Grammar_storeGrammar(serEng,grammar);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XSerializeEngine,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_storeGrammar. Expected _p_XSerializeEngine");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 2 of Grammar_storeGrammar. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::Grammar::storeGrammar(*arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Grammar_loadGrammar) {
    {
        XSerializeEngine *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Grammar_loadGrammar(serEng);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XSerializeEngine,0) < 0) {
                SWIG_croak("Type error in argument 1 of Grammar_loadGrammar. Expected _p_XSerializeEngine");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)XERCES_CPP_NAMESPACE::Grammar::loadGrammar(*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDElementDecl(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDElementDecl *)new XERCES_CPP_NAMESPACE::DTDElementDecl(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDecl__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg2 ;
        int arg3 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: new_DTDElementDecl(elemRawName,uriId,modelType,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDElementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        arg3 = (int) SvIV(ST(2));
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_DTDElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDElementDecl *)new XERCES_CPP_NAMESPACE::DTDElementDecl((XMLCh const *)arg1,arg2,(XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes )arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDecl__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
        int arg2 = (int) (int)XERCES_CPP_NAMESPACE::DTDElementDecl::Any ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 3)) {
            SWIG_croak("Usage: new_DTDElementDecl(elementName,modelType,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDElementDecl. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        if (items > 1) {
            arg2 = (int) SvIV(ST(1));
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_DTDElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDElementDecl *)new XERCES_CPP_NAMESPACE::DTDElementDecl(arg1,(XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes )arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDecl) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_0); return;
        }
    }
    if ((items >= 1) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_2); return;
            }
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_2); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_2); return;
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_1); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDecl__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DTDElementDecl'");
    XSRETURN(0);
}


XS(_wrap_delete_DTDElementDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDElementDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDElementDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_findAttr) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int arg6 ;
        bool *arg7 = 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: DTDElementDecl_findAttr(self,qName,uriId,baseName,prefix,options,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_findAttr. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DTDElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (int) SvIV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of DTDElementDecl_findAttr. Expected _p_bool");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->findAttr((XMLCh const *)arg2,arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XERCES_CPP_NAMESPACE::XMLElementDecl::LookupOpts )arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getAttDefList) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getAttDefList. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getAttDefList();
                    result = (XERCES_CPP_NAMESPACE::XMLAttDefList *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getCharDataOpts) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getCharDataOpts(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getCharDataOpts. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getCharDataOpts();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_hasAttDefs) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_hasAttDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_hasAttDefs. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->hasAttDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_resetDefs) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_resetDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_resetDefs. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (bool)(arg1)->resetDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getContentSpec) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getContentSpec(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getContentSpec. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_setContentSpec) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDElementDecl_setContentSpec(self,toAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__ContentSpecNode");
            }
        }
        {
            try {
                (arg1)->setContentSpec(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getContentModel) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getContentModel. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_setContentModel) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDElementDecl_setContentModel(self,newModelToAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLContentModel");
            }
        }
        {
            try {
                (arg1)->setContentModel(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getFormattedContentModel) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getFormattedContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getFormattedContentModel. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getFormattedContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getKey) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getKey(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getKey. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getKey();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getAttDef) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        DTDAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDElementDecl_getAttDef(self,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDElementDecl_getAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (DTDAttDef *)(arg1)->getAttDef((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_DTDAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getModelType) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getModelType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getModelType. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getModelType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_addAttDef) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        DTDAttDef *arg2 = (DTDAttDef *) (DTDAttDef *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDElementDecl_addAttDef(self,toAdd);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_addAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDElementDecl_addAttDef. Expected _p_DTDAttDef");
            }
        }
        {
            try {
                (arg1)->addAttDef(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_setModelType) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDElementDecl_setModelType(self,toSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_setModelType. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setModelType((XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDecl_getObjectType) {
    {
        XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDecl_getObjectType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDecl_getObjectType. Expected _p_XERCES_CPP_NAMESPACE__DTDElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getObjectType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDeclEnumerator__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_DTDElementDeclEnumerator(toEnum,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_DTDElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDeclEnumerator__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_DTDElementDeclEnumerator(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDElementDeclEnumerator) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_0); return;
            }
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_DTDElementDeclEnumerator'");
    XSRETURN(0);
}


XS(_wrap_delete_DTDElementDeclEnumerator) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDElementDeclEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDeclEnumerator_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDeclEnumerator_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDeclEnumerator_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDeclEnumerator_nextElement) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
        XERCES_CPP_NAMESPACE::DTDElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDeclEnumerator_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDeclEnumerator_nextElement. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::DTDElementDecl &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::DTDElementDecl *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDeclEnumerator_Reset) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDeclEnumerator_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDeclEnumerator_Reset. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDElementDeclEnumerator_size) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDElementDeclEnumerator_size(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDElementDeclEnumerator_size. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *)arg1)->size();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDEntityDecl(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)new XERCES_CPP_NAMESPACE::DTDEntityDecl(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDecl__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        bool arg2 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 3)) {
            SWIG_croak("Usage: new_DTDEntityDecl(entName,fromIntSubset,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            arg2 = (bool) SvIV(ST(1));
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_DTDEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)new XERCES_CPP_NAMESPACE::DTDEntityDecl((XMLCh const *)arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDecl__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 4)) {
            SWIG_croak("Usage: new_DTDEntityDecl(entName,value,fromIntSubset,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_DTDEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_DTDEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)new XERCES_CPP_NAMESPACE::DTDEntityDecl((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDecl__SWIG_3) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh arg2 ;
        bool arg3 = (bool) (bool)false ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 4)) {
            SWIG_croak("Usage: new_DTDEntityDecl(entName,value,fromIntSubset,specialChar);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg2 = (XMLCh) SvUV(ST(1));
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)new XERCES_CPP_NAMESPACE::DTDEntityDecl((XMLCh const *)arg1,arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDecl) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_0); return;
        }
    }
    if ((items >= 1) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_1); return;
            }
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_1); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 2) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_3); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_3); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_3); return;
                    }
                }
            }
        }
    }
    if ((items >= 2) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_2); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_2); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDecl__SWIG_2); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DTDEntityDecl'");
    XSRETURN(0);
}


XS(_wrap_delete_DTDEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDEntityDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_getDeclaredInIntSubset) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDecl_getDeclaredInIntSubset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_getDeclaredInIntSubset. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getDeclaredInIntSubset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_getIsParameter) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDecl_getIsParameter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_getIsParameter. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getIsParameter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_getIsSpecialChar) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDecl_getIsSpecialChar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_getIsSpecialChar. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getIsSpecialChar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_setDeclaredInIntSubset) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDEntityDecl_setDeclaredInIntSubset(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_setDeclaredInIntSubset. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setDeclaredInIntSubset(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_setIsParameter) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDEntityDecl_setIsParameter(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_setIsParameter. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIsParameter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDecl_setIsSpecialChar) {
    {
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDEntityDecl_setIsSpecialChar(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDecl_setIsSpecialChar. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIsSpecialChar(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDeclEnumerator__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_DTDEntityDeclEnumerator(toEnum,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDEntityDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_DTDEntityDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDeclEnumerator__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_DTDEntityDeclEnumerator(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDEntityDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDEntityDeclEnumerator) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_0); return;
            }
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_DTDEntityDeclEnumerator'");
    XSRETURN(0);
}


XS(_wrap_delete_DTDEntityDeclEnumerator) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDEntityDeclEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDEntityDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDeclEnumerator_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDeclEnumerator_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDeclEnumerator_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDeclEnumerator_nextElement) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDeclEnumerator_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDeclEnumerator_nextElement. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::DTDEntityDecl &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDeclEnumerator_Reset) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDeclEnumerator_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDeclEnumerator_Reset. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDEntityDeclEnumerator_size) {
    {
        XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDEntityDeclEnumerator_size(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDEntityDeclEnumerator_size. Expected _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *)arg1)->size();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDAttDefList__SWIG_0) {
    {
        RefHashTableOf<DTDAttDef > *arg1 = (RefHashTableOf<DTDAttDef > *) (RefHashTableOf<DTDAttDef > *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_DTDAttDefList(listToUse,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_RefHashTableOfTDTDAttDef_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DTDAttDefList. Expected _p_RefHashTableOfTDTDAttDef_t");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_DTDAttDefList. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDAttDefList *)new XERCES_CPP_NAMESPACE::DTDAttDefList(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DTDAttDefList) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDAttDefList. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDefList_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_isEmpty) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDefList_isEmpty(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_isEmpty. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->isEmpty();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_ignore_me_for_now) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        unsigned long arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DTDAttDefList_ignore_me_for_now(self,uriID,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_ignore_me_for_now. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDAttDefList_ignore_me_for_now, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_findAttDef) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DTDAttDefList_findAttDef(self,attURI,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_findAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_nextElement) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDefList_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_nextElement. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_Reset) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDefList_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_Reset. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_getAttDefCount) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDefList_getAttDefCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_getAttDefCount. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->getAttDefCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_getAttDef__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_getAttDef__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef const &_result_ref = ((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDefList_getAttDef) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDAttDefList_getAttDef__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDAttDefList_getAttDef__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DTDAttDefList_getAttDef'");
    XSRETURN(0);
}


XS(_wrap_new_DTDAttDefList__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDAttDefList(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDAttDefList. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDAttDefList *)new XERCES_CPP_NAMESPACE::DTDAttDefList(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDAttDefList) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDefList__SWIG_1); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDefList__SWIG_1); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_RefHashTableOfTDTDAttDef_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDefList__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDefList__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DTDAttDefList'");
    XSRETURN(0);
}


XS(_wrap_new_DTDAttDef__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDAttDef(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDAttDef *)new XERCES_CPP_NAMESPACE::DTDAttDef(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDAttDef__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        int arg2 = (int) (int)XERCES_CPP_NAMESPACE::XMLAttDef::CData ;
        int arg3 = (int) (int)XERCES_CPP_NAMESPACE::XMLAttDef::Implied ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 4)) {
            SWIG_croak("Usage: new_DTDAttDef(attName,type,defType,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            arg2 = (int) SvIV(ST(1));
        }
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_DTDAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDAttDef *)new XERCES_CPP_NAMESPACE::DTDAttDef((XMLCh const *)arg1,(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg2,(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDAttDef__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        int arg4 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 6)) {
            SWIG_croak("Usage: new_DTDAttDef(attName,attValue,type,defType,enumValues,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_DTDAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_DTDAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        arg4 = (int) SvIV(ST(3));
        if (items > 4) {
            {
                if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                    arg5 = Perl2XMLString(ST(4));
                } else {
                    croak("Type error in argument 2 of new_DTDAttDef, Expected perl-string.");
                    XSRETURN(1);
                }
            }
        }
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_DTDAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDAttDef *)new XERCES_CPP_NAMESPACE::DTDAttDef((XMLCh const *)arg1,(XMLCh const *)arg2,(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg3,(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg4,(XMLCh const *)arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDAttDef) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_0); return;
        }
    }
    if ((items >= 1) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_1); return;
            }
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_1); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_1); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_1); return;
                    }
                }
            }
        }
    }
    if ((items >= 4) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_2); return;
                        }
                        {
                            _v = SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_2); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DTDAttDef__SWIG_2); return;
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DTDAttDef'");
    XSRETURN(0);
}


XS(_wrap_delete_DTDAttDef) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDAttDef(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDAttDef. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_getFullName) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDef_getFullName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_getFullName. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getFullName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_reset) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDef_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_reset. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_getElemId) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDef_getElemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_getElemId. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getElemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDef_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDAttDef_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_setElemId) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDAttDef_setElemId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_setElemId. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setElemId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDAttDef_setName) {
    {
        XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDAttDef_setName(self,newName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDAttDef_setName. Expected _p_XERCES_CPP_NAMESPACE__DTDAttDef");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDAttDef_setName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDGrammar) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DTDGrammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDGrammar(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDGrammar. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDGrammar *)new XERCES_CPP_NAMESPACE::DTDGrammar(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DTDGrammar) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDGrammar. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getGrammarType) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getGrammarType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getGrammarType. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getGrammarType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getTargetNamespace) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getTargetNamespace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getTargetNamespace. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getTargetNamespace();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_findOrAddElemDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool *arg7 = 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: DTDGrammar_findOrAddElemDecl(self,uriId,baseName,prefixName,qName,scope,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_findOrAddElemDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DTDGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of DTDGrammar_findOrAddElemDecl. Expected _p_bool");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->findOrAddElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getElemId) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DTDGrammar_getElemId(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getElemId. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getElemId(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DTDGrammar_getElemDecl(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_getElemDecl(self,elemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getElemDecl) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_getElemDecl__SWIG_1); return;
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_getElemDecl__SWIG_0); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DTDGrammar_getElemDecl'");
    XSRETURN(0);
}


XS(_wrap_DTDGrammar_getNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_getNotationDecl(self,notName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)(arg1)->getNotationDecl((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getValidated) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getValidated(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getValidated. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getValidated();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_putElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool arg7 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 7)) {
            SWIG_croak("Usage: DTDGrammar_putElemDecl(self,uriId,baseName,prefixName,qName,scope,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DTDGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        if (items > 6) {
            arg7 = (bool) SvIV(ST(6));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->putElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_putElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        bool arg3 = (bool) (bool)false ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: DTDGrammar_putElemDecl(self,elemDecl,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                result = (unsigned int)(arg1)->putElemDecl(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_putElemDecl) {
    dXSARGS;
    
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_putElemDecl__SWIG_1); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_putElemDecl__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 6) && (items <= 7)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                if (items <= 6) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_putElemDecl__SWIG_0); return;
                                }
                                {
                                    _v = SvIOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DTDGrammar_putElemDecl__SWIG_0); return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DTDGrammar_putElemDecl'");
    XSRETURN(0);
}


XS(_wrap_DTDGrammar_putNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) (XERCES_CPP_NAMESPACE::XMLNotationDecl *)0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_putNotationDecl(self,notationDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDGrammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->putNotationDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_setValidated) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_setValidated(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_setValidated. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidated(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_reset) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_reset. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getRootElemId) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getRootElemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getRootElemId. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getRootElemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_getEntityDecl(self,entName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDGrammar_getEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)(arg1)->getEntityDecl((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getEntityDeclPool) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getEntityDeclPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getEntityDeclPool. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)(arg1)->getEntityDeclPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getElemEnumerator) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        SwigValueWrapper< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getElemEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getElemEnumerator. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getElemEnumerator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * resultobj = new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getEntityEnumerator) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        SwigValueWrapper< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getEntityEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getEntityEnumerator. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getEntityEnumerator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * resultobj = new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getNotationEnumerator) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        SwigValueWrapper< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getNotationEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getNotationEnumerator. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getNotationEnumerator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > * resultobj = new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_setRootElemId) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_setRootElemId(self,rootElemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_setRootElemId. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setRootElemId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_setGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDGrammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarDescription");
            }
        }
        {
            try {
                (arg1)->setGrammarDescription(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_getGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDGrammar_getGrammarDescription(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_getGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getGrammarDescription();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_putEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::DTDEntityDecl *arg2 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) (XERCES_CPP_NAMESPACE::DTDEntityDecl *)0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDGrammar_putEntityDecl(self,entityDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDGrammar_putEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDGrammar_putEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDEntityDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->putEntityDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDGrammar_reinitDfltEntities) {
    {
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: DTDGrammar_reinitDfltEntities();");
        }
        {
            try {
                XERCES_CPP_NAMESPACE::DTDGrammar::reinitDfltEntities();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DTDValidator) {
    {
        XMLErrorReporter *arg1 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
        XERCES_CPP_NAMESPACE::DTDValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_DTDValidator(errReporter);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XMLErrorReporter,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_DTDValidator. Expected _p_XMLErrorReporter");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDValidator *)new XERCES_CPP_NAMESPACE::DTDValidator(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DTDValidator) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDValidator. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_checkContent) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        XERCES_CPP_NAMESPACE::QName **arg3 = (XERCES_CPP_NAMESPACE::QName **) (XERCES_CPP_NAMESPACE::QName **)0 ;
        unsigned int arg4 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DTDValidator_checkContent(self,elemDecl,children,childCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 3 of DTDValidator_checkContent. Expected _p_p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        arg4 = (unsigned int) SvUV(ST(3));
        {
            try {
                result = (int)(arg1)->checkContent(arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_faultInAttr) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttr *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DTDValidator_faultInAttr(self,toFill,attDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttr");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 3 of DTDValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                ((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->faultInAttr(*arg2,(XERCES_CPP_NAMESPACE::XMLAttDef const &)*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_preContentValidation) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        bool arg2 ;
        bool arg3 = (bool) false ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: DTDValidator_preContentValidation(self,reuseGrammar,validateDefAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_preContentValidation. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                (arg1)->preContentValidation(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_postParseValidation) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_postParseValidation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_postParseValidation. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                (arg1)->postParseValidation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_reset) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_reset. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_requiresNamespaces) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_requiresNamespaces(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_requiresNamespaces. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->requiresNamespaces();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_validateAttrValue) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg2 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        bool arg4 = (bool) false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg5 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: DTDValidator_validateAttrValue(self,attDef,attrValue,preValidation,elemDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDValidator_validateAttrValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                    SWIG_croak("Type error in argument 5 of DTDValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
                }
            }
        }
        {
            try {
                (arg1)->validateAttrValue((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg2,(XMLCh const *)arg3,arg4,(XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_validateElement) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDValidator_validateElement(self,elemDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                (arg1)->validateElement((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_getGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->getGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_setGrammar) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DTDValidator_setGrammar(self,aGrammar);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 2 of DTDValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                (arg1)->setGrammar(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_handlesDTD) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_handlesDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_handlesDTD. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->handlesDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDValidator_handlesSchema) {
    {
        XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDValidator_handlesSchema(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDValidator_handlesSchema. Expected _p_XERCES_CPP_NAMESPACE__DTDValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->handlesSchema();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaElementDecl(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SchemaElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *)new XERCES_CPP_NAMESPACE::SchemaElementDecl(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDecl__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::SchemaElementDecl::Any ;
        int arg5 = (int) (int)XERCES_CPP_NAMESPACE::Grammar::TOP_LEVEL_SCOPE ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 6)) {
            SWIG_croak("Usage: new_SchemaElementDecl(prefix,localPart,uriId,modelType,enclosingScope,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SchemaElementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_SchemaElementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            arg5 = (int) SvIV(ST(4));
        }
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_SchemaElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *)new XERCES_CPP_NAMESPACE::SchemaElementDecl((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,(XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes )arg4,arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDecl__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
        int arg2 = (int) (int)XERCES_CPP_NAMESPACE::SchemaElementDecl::Any ;
        int arg3 = (int) (int)XERCES_CPP_NAMESPACE::Grammar::TOP_LEVEL_SCOPE ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 4)) {
            SWIG_croak("Usage: new_SchemaElementDecl(elementName,modelType,enclosingScope,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SchemaElementDecl. Expected _p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        if (items > 1) {
            arg2 = (int) SvIV(ST(1));
        }
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_SchemaElementDecl. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *)new XERCES_CPP_NAMESPACE::SchemaElementDecl((XERCES_CPP_NAMESPACE::QName const *)arg1,(XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes )arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDecl) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_0); return;
        }
    }
    if ((items >= 1) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_2); return;
            }
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_2); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_2); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_2); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_1); return;
                        }
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_1); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDecl__SWIG_1); return;
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SchemaElementDecl'");
    XSRETURN(0);
}


XS(_wrap_delete_SchemaElementDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaElementDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaElementDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_findAttr) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int arg6 ;
        bool *arg7 = 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: SchemaElementDecl_findAttr(self,qName,uriId,baseName,prefix,options,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_findAttr. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of SchemaElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of SchemaElementDecl_findAttr, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (int) SvIV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of SchemaElementDecl_findAttr. Expected _p_bool");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->findAttr((XMLCh const *)arg2,arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XERCES_CPP_NAMESPACE::XMLElementDecl::LookupOpts )arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getAttDefList) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getAttDefList. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getAttDefList();
                    result = (XERCES_CPP_NAMESPACE::XMLAttDefList *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getCharDataOpts) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getCharDataOpts(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getCharDataOpts. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getCharDataOpts();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_hasAttDefs) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_hasAttDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_hasAttDefs. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->hasAttDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_resetDefs) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_resetDefs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_resetDefs. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)(arg1)->resetDefs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getContentSpec) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getContentSpec(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getContentSpec. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setContentSpec) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setContentSpec(self,toAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setContentSpec. Expected _p_XERCES_CPP_NAMESPACE__ContentSpecNode");
            }
        }
        {
            try {
                (arg1)->setContentSpec(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getContentModel) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getContentModel. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setContentModel) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setContentModel(self,newModelToAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setContentModel. Expected _p_XERCES_CPP_NAMESPACE__XMLContentModel");
            }
        }
        {
            try {
                (arg1)->setContentModel(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getFormattedContentModel) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getFormattedContentModel(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getFormattedContentModel. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getFormattedContentModel();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getAttDef) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaElementDecl_getAttDef(self,baseName,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaElementDecl_getAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        {
            try {
                result = (SchemaAttDef *)(arg1)->getAttDef((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_SchemaAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getAttWildCard) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getAttWildCard(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getAttWildCard. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (SchemaAttDef *)(arg1)->getAttWildCard();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_SchemaAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getModelType) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getModelType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getModelType. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getModelType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getPSVIScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::PSVIScope result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getPSVIScope(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getPSVIScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getPSVIScope();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::PSVIScope * resultobj = new PSVIDefs::PSVIScope((PSVIDefs::PSVIScope &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__PSVIScope, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        DatatypeValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getDatatypeValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDatatypeValidator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_DatatypeValidator, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getEnclosingScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getEnclosingScope(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getEnclosingScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getEnclosingScope();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getFinalSet) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getFinalSet(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getFinalSet. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getFinalSet();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getBlockSet) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getBlockSet(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getBlockSet. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getBlockSet();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getMiscFlags) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getMiscFlags(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getMiscFlags. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getMiscFlags();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getDefaultValue) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getDefaultValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getDefaultValue. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDefaultValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getComplexTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        ComplexTypeInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getComplexTypeInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getComplexTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (ComplexTypeInfo *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getComplexTypeInfo();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_ComplexTypeInfo, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_isGlobalDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_isGlobalDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_isGlobalDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->isGlobalDecl();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getSubstitutionGroupElem) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getSubstitutionGroupElem(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getSubstitutionGroupElem. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getSubstitutionGroupElem();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getValidity) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::Validity result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getValidity(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getValidity. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getValidity();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Validity * resultobj = new PSVIDefs::Validity((PSVIDefs::Validity &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Validity, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getValidationAttempted) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::Validation result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getValidationAttempted(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getValidationAttempted. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getValidationAttempted();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Validation * resultobj = new PSVIDefs::Validation((PSVIDefs::Validation &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Validation, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getTypeType) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::Complexity result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getTypeType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getTypeType. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getTypeType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Complexity * resultobj = new PSVIDefs::Complexity((PSVIDefs::Complexity &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Complexity, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getTypeUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getTypeUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getTypeUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getTypeUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getTypeName) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getTypeName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getTypeName. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getTypeName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getTypeAnonymous) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getTypeAnonymous(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getTypeAnonymous. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getTypeAnonymous();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_isTypeDefinitionUnion) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_isTypeDefinitionUnion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_isTypeDefinitionUnion. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->isTypeDefinitionUnion();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getMemberTypeUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getMemberTypeUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getMemberTypeUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getMemberTypeUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getMemberTypeAnonymous) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getMemberTypeAnonymous(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getMemberTypeAnonymous. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getMemberTypeAnonymous();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getMemberTypeName) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getMemberTypeName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getMemberTypeName. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getMemberTypeName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setElemId) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setElemId(self,elemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setElemId. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setElemId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setModelType) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setModelType(self,toSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setModelType. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setModelType((XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setPSVIScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::PSVIScope arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setPSVIScope(self,toSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setPSVIScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            PSVIDefs::PSVIScope * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__PSVIScope,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setPSVIScope. Expected _p_PSVIDefs__PSVIScope");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setPSVIScope(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        DatatypeValidator *arg2 = (DatatypeValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setDatatypeValidator(self,newDatatypeValidator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setDatatypeValidator. Expected _p_DatatypeValidator");
            }
        }
        {
            try {
                (arg1)->setDatatypeValidator(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setEnclosingScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setEnclosingScope(self,enclosingScope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setEnclosingScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setEnclosingScope(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setFinalSet) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setFinalSet(self,finalSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setFinalSet. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setFinalSet(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setBlockSet) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setBlockSet(self,blockSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setBlockSet. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setBlockSet(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setMiscFlags) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setMiscFlags(self,flags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setMiscFlags. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setMiscFlags(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setDefaultValue) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setDefaultValue(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setDefaultValue. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaElementDecl_setDefaultValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setDefaultValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setComplexTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        ComplexTypeInfo *arg2 = (ComplexTypeInfo *) (ComplexTypeInfo *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setComplexTypeInfo(self,typeInfo);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setComplexTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_ComplexTypeInfo,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setComplexTypeInfo. Expected _p_ComplexTypeInfo");
            }
        }
        {
            try {
                (arg1)->setComplexTypeInfo(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setXsiComplexTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        ComplexTypeInfo *arg2 = (ComplexTypeInfo *) (ComplexTypeInfo *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setXsiComplexTypeInfo(self,typeInfo);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setXsiComplexTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_ComplexTypeInfo,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setXsiComplexTypeInfo. Expected _p_ComplexTypeInfo");
            }
        }
        {
            try {
                (arg1)->setXsiComplexTypeInfo(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setXsiSimpleTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        DatatypeValidator *arg2 = (DatatypeValidator *) (DatatypeValidator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setXsiSimpleTypeInfo(self,dtv);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setXsiSimpleTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setXsiSimpleTypeInfo. Expected _p_DatatypeValidator");
            }
        }
        {
            try {
                (arg1)->setXsiSimpleTypeInfo((DatatypeValidator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setAttWildCard) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        SchemaAttDef *arg2 = (SchemaAttDef *) (SchemaAttDef *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setAttWildCard(self,attWildCard);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setAttWildCard. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setAttWildCard. Expected _p_SchemaAttDef");
            }
        }
        {
            try {
                (arg1)->setAttWildCard(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setSubstitutionGroupElem) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg2 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) (XERCES_CPP_NAMESPACE::SchemaElementDecl *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setSubstitutionGroupElem(self,elemDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setSubstitutionGroupElem. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setSubstitutionGroupElem. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                (arg1)->setSubstitutionGroupElem(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setValidity) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::Validity arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setValidity(self,valid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setValidity. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            PSVIDefs::Validity * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__Validity,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setValidity. Expected _p_PSVIDefs__Validity");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setValidity(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_setValidationAttempted) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        PSVIDefs::Validation arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_setValidationAttempted(self,validation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_setValidationAttempted. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            PSVIDefs::Validation * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__Validation,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_setValidationAttempted. Expected _p_PSVIDefs__Validation");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setValidationAttempted(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_updateValidityFromElement) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaElementDecl_updateValidityFromElement(self,decl,eleGrammar);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_updateValidityFromElement. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_updateValidityFromElement. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        arg3 = (int) SvIV(ST(2));
        {
            try {
                (arg1)->updateValidityFromElement((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg2,(XERCES_CPP_NAMESPACE::Grammar::GrammarType )arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_updateValidityFromAttribute) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        SchemaAttDef *arg2 = (SchemaAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_updateValidityFromAttribute(self,def);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_updateValidityFromAttribute. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_updateValidityFromAttribute. Expected _p_SchemaAttDef");
            }
        }
        {
            try {
                (arg1)->updateValidityFromAttribute((SchemaAttDef const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_reset) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_reset. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_addIdentityConstraint) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        IdentityConstraint *arg2 = (IdentityConstraint *) (IdentityConstraint *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_addIdentityConstraint(self,ic);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_addIdentityConstraint. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_IdentityConstraint,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDecl_addIdentityConstraint. Expected _p_IdentityConstraint");
            }
        }
        {
            try {
                (arg1)->addIdentityConstraint(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getIdentityConstraintCount) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getIdentityConstraintCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getIdentityConstraintCount. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getIdentityConstraintCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getIdentityConstraintAt) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        unsigned int arg2 ;
        IdentityConstraint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaElementDecl_getIdentityConstraintAt(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getIdentityConstraintAt. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (IdentityConstraint *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getIdentityConstraintAt(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_IdentityConstraint, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDecl_getObjectType) {
    {
        XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDecl_getObjectType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDecl_getObjectType. Expected _p_XERCES_CPP_NAMESPACE__SchemaElementDecl");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getObjectType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)0 ;
        bool arg2 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 3)) {
            SWIG_croak("Usage: new_SchemaElementDeclEnumerator(toEnum,adopt,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SchemaElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        if (items > 1) {
            arg2 = (bool) SvIV(ST(1));
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_SchemaElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >(arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SchemaElementDeclEnumerator) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaElementDeclEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaElementDeclEnumerator(XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SchemaElementDeclEnumerator. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaElementDeclEnumerator) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0); return;
            }
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0); return;
                }
            }
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_SchemaElementDeclEnumerator'");
    XSRETURN(0);
}


XS(_wrap_SchemaElementDeclEnumerator_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_nextElement) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_nextElement. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::SchemaElementDecl &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_Reset) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_Reset. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_size) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_size(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_size. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->size();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_resetKey) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_resetKey(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_resetKey. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                (arg1)->resetKey();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_nextElementKey) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        void **arg2 = 0 ;
        int *arg3 = 0 ;
        int *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_nextElementKey(self,void *&,int &,int &);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_nextElementKey. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_p_void,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaElementDeclEnumerator_nextElementKey. Expected _p_p_void");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 3 of SchemaElementDeclEnumerator_nextElementKey. Expected _p_int");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 4 of SchemaElementDeclEnumerator_nextElementKey. Expected _p_int");
            }
        }
        {
            try {
                (arg1)->nextElementKey(*arg2,*arg3,*arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaElementDeclEnumerator_hasMoreKeys) {
    {
        XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaElementDeclEnumerator_hasMoreKeys(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaElementDeclEnumerator_hasMoreKeys. Expected _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->hasMoreKeys();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaGrammar) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaGrammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaGrammar(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SchemaGrammar. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaGrammar *)new XERCES_CPP_NAMESPACE::SchemaGrammar(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SchemaGrammar) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaGrammar. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getGrammarType) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getGrammarType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getGrammarType. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGrammarType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getTargetNamespace) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getTargetNamespace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getTargetNamespace. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getTargetNamespace();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_findOrAddElemDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool *arg7 = 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: SchemaGrammar_findOrAddElemDecl(self,uriId,baseName,prefixName,qName,scope,wasAdded);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_findOrAddElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_findOrAddElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of SchemaGrammar_findOrAddElemDecl. Expected _p_bool");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->findOrAddElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,*arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getElemId) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SchemaGrammar_getElemId(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getElemId. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_getElemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getElemId(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg5 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SchemaGrammar_getElemDecl(self,uriId,baseName,qName,scope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_getElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (unsigned int) SvUV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_getElemDecl(self,elemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->getElemDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getElemDecl) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getElemDecl__SWIG_1); return;
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getElemDecl__SWIG_0); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SchemaGrammar_getElemDecl'");
    XSRETURN(0);
}


XS(_wrap_SchemaGrammar_getNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_getNotationDecl(self,notName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_getNotationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)(arg1)->getNotationDecl((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getValidated) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getValidated(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getValidated. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidated();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_putElemDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg6 ;
        bool arg7 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 7)) {
            SWIG_croak("Usage: SchemaGrammar_putElemDecl(self,uriId,baseName,prefixName,qName,scope,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_putElemDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg6 = (unsigned int) SvUV(ST(5));
        if (items > 6) {
            arg7 = (bool) SvIV(ST(6));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)(arg1)->putElemDecl(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,arg7);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_putElemDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        bool arg3 = (bool) (bool)false ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SchemaGrammar_putElemDecl(self,elemDecl,notDeclared);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_putElemDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                result = (unsigned int)(arg1)->putElemDecl(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_putElemDecl) {
    dXSARGS;
    
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_putElemDecl__SWIG_1); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_putElemDecl__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 6) && (items <= 7)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                if (items <= 6) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_putElemDecl__SWIG_0); return;
                                }
                                {
                                    _v = SvIOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_putElemDecl__SWIG_0); return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SchemaGrammar_putElemDecl'");
    XSRETURN(0);
}


XS(_wrap_SchemaGrammar_putNotationDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLNotationDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) (XERCES_CPP_NAMESPACE::XMLNotationDecl *)0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_putNotationDecl(self,notationDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_putNotationDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLNotationDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->putNotationDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setValidated) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setValidated(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setValidated. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidated(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_reset) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_reset. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getElemEnumerator) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        SwigValueWrapper< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getElemEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getElemEnumerator. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getElemEnumerator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * resultobj = new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getNotationEnumerator) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        SwigValueWrapper< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getNotationEnumerator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getNotationEnumerator. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getNotationEnumerator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > * resultobj = new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAttributeDeclRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getAttributeDeclRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAttributeDeclRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAttributeDeclRegistry();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getComplexTypeRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getComplexTypeRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getComplexTypeRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getComplexTypeRegistry();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getGroupInfoRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getGroupInfoRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getGroupInfoRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGroupInfoRegistry();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAttGroupInfoRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getAttGroupInfoRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAttGroupInfoRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAttGroupInfoRegistry();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getDatatypeRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        DatatypeValidatorFactory *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getDatatypeRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getDatatypeRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (DatatypeValidatorFactory *)(arg1)->getDatatypeRegistry();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_DatatypeValidatorFactory, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getNamespaceScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::NamespaceScope *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getNamespaceScope(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getNamespaceScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::NamespaceScope *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getNamespaceScope();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getValidSubstitutionGroups) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getValidSubstitutionGroups(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getValidSubstitutionGroups. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidSubstitutionGroups();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getIDRefList) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XMLRefInfo > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getIDRefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getIDRefList. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (RefHashTableOf<XMLRefInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getIDRefList();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_RefHashTableOfTXMLRefInfo_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getValidationContext) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        ValidationContext *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getValidationContext(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getValidationContext. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (ValidationContext *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidationContext();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_ValidationContext, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setTargetNamespace) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setTargetNamespace(self,targetNamespace);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setTargetNamespace. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaGrammar_setTargetNamespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setTargetNamespace((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setAttributeDeclRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setAttributeDeclRegistry(self,attReg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setAttributeDeclRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setAttributeDeclRegistry. Expected _p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t");
            }
        }
        {
            try {
                (arg1)->setAttributeDeclRegistry(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setComplexTypeRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setComplexTypeRegistry(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setComplexTypeRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setComplexTypeRegistry. Expected _p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t");
            }
        }
        {
            try {
                (arg1)->setComplexTypeRegistry(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setGroupInfoRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setGroupInfoRegistry(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setGroupInfoRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setGroupInfoRegistry. Expected _p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t");
            }
        }
        {
            try {
                (arg1)->setGroupInfoRegistry(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setAttGroupInfoRegistry) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setAttGroupInfoRegistry(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setAttGroupInfoRegistry. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setAttGroupInfoRegistry. Expected _p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t");
            }
        }
        {
            try {
                (arg1)->setAttGroupInfoRegistry(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setNamespaceScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::NamespaceScope *arg2 = (XERCES_CPP_NAMESPACE::NamespaceScope *) (XERCES_CPP_NAMESPACE::NamespaceScope *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setNamespaceScope(self,nsScope);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setNamespaceScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setNamespaceScope. Expected _p_XERCES_CPP_NAMESPACE__NamespaceScope");
            }
        }
        {
            try {
                (arg1)->setNamespaceScope(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setValidSubstitutionGroups) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *arg2 = (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *) (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setValidSubstitutionGroups(self,RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setValidSubstitutionGroups. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setValidSubstitutionGroups. Expected _p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t");
            }
        }
        {
            try {
                (arg1)->setValidSubstitutionGroups(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_setGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_setGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarDescription");
            }
        }
        {
            try {
                (arg1)->setGrammarDescription(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getGrammarDescription) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLGrammarDescription *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getGrammarDescription(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getGrammarDescription. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGrammarDescription();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_putGroupElemDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_putGroupElemDecl(self,elemDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_putGroupElemDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_putGroupElemDecl. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->putGroupElemDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_putAnnotation) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        void *arg2 = (void *) 0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *arg3 = (XERCES_CPP_NAMESPACE::XSAnnotation *) (XERCES_CPP_NAMESPACE::XSAnnotation *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaGrammar_putAnnotation(self,key,annotation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_putAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_putAnnotation. Expected _p_void");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation,0) < 0) {
                SWIG_croak("Type error in argument 3 of SchemaGrammar_putAnnotation. Expected _p_XERCES_CPP_NAMESPACE__XSAnnotation");
            }
        }
        {
            try {
                (arg1)->putAnnotation(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_addAnnotation) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *arg2 = (XERCES_CPP_NAMESPACE::XSAnnotation *) (XERCES_CPP_NAMESPACE::XSAnnotation *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_addAnnotation(self,annotation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_addAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_addAnnotation. Expected _p_XERCES_CPP_NAMESPACE__XSAnnotation");
            }
        }
        {
            try {
                (arg1)->addAnnotation(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        void *arg2 = (void *) (void *)0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_getAnnotation(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_getAnnotation. Expected _p_void");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XSAnnotation *)(arg1)->getAnnotation((void const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        void *arg2 = (void *) (void *)0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaGrammar_getAnnotation(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaGrammar_getAnnotation. Expected _p_void");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XSAnnotation *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAnnotation((void const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getAnnotation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XSAnnotation *)(arg1)->getAnnotation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
        XERCES_CPP_NAMESPACE::XSAnnotation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaGrammar_getAnnotation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaGrammar_getAnnotation. Expected _p_XERCES_CPP_NAMESPACE__SchemaGrammar");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XSAnnotation *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAnnotation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaGrammar_getAnnotation) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_2); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_3); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, 0, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, 0, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'SchemaGrammar_getAnnotation'");
    XSRETURN(0);
}


XS(_wrap_new_SchemaValidator) {
    {
        XMLErrorReporter *arg1 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 2)) {
            SWIG_croak("Usage: new_SchemaValidator(errReporter,manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XMLErrorReporter,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SchemaValidator. Expected _p_XMLErrorReporter");
                }
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SchemaValidator. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaValidator *)new XERCES_CPP_NAMESPACE::SchemaValidator(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SchemaValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_checkContent) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
        XERCES_CPP_NAMESPACE::QName **arg3 = (XERCES_CPP_NAMESPACE::QName **) (XERCES_CPP_NAMESPACE::QName **)0 ;
        unsigned int arg4 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SchemaValidator_checkContent(self,elemDecl,children,childCount);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_checkContent. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_p_XERCES_CPP_NAMESPACE__QName,0) < 0) {
                SWIG_croak("Type error in argument 3 of SchemaValidator_checkContent. Expected _p_p_XERCES_CPP_NAMESPACE__QName");
            }
        }
        arg4 = (unsigned int) SvUV(ST(3));
        {
            try {
                result = (int)(arg1)->checkContent(arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_faultInAttr) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttr *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaValidator_faultInAttr(self,toFill,attDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttr");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 3 of SchemaValidator_faultInAttr. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            try {
                ((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->faultInAttr(*arg2,(XERCES_CPP_NAMESPACE::XMLAttDef const &)*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_preContentValidation) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool arg2 ;
        bool arg3 = (bool) false ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SchemaValidator_preContentValidation(self,reuseGrammar,validateDefAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_preContentValidation. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        if (items > 2) {
            arg3 = (bool) SvIV(ST(2));
        }
        {
            try {
                (arg1)->preContentValidation(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_postParseValidation) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_postParseValidation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_postParseValidation. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                (arg1)->postParseValidation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_reset) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_reset. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_requiresNamespaces) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_requiresNamespaces(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_requiresNamespaces. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->requiresNamespaces();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_validateAttrValue) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *arg2 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        bool arg4 = (bool) false ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg5 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: SchemaValidator_validateAttrValue(self,attDef,attrValue,preValidation,elemDecl);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLAttDef");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaValidator_validateAttrValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                    SWIG_croak("Type error in argument 5 of SchemaValidator_validateAttrValue. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
                }
            }
        }
        {
            try {
                (arg1)->validateAttrValue((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg2,(XMLCh const *)arg3,arg4,(XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_validateElement) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_validateElement(self,elemDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_validateElement. Expected _p_XERCES_CPP_NAMESPACE__XMLElementDecl");
            }
        }
        {
            try {
                (arg1)->validateElement((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setGrammar) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setGrammar(self,aGrammar);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_setGrammar. Expected _p_XERCES_CPP_NAMESPACE__Grammar");
            }
        }
        {
            try {
                (arg1)->setGrammar(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_handlesDTD) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_handlesDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_handlesDTD. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->handlesDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_handlesSchema) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_handlesSchema(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_handlesSchema. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->handlesSchema();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_normalizeWhiteSpace) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLBuffer *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SchemaValidator_normalizeWhiteSpace(self,dV,value,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_normalizeWhiteSpace. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_normalizeWhiteSpace. Expected _p_XERCES_CPP_NAMESPACE__DatatypeValidator");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaValidator_normalizeWhiteSpace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XMLBuffer,0) < 0) {
                SWIG_croak("Type error in argument 4 of SchemaValidator_normalizeWhiteSpace. Expected _p_XMLBuffer");
            }
        }
        {
            try {
                (arg1)->normalizeWhiteSpace(arg2,(XMLCh const *)arg3,*arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setGrammarResolver) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::GrammarResolver *arg2 = (XERCES_CPP_NAMESPACE::GrammarResolver *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setGrammarResolver(self,grammarResolver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setGrammarResolver. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__GrammarResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_setGrammarResolver. Expected _p_XERCES_CPP_NAMESPACE__GrammarResolver");
            }
        }
        {
            try {
                (arg1)->setGrammarResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setXsiType) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SchemaValidator_setXsiType(self,prefix,localPart,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setXsiType. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaValidator_setXsiType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaValidator_setXsiType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (unsigned int) SvUV(ST(3));
        {
            try {
                (arg1)->setXsiType((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setNillable) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setNillable(self,isNil);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setNillable. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setNillable(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setErrorReporter) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XMLErrorReporter *arg2 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setErrorReporter(self,errorReporter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setErrorReporter. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XMLErrorReporter,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaValidator_setErrorReporter. Expected _p_XMLErrorReporter");
            }
        }
        {
            try {
                (arg1)->setErrorReporter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setExitOnFirstFatal) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setExitOnFirstFatal(self,newValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setExitOnFirstFatal. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExitOnFirstFatal(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_setDatatypeBuffer) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaValidator_setDatatypeBuffer(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_setDatatypeBuffer. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaValidator_setDatatypeBuffer, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setDatatypeBuffer((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_clearDatatypeBuffer) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_clearDatatypeBuffer(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_clearDatatypeBuffer. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                (arg1)->clearDatatypeBuffer();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getCurrentTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::ComplexTypeInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getCurrentTypeInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getCurrentTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ComplexTypeInfo *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getCurrentTypeInfo();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getCurrentDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getCurrentDatatypeValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getCurrentDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getCurrentDatatypeValidator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getMostRecentAttrValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getMostRecentAttrValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getMostRecentAttrValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getMostRecentAttrValidator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getErrorOccurred) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getErrorOccurred(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getErrorOccurred. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getErrorOccurred();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getIsElemSpecified) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getIsElemSpecified(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getIsElemSpecified. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getIsElemSpecified();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaValidator_getNormalizedValue) {
    {
        XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaValidator_getNormalizedValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaValidator_getNormalizedValue. Expected _p_XERCES_CPP_NAMESPACE__SchemaValidator");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getNormalizedValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDefList__SWIG_0) {
    {
        RefHash2KeysTableOf<SchemaAttDef > *arg1 = (RefHash2KeysTableOf<SchemaAttDef > *) (RefHash2KeysTableOf<SchemaAttDef > *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SchemaAttDefList(listToUse,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_RefHash2KeysTableOfTSchemaAttDef_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SchemaAttDefList. Expected _p_RefHash2KeysTableOfTSchemaAttDef_t");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SchemaAttDefList. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDefList *)new XERCES_CPP_NAMESPACE::SchemaAttDefList(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SchemaAttDefList) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaAttDefList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaAttDefList. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_hasMoreElements) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDefList_hasMoreElements(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_hasMoreElements. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->hasMoreElements();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_isEmpty) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDefList_isEmpty(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_isEmpty. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->isEmpty();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_ignore_me_for_now) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        unsigned long arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaAttDefList_ignore_me_for_now(self,uriID,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_ignore_me_for_now. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaAttDefList_ignore_me_for_now, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_findAttDef) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SchemaAttDefList_findAttDef(self,attURI,attName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_findAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaAttDefList_findAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_nextElement) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDefList_nextElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_nextElement. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->nextElement();
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_Reset) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDefList_Reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_Reset. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                (arg1)->Reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_getAttDefCount) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDefList_getAttDefCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_getAttDefCount. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->getAttDefCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_getAttDef__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_getAttDef__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
        unsigned int arg2 ;
        XERCES_CPP_NAMESPACE::XMLAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDefList_getAttDef(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDefList_getAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDefList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLAttDef const &_result_ref = ((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->getAttDef(arg2);
                    result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDefList_getAttDef) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaAttDefList_getAttDef__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaAttDefList_getAttDef__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'SchemaAttDefList_getAttDef'");
    XSRETURN(0);
}


XS(_wrap_new_SchemaAttDefList__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaAttDefList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaAttDefList(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SchemaAttDefList. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDefList *)new XERCES_CPP_NAMESPACE::SchemaAttDefList(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDefList) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDefList__SWIG_1); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDefList__SWIG_1); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_RefHash2KeysTableOfTSchemaAttDef_t, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDefList__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDefList__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SchemaAttDefList'");
    XSRETURN(0);
}


XS(_wrap_new_SchemaAttDef__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaAttDef(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SchemaAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)new XERCES_CPP_NAMESPACE::SchemaAttDef(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDef__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLAttDef::CData ;
        int arg5 = (int) (int)XERCES_CPP_NAMESPACE::XMLAttDef::Implied ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 6)) {
            SWIG_croak("Usage: new_SchemaAttDef(prefix,localPart,uriId,type,defType,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            arg5 = (int) SvIV(ST(4));
        }
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_SchemaAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)new XERCES_CPP_NAMESPACE::SchemaAttDef((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg4,(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDef__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int arg3 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int arg5 ;
        int arg6 ;
        XMLCh *arg7 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg8 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 8)) {
            SWIG_croak("Usage: new_SchemaAttDef(prefix,localPart,uriId,attValue,type,defType,enumValues,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (int) SvIV(ST(2));
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg5 = (int) SvIV(ST(4));
        arg6 = (int) SvIV(ST(5));
        if (items > 6) {
            {
                if (SvPOK(ST(6))||SvIOK(ST(6))||SvNOK(ST(6))) {
                    arg7 = Perl2XMLString(ST(6));
                } else {
                    croak("Type error in argument 2 of new_SchemaAttDef, Expected perl-string.");
                    XSRETURN(1);
                }
            }
        }
        if (items > 7) {
            {
                if (SWIG_ConvertPtr(ST(7), (void **) &arg8, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 8 of new_SchemaAttDef. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)new XERCES_CPP_NAMESPACE::SchemaAttDef((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,(XMLCh const *)arg4,(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes )arg5,(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes )arg6,(XMLCh const *)arg7,arg8);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg7;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg7;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDef__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SchemaAttDef(other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SchemaAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)new XERCES_CPP_NAMESPACE::SchemaAttDef((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SchemaAttDef) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_3); return;
        }
    }
    if ((items >= 3) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_1); return;
                        }
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_1); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_1); return;
                            }
                        }
                    }
                }
            }
        }
    }
    if ((items >= 6) && (items <= 8)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                if (items <= 6) {
                                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_2); return;
                                }
                                {
                                    _v = SvPOK(ST(6))||SvIOK(ST(6))||SvNOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    if (items <= 7) {
                                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_2); return;
                                    }
                                    {
                                        void *tmp;
                                        if (SWIG_ConvertPtr(ST(7), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                            _v = 0;
                                        } else {
                                            _v = 1;
                                        }
                                    }
                                    if (_v) {
                                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SchemaAttDef__SWIG_2); return;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SchemaAttDef'");
    XSRETURN(0);
}


XS(_wrap_delete_SchemaAttDef) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SchemaAttDef(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SchemaAttDef. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getFullName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getFullName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getFullName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getFullName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_reset) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_reset. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getValidity) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::Validity result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getValidity(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getValidity. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getValidity();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Validity * resultobj = new PSVIDefs::Validity((PSVIDefs::Validity &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Validity, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getValidationAttempted) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::Validation result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getValidationAttempted(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getValidationAttempted. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getValidationAttempted();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Validation * resultobj = new PSVIDefs::Validation((PSVIDefs::Validation &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Validation, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getTypeType) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::Complexity result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getTypeType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getTypeType. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getTypeType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::Complexity * resultobj = new PSVIDefs::Complexity((PSVIDefs::Complexity &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__Complexity, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getTypeUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getTypeUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getTypeUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getTypeUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getTypeName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getTypeName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getTypeName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getTypeName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getTypeAnonymous) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getTypeAnonymous(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getTypeAnonymous. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getTypeAnonymous();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_isTypeDefinitionUnion) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_isTypeDefinitionUnion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_isTypeDefinitionUnion. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->isTypeDefinitionUnion();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getMemberTypeUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getMemberTypeUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getMemberTypeUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getMemberTypeUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getMemberTypeAnonymous) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getMemberTypeAnonymous(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getMemberTypeAnonymous. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getMemberTypeAnonymous();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getMemberTypeName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getMemberTypeName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getMemberTypeName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getMemberTypeName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getDOMTypeInfoUri) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getDOMTypeInfoUri(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getDOMTypeInfoUri. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getDOMTypeInfoUri();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getDOMTypeInfoName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getDOMTypeInfoName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getDOMTypeInfoName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getDOMTypeInfoName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getElemId) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getElemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getElemId. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getElemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getAttName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::QName *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getAttName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getAttName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::QName *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getAttName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getDatatypeValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getDatatypeValidator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getNamespaceList) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        ValueVectorOf<unsigned int > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getNamespaceList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getNamespaceList. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (ValueVectorOf<unsigned int > *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getNamespaceList();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_ValueVectorOfTunsigned_int_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getBaseAttDecl__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getBaseAttDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getBaseAttDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getBaseAttDecl();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getBaseAttDecl__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getBaseAttDecl(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getBaseAttDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)(arg1)->getBaseAttDecl();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getBaseAttDecl) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaAttDef_getBaseAttDecl__SWIG_1); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SchemaAttDef_getBaseAttDecl__SWIG_0); return;
        }
    }
    
    croak("No matching function for overloaded 'SchemaAttDef_getBaseAttDecl'");
    XSRETURN(0);
}


XS(_wrap_SchemaAttDef_getPSVIScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::PSVIScope result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getPSVIScope(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getPSVIScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = ((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getPSVIScope();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            PSVIDefs::PSVIScope * resultobj = new PSVIDefs::PSVIScope((PSVIDefs::PSVIScope &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PSVIDefs__PSVIScope, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_getEnclosingCT) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::ComplexTypeInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_getEnclosingCT(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_getEnclosingCT. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ComplexTypeInfo *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getEnclosingCT();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setElemId) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setElemId(self,newId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setElemId. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                (arg1)->setElemId(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setAttName) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int arg4 = (int) (int)-1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SchemaAttDef_setAttName(self,prefix,localPart,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setAttName. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SchemaAttDef_setAttName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SchemaAttDef_setAttName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        {
            try {
                (arg1)->setAttName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setDatatypeValidator(self,newDatatypeValidator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__DatatypeValidator");
            }
        }
        {
            try {
                (arg1)->setDatatypeValidator(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setAnyDatatypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setAnyDatatypeValidator(self,newDatatypeValidator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setAnyDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setAnyDatatypeValidator. Expected _p_XERCES_CPP_NAMESPACE__DatatypeValidator");
            }
        }
        {
            try {
                (arg1)->setAnyDatatypeValidator(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setBaseAttDecl) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg2 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) (XERCES_CPP_NAMESPACE::SchemaAttDef *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setBaseAttDecl(self,attDef);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setBaseAttDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setBaseAttDecl. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                (arg1)->setBaseAttDecl(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setPSVIScope) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::PSVIScope arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setPSVIScope(self,toSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setPSVIScope. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            PSVIDefs::PSVIScope * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__PSVIScope,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setPSVIScope. Expected _p_PSVIDefs__PSVIScope");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setPSVIScope(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setMembertypeValidator) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setMembertypeValidator(self,newDatatypeValidator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setMembertypeValidator. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setMembertypeValidator. Expected _p_XERCES_CPP_NAMESPACE__DatatypeValidator");
            }
        }
        {
            try {
                (arg1)->setMembertypeValidator((XERCES_CPP_NAMESPACE::DatatypeValidator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setNamespaceList) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        ValueVectorOf<unsigned int > *arg2 = (ValueVectorOf<unsigned int > *) (ValueVectorOf<unsigned int > *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setNamespaceList(self,toSet);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setNamespaceList. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_ValueVectorOfTunsigned_int_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setNamespaceList. Expected _p_ValueVectorOfTunsigned_int_t");
            }
        }
        {
            try {
                (arg1)->setNamespaceList((ValueVectorOf<unsigned int > const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_resetNamespaceList) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SchemaAttDef_resetNamespaceList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_resetNamespaceList. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            try {
                (arg1)->resetNamespaceList();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setValidity) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::Validity arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setValidity(self,valid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setValidity. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            PSVIDefs::Validity * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__Validity,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setValidity. Expected _p_PSVIDefs__Validity");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setValidity(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setValidationAttempted) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        PSVIDefs::Validation arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setValidationAttempted(self,validation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setValidationAttempted. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            PSVIDefs::Validation * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_PSVIDefs__Validation,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setValidationAttempted. Expected _p_PSVIDefs__Validation");
            }
            arg2 = *argp;
        }
        {
            try {
                (arg1)->setValidationAttempted(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SchemaAttDef_setEnclosingCT) {
    {
        XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
        XERCES_CPP_NAMESPACE::ComplexTypeInfo *arg2 = (XERCES_CPP_NAMESPACE::ComplexTypeInfo *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SchemaAttDef_setEnclosingCT(self,complexTypeInfo);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef,0) < 0) {
                SWIG_croak("Type error in argument 1 of SchemaAttDef_setEnclosingCT. Expected _p_XERCES_CPP_NAMESPACE__SchemaAttDef");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo,0) < 0) {
                SWIG_croak("Type error in argument 2 of SchemaAttDef_setEnclosingCT. Expected _p_XERCES_CPP_NAMESPACE__ComplexTypeInfo");
            }
        }
        {
            try {
                (arg1)->setEnclosingCT(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXException__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SAXException(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SAXException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXException *)new XERCES_CPP_NAMESPACE::SAXException(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXException__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXException(msg,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SAXException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXException *)new XERCES_CPP_NAMESPACE::SAXException((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXException__SWIG_2) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXException(msg,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXException *)new XERCES_CPP_NAMESPACE::SAXException((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXException__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::SAXException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::SAXException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SAXException(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SAXException. Expected _p_XERCES_CPP_NAMESPACE__SAXException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXException *)new XERCES_CPP_NAMESPACE::SAXException((XERCES_CPP_NAMESPACE::SAXException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXException) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_3); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_1); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_2); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXException__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SAXException'");
    XSRETURN(0);
}


XS(_wrap_delete_SAXException) {
    {
        XERCES_CPP_NAMESPACE::SAXException *arg1 = (XERCES_CPP_NAMESPACE::SAXException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAXException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAXException. Expected _p_XERCES_CPP_NAMESPACE__SAXException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXException_getMessage) {
    {
        XERCES_CPP_NAMESPACE::SAXException *arg1 = (XERCES_CPP_NAMESPACE::SAXException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXException_getMessage(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXException_getMessage. Expected _p_XERCES_CPP_NAMESPACE__SAXException");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXException const *)arg1)->getMessage();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotSupportedException__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotSupportedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SAXNotSupportedException(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SAXNotSupportedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *)new XERCES_CPP_NAMESPACE::SAXNotSupportedException(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotSupportedException__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotSupportedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXNotSupportedException(msg,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SAXNotSupportedException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXNotSupportedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *)new XERCES_CPP_NAMESPACE::SAXNotSupportedException((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotSupportedException__SWIG_2) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotSupportedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXNotSupportedException(msg,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXNotSupportedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *)new XERCES_CPP_NAMESPACE::SAXNotSupportedException((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotSupportedException__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::SAXException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::SAXNotSupportedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SAXNotSupportedException(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SAXNotSupportedException. Expected _p_XERCES_CPP_NAMESPACE__SAXException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *)new XERCES_CPP_NAMESPACE::SAXNotSupportedException((XERCES_CPP_NAMESPACE::SAXException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotSupportedException) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_3); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_1); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_2); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotSupportedException__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SAXNotSupportedException'");
    XSRETURN(0);
}


XS(_wrap_delete_SAXNotSupportedException) {
    {
        XERCES_CPP_NAMESPACE::SAXNotSupportedException *arg1 = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAXNotSupportedException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAXNotSupportedException. Expected _p_XERCES_CPP_NAMESPACE__SAXNotSupportedException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotRecognizedException__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotRecognizedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SAXNotRecognizedException(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SAXNotRecognizedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *)new XERCES_CPP_NAMESPACE::SAXNotRecognizedException(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotRecognizedException__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotRecognizedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXNotRecognizedException(msg,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SAXNotRecognizedException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXNotRecognizedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *)new XERCES_CPP_NAMESPACE::SAXNotRecognizedException((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotRecognizedException__SWIG_2) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXNotRecognizedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_SAXNotRecognizedException(msg,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXNotRecognizedException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *)new XERCES_CPP_NAMESPACE::SAXNotRecognizedException((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotRecognizedException__SWIG_3) {
    {
        XERCES_CPP_NAMESPACE::SAXException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::SAXNotRecognizedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SAXNotRecognizedException(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SAXNotRecognizedException. Expected _p_XERCES_CPP_NAMESPACE__SAXException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *)new XERCES_CPP_NAMESPACE::SAXNotRecognizedException((XERCES_CPP_NAMESPACE::SAXException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXNotRecognizedException) {
    dXSARGS;
    
    if ((items >= 0) && (items <= 1)) {
        int _v;
        if (items <= 0) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_0); return;
        }
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_3); return;
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_1); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_2); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXNotRecognizedException__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SAXNotRecognizedException'");
    XSRETURN(0);
}


XS(_wrap_delete_SAXNotRecognizedException) {
    {
        XERCES_CPP_NAMESPACE::SAXNotRecognizedException *arg1 = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAXNotRecognizedException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAXNotRecognizedException. Expected _p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXParseException__SWIG_0) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXParseException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_SAXParseException(message,locator,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SAXParseException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_SAXParseException. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_SAXParseException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXParseException *)new XERCES_CPP_NAMESPACE::SAXParseException((XMLCh const *)arg1,(XERCES_CPP_NAMESPACE::Locator const &)*arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXParseException__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLSSize_t arg4 ;
        XMLSSize_t arg5 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::SAXParseException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 6)) {
            SWIG_croak("Usage: new_SAXParseException(message,publicId,systemId,lineNumber,columnNumber,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_SAXParseException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_SAXParseException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of new_SAXParseException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (XMLSSize_t) SvIV(ST(3));
        arg5 = (XMLSSize_t) SvIV(ST(4));
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_SAXParseException. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXParseException *)new XERCES_CPP_NAMESPACE::SAXParseException((XMLCh const *)arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXParseException__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_SAXParseException(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_SAXParseException. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXParseException *)new XERCES_CPP_NAMESPACE::SAXParseException((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXParseException) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXParseException__SWIG_2); return;
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXParseException__SWIG_0); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXParseException__SWIG_0); return;
                }
            }
        }
    }
    if ((items >= 5) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXParseException__SWIG_1); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_SAXParseException__SWIG_1); return;
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_SAXParseException'");
    XSRETURN(0);
}


XS(_wrap_delete_SAXParseException) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAXParseException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAXParseException. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParseException_getColumnNumber) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParseException_getColumnNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParseException_getColumnNumber. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getColumnNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParseException_getLineNumber) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParseException_getLineNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParseException_getLineNumber. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getLineNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParseException_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParseException_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParseException_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParseException_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParseException_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParseException_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ErrorHandler_warning) {
    {
        XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ErrorHandler_warning(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ErrorHandler_warning. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of ErrorHandler_warning. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->warning((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ErrorHandler_error) {
    {
        XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ErrorHandler_error(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ErrorHandler_error. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of ErrorHandler_error. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->error((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ErrorHandler_fatalError) {
    {
        XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ErrorHandler_fatalError(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ErrorHandler_fatalError. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of ErrorHandler_fatalError. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->fatalError((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ErrorHandler_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ErrorHandler_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ErrorHandler_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DTDHandler) {
    {
        XERCES_CPP_NAMESPACE::DTDHandler *arg1 = (XERCES_CPP_NAMESPACE::DTDHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DTDHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DTDHandler. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDHandler_notationDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDHandler *arg1 = (XERCES_CPP_NAMESPACE::DTDHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DTDHandler_notationDecl(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDHandler_notationDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->notationDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDHandler_unparsedEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DTDHandler *arg1 = (XERCES_CPP_NAMESPACE::DTDHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DTDHandler_unparsedEntityDecl(self,name,publicId,systemId,notationName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDHandler_unparsedEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DTDHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DTDHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DTDHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DTDHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->unparsedEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DTDHandler_resetDocType) {
    {
        XERCES_CPP_NAMESPACE::DTDHandler *arg1 = (XERCES_CPP_NAMESPACE::DTDHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DTDHandler_resetDocType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DTDHandler_resetDocType. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            try {
                (arg1)->resetDocType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DocumentHandler) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DocumentHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_characters) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DocumentHandler_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_characters. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DocumentHandler_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_endDocument) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DocumentHandler_endDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_endDocument. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                (arg1)->endDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_endElement) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DocumentHandler_endElement(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_endElement. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DocumentHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endElement((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_ignorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DocumentHandler_ignorableWhitespace(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_ignorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DocumentHandler_ignorableWhitespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->ignorableWhitespace((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_processingInstruction) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DocumentHandler_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_processingInstruction. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DocumentHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DocumentHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_resetDocument) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DocumentHandler_resetDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_resetDocument. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                (arg1)->resetDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_setDocumentLocator) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DocumentHandler_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of DocumentHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_startDocument) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DocumentHandler_startDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_startDocument. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                (arg1)->startDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DocumentHandler_startElement) {
    {
        XERCES_CPP_NAMESPACE::DocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::DocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::AttributeList *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DocumentHandler_startElement(self,name,attrs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DocumentHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DocumentHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 3 of DocumentHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            try {
                (arg1)->startElement((XMLCh const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_EntityResolver) {
    {
        XERCES_CPP_NAMESPACE::EntityResolver *arg1 = (XERCES_CPP_NAMESPACE::EntityResolver *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_EntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_EntityResolver. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_EntityResolver_resolveEntity) {
    {
        XERCES_CPP_NAMESPACE::EntityResolver *arg1 = (XERCES_CPP_NAMESPACE::EntityResolver *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::InputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: EntityResolver_resolveEntity(self,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 1 of EntityResolver_resolveEntity. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of EntityResolver_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of EntityResolver_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::InputSource *)(arg1)->resolveEntity((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_AttributeList) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_AttributeList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_AttributeList. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getLength) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AttributeList_getLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getLength. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getLength();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getName) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getName. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getName(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getType) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getType. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getType(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getValue__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getValue(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getValue. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getValue(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getType__overload__name) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getType__overload__name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getType__overload__name. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AttributeList_getType__overload__name, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getType((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getValue__overload__name) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getValue__overload__name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getValue__overload__name. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AttributeList_getValue__overload__name, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getValue__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AttributeList *arg1 = (XERCES_CPP_NAMESPACE::AttributeList *) 0 ;
        char *arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeList_getValue(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeList_getValue. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AttributeList const *)arg1)->getValue((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeList_getValue) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AttributeList_getValue__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AttributeList_getValue__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'AttributeList_getValue'");
    XSRETURN(0);
}


XS(_wrap_HandlerBase_characters) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: HandlerBase_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_characters. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_endDocument) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HandlerBase_endDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_endDocument. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                (arg1)->endDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_endElement) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: HandlerBase_endElement(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_endElement. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endElement((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_ignorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: HandlerBase_ignorableWhitespace(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_ignorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_ignorableWhitespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->ignorableWhitespace((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_processingInstruction) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: HandlerBase_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_processingInstruction. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of HandlerBase_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_resetDocument) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HandlerBase_resetDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_resetDocument. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                (arg1)->resetDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_setDocumentLocator) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: HandlerBase_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of HandlerBase_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_startDocument) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HandlerBase_startDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_startDocument. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                (arg1)->startDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_startElement) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::AttributeList *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: HandlerBase_startElement(self,name,attributes);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_startElement. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList,0) < 0) {
                SWIG_croak("Type error in argument 3 of HandlerBase_startElement. Expected _p_XERCES_CPP_NAMESPACE__AttributeList");
            }
        }
        {
            try {
                (arg1)->startElement((XMLCh const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_resolveEntity) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::InputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: HandlerBase_resolveEntity(self,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_resolveEntity. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of HandlerBase_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::InputSource *)(arg1)->resolveEntity((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_error) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: HandlerBase_error(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_error. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of HandlerBase_error. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->error((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_fatalError) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: HandlerBase_fatalError(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_fatalError. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of HandlerBase_fatalError. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->fatalError((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_warning) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: HandlerBase_warning(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_warning. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of HandlerBase_warning. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->warning((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HandlerBase_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_notationDecl) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: HandlerBase_notationDecl(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_notationDecl. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of HandlerBase_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of HandlerBase_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->notationDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_resetDocType) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: HandlerBase_resetDocType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_resetDocType. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                (arg1)->resetDocType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_HandlerBase_unparsedEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: HandlerBase_unparsedEntityDecl(self,name,publicId,systemId,notationName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of HandlerBase_unparsedEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of HandlerBase_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of HandlerBase_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of HandlerBase_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of HandlerBase_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->unparsedEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_HandlerBase) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_HandlerBase();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::HandlerBase *)new XERCES_CPP_NAMESPACE::HandlerBase();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_HandlerBase) {
    {
        XERCES_CPP_NAMESPACE::HandlerBase *arg1 = (XERCES_CPP_NAMESPACE::HandlerBase *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_HandlerBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_HandlerBase. Expected _p_XERCES_CPP_NAMESPACE__HandlerBase");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Locator) {
    {
        XERCES_CPP_NAMESPACE::Locator *arg1 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Locator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Locator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Locator_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::Locator *arg1 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Locator_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 1 of Locator_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Locator const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Locator_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::Locator *arg1 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Locator_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 1 of Locator_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Locator const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Locator_getLineNumber) {
    {
        XERCES_CPP_NAMESPACE::Locator *arg1 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Locator_getLineNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 1 of Locator_getLineNumber. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::Locator const *)arg1)->getLineNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Locator_getColumnNumber) {
    {
        XERCES_CPP_NAMESPACE::Locator *arg1 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Locator_getColumnNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 1 of Locator_getColumnNumber. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::Locator const *)arg1)->getColumnNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Attributes) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Attributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Attributes. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getLength) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Attributes_getLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getLength. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getLength();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getURI) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getURI(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getURI. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getURI(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getLocalName) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getLocalName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getLocalName. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getLocalName(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getQName) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getQName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getQName. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getQName(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getType__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getType. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getType(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getValue__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getValue(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getValue. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getValue(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getIndex__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Attributes_getIndex(self,uri,localPart);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getIndex. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getIndex, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Attributes_getIndex, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getIndex((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getIndex__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getIndex(self,qName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getIndex. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getIndex, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getIndex((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getIndex) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getIndex__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getIndex__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Attributes_getIndex'");
    XSRETURN(0);
}


XS(_wrap_Attributes_getType__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Attributes_getType(self,uri,localPart);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getType. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Attributes_getType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getType((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getType) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getType__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getType__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Attributes_getType'");
    XSRETURN(0);
}


XS(_wrap_Attributes_getType__overload__name) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getType__overload__name(self,qName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getType__overload__name. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getType__overload__name, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getType((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getValue__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Attributes_getValue(self,uri,localPart);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getValue. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of Attributes_getValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getValue((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Attributes_getValue) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getValue__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Attributes_getValue__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'Attributes_getValue'");
    XSRETURN(0);
}


XS(_wrap_Attributes_getValue__overload__name) {
    {
        XERCES_CPP_NAMESPACE::Attributes *arg1 = (XERCES_CPP_NAMESPACE::Attributes *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Attributes_getValue__overload__name(self,qName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of Attributes_getValue__overload__name. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Attributes_getValue__overload__name, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Attributes const *)arg1)->getValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ContentHandler) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ContentHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ContentHandler. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_characters) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ContentHandler_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_characters. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_endDocument) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ContentHandler_endDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_endDocument. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            try {
                (arg1)->endDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_endElement) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: ContentHandler_endElement(self,uri,localname,qname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_endElement. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of ContentHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of ContentHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endElement((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_ignorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ContentHandler_ignorableWhitespace(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_ignorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_ignorableWhitespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->ignorableWhitespace((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_processingInstruction) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ContentHandler_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_processingInstruction. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of ContentHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_setDocumentLocator) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ContentHandler_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of ContentHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_startDocument) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ContentHandler_startDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_startDocument. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            try {
                (arg1)->startDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_startElement) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Attributes *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: ContentHandler_startElement(self,uri,localname,qname,attrs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of ContentHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of ContentHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 5 of ContentHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            try {
                (arg1)->startElement((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XERCES_CPP_NAMESPACE::Attributes const &)*arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_startPrefixMapping) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ContentHandler_startPrefixMapping(self,prefix,uri);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_startPrefixMapping. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of ContentHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startPrefixMapping((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_endPrefixMapping) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ContentHandler_endPrefixMapping(self,prefix);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_endPrefixMapping. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_endPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endPrefixMapping((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_ContentHandler_skippedEntity) {
    {
        XERCES_CPP_NAMESPACE::ContentHandler *arg1 = (XERCES_CPP_NAMESPACE::ContentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ContentHandler_skippedEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of ContentHandler_skippedEntity. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of ContentHandler_skippedEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->skippedEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_LexicalHandler) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_LexicalHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_LexicalHandler. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_comment) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: LexicalHandler_comment(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_comment. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of LexicalHandler_comment, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->comment((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_endCDATA) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: LexicalHandler_endCDATA(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_endCDATA. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            try {
                (arg1)->endCDATA();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_endDTD) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: LexicalHandler_endDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_endDTD. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            try {
                (arg1)->endDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_endEntity) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: LexicalHandler_endEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_endEntity. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of LexicalHandler_endEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_startCDATA) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: LexicalHandler_startCDATA(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_startCDATA. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            try {
                (arg1)->startCDATA();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_startDTD) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: LexicalHandler_startDTD(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_startDTD. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of LexicalHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of LexicalHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of LexicalHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startDTD((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_LexicalHandler_startEntity) {
    {
        XERCES_CPP_NAMESPACE::LexicalHandler *arg1 = (XERCES_CPP_NAMESPACE::LexicalHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: LexicalHandler_startEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of LexicalHandler_startEntity. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of LexicalHandler_startEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DeclHandler) {
    {
        XERCES_CPP_NAMESPACE::DeclHandler *arg1 = (XERCES_CPP_NAMESPACE::DeclHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DeclHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DeclHandler. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DeclHandler_elementDecl) {
    {
        XERCES_CPP_NAMESPACE::DeclHandler *arg1 = (XERCES_CPP_NAMESPACE::DeclHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DeclHandler_elementDecl(self,name,model);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DeclHandler_elementDecl. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DeclHandler_elementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DeclHandler_elementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->elementDecl((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DeclHandler_attributeDecl) {
    {
        XERCES_CPP_NAMESPACE::DeclHandler *arg1 = (XERCES_CPP_NAMESPACE::DeclHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg6 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 6)) {
            SWIG_croak("Usage: DeclHandler_attributeDecl(self,eName,aName,type,mode,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DeclHandler_attributeDecl. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DeclHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DeclHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DeclHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DeclHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(5))||SvIOK(ST(5))||SvNOK(ST(5))) {
                arg6 = Perl2XMLString(ST(5));
            } else {
                croak("Type error in argument 2 of DeclHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->attributeDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XMLCh const *)arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DeclHandler_internalEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DeclHandler *arg1 = (XERCES_CPP_NAMESPACE::DeclHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DeclHandler_internalEntityDecl(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DeclHandler_internalEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DeclHandler_internalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DeclHandler_internalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->internalEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DeclHandler_externalEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DeclHandler *arg1 = (XERCES_CPP_NAMESPACE::DeclHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DeclHandler_externalEntityDecl(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DeclHandler_externalEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DeclHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DeclHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DeclHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->externalEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_characters) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_characters. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endDocument) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_endDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endDocument. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->endDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endElement) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DefaultHandler_endElement(self,uri,localname,qname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endElement. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_endElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endElement((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_ignorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_ignorableWhitespace(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_ignorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_ignorableWhitespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->ignorableWhitespace((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_processingInstruction) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_processingInstruction. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_resetDocument) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_resetDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_resetDocument. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->resetDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_setDocumentLocator) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of DefaultHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startDocument) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_startDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startDocument. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->startDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startElement) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Attributes *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DefaultHandler_startElement(self,uri,localname,qname,attrs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes,0) < 0) {
                SWIG_croak("Type error in argument 5 of DefaultHandler_startElement. Expected _p_XERCES_CPP_NAMESPACE__Attributes");
            }
        }
        {
            try {
                (arg1)->startElement((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XERCES_CPP_NAMESPACE::Attributes const &)*arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startPrefixMapping) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_startPrefixMapping(self,prefix,uri);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startPrefixMapping. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startPrefixMapping((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endPrefixMapping) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_endPrefixMapping(self,prefix);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endPrefixMapping. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_endPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endPrefixMapping((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_skippedEntity) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_skippedEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_skippedEntity. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_skippedEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->skippedEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_resolveEntity) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::InputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_resolveEntity(self,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_resolveEntity. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_resolveEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::InputSource *)(arg1)->resolveEntity((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_error) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_error(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_error. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of DefaultHandler_error. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->error((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_fatalError) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_fatalError(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_fatalError. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of DefaultHandler_fatalError. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->fatalError((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_warning) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_warning(self,exc);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_warning. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,0) < 0) {
                SWIG_croak("Type error in argument 2 of DefaultHandler_warning. Expected _p_XERCES_CPP_NAMESPACE__SAXParseException");
            }
        }
        {
            try {
                (arg1)->warning((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_notationDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DefaultHandler_notationDecl(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_notationDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_notationDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->notationDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_resetDocType) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_resetDocType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_resetDocType. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->resetDocType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_unparsedEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DefaultHandler_unparsedEntityDecl(self,name,publicId,systemId,notationName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_unparsedEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DefaultHandler_unparsedEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->unparsedEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_comment) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_comment(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_comment. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_comment, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->comment((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endCDATA) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_endCDATA(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endCDATA. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->endCDATA();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endDTD) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_endDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endDTD. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->endDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_endEntity) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_endEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_endEntity. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_endEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startCDATA) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DefaultHandler_startCDATA(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startCDATA. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                (arg1)->startCDATA();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startDTD) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DefaultHandler_startDTD(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startDTD. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startDTD, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startDTD((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_startEntity) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DefaultHandler_startEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_startEntity. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_startEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_elementDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_elementDecl(self,name,model);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_elementDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_elementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_elementDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->elementDecl((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_attributeDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg6 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 6)) {
            SWIG_croak("Usage: DefaultHandler_attributeDecl(self,eName,aName,type,mode,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_attributeDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of DefaultHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(5))||SvIOK(ST(5))||SvNOK(ST(5))) {
                arg6 = Perl2XMLString(ST(5));
            } else {
                croak("Type error in argument 2 of DefaultHandler_attributeDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->attributeDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XMLCh const *)arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_internalEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DefaultHandler_internalEntityDecl(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_internalEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_internalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_internalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->internalEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DefaultHandler_externalEntityDecl) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DefaultHandler_externalEntityDecl(self,name,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of DefaultHandler_externalEntityDecl. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DefaultHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DefaultHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DefaultHandler_externalEntityDecl, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->externalEntityDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DefaultHandler) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DefaultHandler();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DefaultHandler *)new XERCES_CPP_NAMESPACE::DefaultHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DefaultHandler) {
    {
        XERCES_CPP_NAMESPACE::DefaultHandler *arg1 = (XERCES_CPP_NAMESPACE::DefaultHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DefaultHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DefaultHandler. Expected _p_XERCES_CPP_NAMESPACE__DefaultHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_InputSource) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_InputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_InputSource. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_getIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_getIssueFatalErrorIfNotFound(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_getIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->getIssueFatalErrorIfNotFound();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_getMemoryManager) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: InputSource_getMemoryManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_getMemoryManager. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::InputSource const *)arg1)->getMemoryManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: InputSource_setEncoding(self,encodingStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of InputSource_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: InputSource_setPublicId(self,publicId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of InputSource_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: InputSource_setSystemId(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of InputSource_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_InputSource_setIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: InputSource_setIssueFatalErrorIfNotFound(self,flag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of InputSource_setIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIssueFatalErrorIfNotFound(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MemBufInputSource) {
    {
        XMLByte *arg1 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg5 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::MemBufInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        arg4 = true;
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_MemBufInputSource(srcDocBytes,byteCount,bufId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                STRLEN len;
                XMLByte *xmlbytes = (XMLByte *)SvPV(ST(0), len);
                arg2 = len;
                arg1 = new XMLByte[len];
                memcpy(arg1, xmlbytes, len);
            } else {
                croak("Type error in argument 2 of new_MemBufInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg3 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_MemBufInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_MemBufInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemBufInputSource *)new XERCES_CPP_NAMESPACE::MemBufInputSource((XMLByte const *)arg1,arg2,(XMLCh const *)arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MemBufInputSource) {
    {
        XERCES_CPP_NAMESPACE::MemBufInputSource *arg1 = (XERCES_CPP_NAMESPACE::MemBufInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MemBufInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MemBufInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemBufInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::MemBufInputSource *arg1 = (XERCES_CPP_NAMESPACE::MemBufInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MemBufInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__MemBufInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::MemBufInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufInputSource_setCopyBufToStream) {
    {
        XERCES_CPP_NAMESPACE::MemBufInputSource *arg1 = (XERCES_CPP_NAMESPACE::MemBufInputSource *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MemBufInputSource_setCopyBufToStream(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufInputSource_setCopyBufToStream. Expected _p_XERCES_CPP_NAMESPACE__MemBufInputSource");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setCopyBufToStream(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_StdInInputSource) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::StdInInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_StdInInputSource(manager);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_StdInInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::StdInInputSource *)new XERCES_CPP_NAMESPACE::StdInInputSource(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdInInputSource, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_StdInInputSource) {
    {
        XERCES_CPP_NAMESPACE::StdInInputSource *arg1 = (XERCES_CPP_NAMESPACE::StdInInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_StdInInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdInInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_StdInInputSource. Expected _p_XERCES_CPP_NAMESPACE__StdInInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StdInInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::StdInInputSource *arg1 = (XERCES_CPP_NAMESPACE::StdInInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StdInInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdInInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of StdInInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__StdInInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::StdInInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileInputSource__SWIG_0) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::LocalFileInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_LocalFileInputSource(basePath,relativePath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_LocalFileInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_LocalFileInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_LocalFileInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::LocalFileInputSource *)new XERCES_CPP_NAMESPACE::LocalFileInputSource((XMLCh const *)arg1,(XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileInputSource__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::LocalFileInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_LocalFileInputSource(filePath,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_LocalFileInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_LocalFileInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::LocalFileInputSource *)new XERCES_CPP_NAMESPACE::LocalFileInputSource((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileInputSource) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileInputSource__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileInputSource__SWIG_1); return;
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileInputSource__SWIG_0); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileInputSource__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_LocalFileInputSource'");
    XSRETURN(0);
}


XS(_wrap_delete_LocalFileInputSource) {
    {
        XERCES_CPP_NAMESPACE::LocalFileInputSource *arg1 = (XERCES_CPP_NAMESPACE::LocalFileInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_LocalFileInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_LocalFileInputSource. Expected _p_XERCES_CPP_NAMESPACE__LocalFileInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LocalFileInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::LocalFileInputSource *arg1 = (XERCES_CPP_NAMESPACE::LocalFileInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: LocalFileInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of LocalFileInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__LocalFileInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::LocalFileInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLURL *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::URLInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_URLInputSource(urlId,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__XMLURL");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::URLInputSource *)new XERCES_CPP_NAMESPACE::URLInputSource((XERCES_CPP_NAMESPACE::XMLURL const &)*arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource__SWIG_1) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::URLInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_URLInputSource(baseId,systemId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::URLInputSource *)new XERCES_CPP_NAMESPACE::URLInputSource((XMLCh const *)arg1,(XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::URLInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: new_URLInputSource(baseId,systemId,publicId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::URLInputSource *)new XERCES_CPP_NAMESPACE::URLInputSource((XMLCh const *)arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource__SWIG_3) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::URLInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: new_URLInputSource(baseId,systemId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::URLInputSource *)new XERCES_CPP_NAMESPACE::URLInputSource((XMLCh const *)arg1,(char const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource__SWIG_4) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        char *arg2 ;
        char *arg3 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::URLInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: new_URLInputSource(baseId,systemId,publicId,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_URLInputSource, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of new_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::URLInputSource *)new XERCES_CPP_NAMESPACE::URLInputSource((XMLCh const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_URLInputSource) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_0); return;
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_1); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_1); return;
                }
            }
        }
    }
    if ((items >= 2) && (items <= 3)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_3); return;
                }
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_3); return;
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_2); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_2); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_4); return;
                    }
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_URLInputSource__SWIG_4); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_URLInputSource'");
    XSRETURN(0);
}


XS(_wrap_delete_URLInputSource) {
    {
        XERCES_CPP_NAMESPACE::URLInputSource *arg1 = (XERCES_CPP_NAMESPACE::URLInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_URLInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_URLInputSource. Expected _p_XERCES_CPP_NAMESPACE__URLInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_URLInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::URLInputSource *arg1 = (XERCES_CPP_NAMESPACE::URLInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: URLInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of URLInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__URLInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::URLInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_URLInputSource_urlSrc) {
    {
        XERCES_CPP_NAMESPACE::URLInputSource *arg1 = (XERCES_CPP_NAMESPACE::URLInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::XMLURL *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: URLInputSource_urlSrc(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of URLInputSource_urlSrc. Expected _p_XERCES_CPP_NAMESPACE__URLInputSource");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLURL const &_result_ref = ((XERCES_CPP_NAMESPACE::URLInputSource const *)arg1)->urlSrc();
                    result = (XERCES_CPP_NAMESPACE::XMLURL *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLFormatter__SWIG_0) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg3 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *)0 ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::NoEscapes ;
        int arg5 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Fail ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLFormatter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 6)) {
            SWIG_croak("Usage: new_XMLFormatter(outEncoding,docVersion,target,escapeFlags,unrepFlags,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLFormatter, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_XMLFormatter, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            arg5 = (int) SvIV(ST(4));
        }
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLFormatter *)new XERCES_CPP_NAMESPACE::XMLFormatter((XMLCh const *)arg1,(XMLCh const *)arg2,arg3,(XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg4,(XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLFormatter__SWIG_1) {
    {
        char *arg1 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg3 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *)0 ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::NoEscapes ;
        int arg5 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Fail ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLFormatter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 6)) {
            SWIG_croak("Usage: new_XMLFormatter(outEncoding,docVersion,target,escapeFlags,unrepFlags,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            arg5 = (int) SvIV(ST(4));
        }
        if (items > 5) {
            {
                if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 6 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLFormatter *)new XERCES_CPP_NAMESPACE::XMLFormatter((char const *)arg1,(char const *)arg2,arg3,(XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg4,(XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg5,arg6);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLFormatter__SWIG_2) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg2 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *)0 ;
        int arg3 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::NoEscapes ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Fail ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg5 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLFormatter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 5)) {
            SWIG_croak("Usage: new_XMLFormatter(outEncoding,target,escapeFlags,unrepFlags,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_XMLFormatter, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 5 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLFormatter *)new XERCES_CPP_NAMESPACE::XMLFormatter((XMLCh const *)arg1,arg2,(XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg3,(XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLFormatter__SWIG_3) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg2 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *)0 ;
        int arg3 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::NoEscapes ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Fail ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg5 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLFormatter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 5)) {
            SWIG_croak("Usage: new_XMLFormatter(outEncoding,target,escapeFlags,unrepFlags,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 5 of new_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLFormatter *)new XERCES_CPP_NAMESPACE::XMLFormatter((char const *)arg1,arg2,(XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg3,(XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLFormatter) {
    dXSARGS;
    
    if ((items >= 2) && (items <= 5)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_2); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_2); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_2); return;
                        }
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_2); return;
                        }
                    }
                }
            }
        }
    }
    if ((items >= 2) && (items <= 5)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (items <= 2) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_3); return;
                }
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_3); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_3); return;
                        }
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_3); return;
                        }
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_0); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_0); return;
                        }
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_0); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_0); return;
                            }
                        }
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 6)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_1); return;
                        }
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            if (items <= 5) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_1); return;
                            }
                            {
                                void *tmp;
                                if (SWIG_ConvertPtr(ST(5), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLFormatter__SWIG_1); return;
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_XMLFormatter'");
    XSRETURN(0);
}


XS(_wrap_delete_XMLFormatter) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLFormatter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLFormatter. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_formatBuf) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int arg4 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::DefaultEscape ;
        int arg5 = (int) (int)XERCES_CPP_NAMESPACE::XMLFormatter::DefaultUnRep ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: XMLFormatter_formatBuf(self,toFormat,count,escapeFlags,unrepFlags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_formatBuf. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLFormatter_formatBuf, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        if (items > 3) {
            arg4 = (int) SvIV(ST(3));
        }
        if (items > 4) {
            arg5 = (int) SvIV(ST(4));
        }
        {
            try {
                (arg1)->formatBuf((XMLCh const *)arg2,arg3,(XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg4,(XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_writeBOM) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        XMLByte *arg2 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLFormatter_writeBOM(self,toFormat,count);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_writeBOM. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (XMLByte *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->writeBOM((XMLByte const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_getEncodingName) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLFormatter_getEncodingName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_getEncodingName. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLFormatter const *)arg1)->getEncodingName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_getTranscoder) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        XERCES_CPP_NAMESPACE::XMLTranscoder *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLFormatter_getTranscoder(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_getTranscoder. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLTranscoder *)((XERCES_CPP_NAMESPACE::XMLFormatter const *)arg1)->getTranscoder();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLTranscoder, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_setEscapeFlags) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLFormatter_setEscapeFlags(self,newFlags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_setEscapeFlags. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setEscapeFlags((XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatter_setUnRepFlags) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatter *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatter *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XMLFormatter_setUnRepFlags(self,newFlags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatter_setUnRepFlags. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setUnRepFlags((XERCES_CPP_NAMESPACE::XMLFormatter::UnRepFlags )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLFormatTarget) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLFormatTarget(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatTarget_writeChars) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) 0 ;
        XMLByte *arg2 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg3 ;
        XERCES_CPP_NAMESPACE::XMLFormatter *arg4 = (XERCES_CPP_NAMESPACE::XMLFormatter *) (XERCES_CPP_NAMESPACE::XMLFormatter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: XMLFormatTarget_writeChars(self,toWrite,count,formatter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (XMLByte *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 4 of XMLFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                (arg1)->writeChars((XMLByte const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLFormatTarget_flush) {
    {
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLFormatTarget_flush(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLFormatTarget_flush. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        {
            try {
                (arg1)->flush();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MemBufFormatTarget) {
    {
        int arg1 = (int) 1023 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 2)) {
            SWIG_croak("Usage: new_MemBufFormatTarget(initCapacity,manager);");
        }
        if (items > 0) {
            arg1 = (int) SvIV(ST(0));
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_MemBufFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *)new XERCES_CPP_NAMESPACE::MemBufFormatTarget(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_MemBufFormatTarget) {
    {
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MemBufFormatTarget(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MemBufFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__MemBufFormatTarget");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufFormatTarget_writeChars) {
    {
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *) 0 ;
        XMLByte *arg2 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg3 ;
        XERCES_CPP_NAMESPACE::XMLFormatter *arg4 = (XERCES_CPP_NAMESPACE::XMLFormatter *) (XERCES_CPP_NAMESPACE::XMLFormatter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: MemBufFormatTarget_writeChars(self,toWrite,count,formatter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__MemBufFormatTarget");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (XMLByte *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 4 of MemBufFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                (arg1)->writeChars((XMLByte const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufFormatTarget_getRawBuffer) {
    {
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *) 0 ;
        XMLByte *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MemBufFormatTarget_getRawBuffer(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufFormatTarget_getRawBuffer. Expected _p_XERCES_CPP_NAMESPACE__MemBufFormatTarget");
            }
        }
        {
            try {
                result = (XMLByte *)((XERCES_CPP_NAMESPACE::MemBufFormatTarget const *)arg1)->getRawBuffer();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufFormatTarget_getLen) {
    {
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MemBufFormatTarget_getLen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufFormatTarget_getLen. Expected _p_XERCES_CPP_NAMESPACE__MemBufFormatTarget");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::MemBufFormatTarget const *)arg1)->getLen();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MemBufFormatTarget_reset) {
    {
        XERCES_CPP_NAMESPACE::MemBufFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::MemBufFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MemBufFormatTarget_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of MemBufFormatTarget_reset. Expected _p_XERCES_CPP_NAMESPACE__MemBufFormatTarget");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileFormatTarget__SWIG_0) {
    {
        XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::LocalFileFormatTarget *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_LocalFileFormatTarget(XMLCh const *const,manager);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of new_LocalFileFormatTarget, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_LocalFileFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::LocalFileFormatTarget *)new XERCES_CPP_NAMESPACE::LocalFileFormatTarget((XMLCh const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileFormatTarget__SWIG_1) {
    {
        char *arg1 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::LocalFileFormatTarget *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: new_LocalFileFormatTarget(char const *const,manager);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_LocalFileFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::LocalFileFormatTarget *)new XERCES_CPP_NAMESPACE::LocalFileFormatTarget((char const *)arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_LocalFileFormatTarget) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileFormatTarget__SWIG_0); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileFormatTarget__SWIG_0); return;
            }
        }
    }
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileFormatTarget__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_LocalFileFormatTarget__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_LocalFileFormatTarget'");
    XSRETURN(0);
}


XS(_wrap_delete_LocalFileFormatTarget) {
    {
        XERCES_CPP_NAMESPACE::LocalFileFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::LocalFileFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_LocalFileFormatTarget(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_LocalFileFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LocalFileFormatTarget_writeChars) {
    {
        XERCES_CPP_NAMESPACE::LocalFileFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::LocalFileFormatTarget *) 0 ;
        XMLByte *arg2 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg3 ;
        XERCES_CPP_NAMESPACE::XMLFormatter *arg4 = (XERCES_CPP_NAMESPACE::XMLFormatter *) (XERCES_CPP_NAMESPACE::XMLFormatter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: LocalFileFormatTarget_writeChars(self,toWrite,count,formatter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of LocalFileFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (XMLByte *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 4 of LocalFileFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                (arg1)->writeChars((XMLByte const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_LocalFileFormatTarget_flush) {
    {
        XERCES_CPP_NAMESPACE::LocalFileFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::LocalFileFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: LocalFileFormatTarget_flush(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of LocalFileFormatTarget_flush. Expected _p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget");
            }
        }
        {
            try {
                (arg1)->flush();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_StdOutFormatTarget) {
    {
        XERCES_CPP_NAMESPACE::StdOutFormatTarget *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_StdOutFormatTarget();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::StdOutFormatTarget *)new XERCES_CPP_NAMESPACE::StdOutFormatTarget();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_StdOutFormatTarget) {
    {
        XERCES_CPP_NAMESPACE::StdOutFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::StdOutFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_StdOutFormatTarget(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_StdOutFormatTarget. Expected _p_XERCES_CPP_NAMESPACE__StdOutFormatTarget");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StdOutFormatTarget_writeChars) {
    {
        XERCES_CPP_NAMESPACE::StdOutFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::StdOutFormatTarget *) 0 ;
        XMLByte *arg2 = (XMLByte *) (XMLByte *)0 ;
        unsigned int arg3 ;
        XERCES_CPP_NAMESPACE::XMLFormatter *arg4 = (XERCES_CPP_NAMESPACE::XMLFormatter *) (XERCES_CPP_NAMESPACE::XMLFormatter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: StdOutFormatTarget_writeChars(self,toWrite,count,formatter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of StdOutFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__StdOutFormatTarget");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (XMLByte *) SvPV(ST(1), PL_na);
        arg3 = (unsigned int) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter,0) < 0) {
                SWIG_croak("Type error in argument 4 of StdOutFormatTarget_writeChars. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatter");
            }
        }
        {
            try {
                (arg1)->writeChars((XMLByte const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StdOutFormatTarget_flush) {
    {
        XERCES_CPP_NAMESPACE::StdOutFormatTarget *arg1 = (XERCES_CPP_NAMESPACE::StdOutFormatTarget *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StdOutFormatTarget_flush(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 1 of StdOutFormatTarget_flush. Expected _p_XERCES_CPP_NAMESPACE__StdOutFormatTarget");
            }
        }
        {
            try {
                (arg1)->flush();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLUni) {
    {
        XERCES_CPP_NAMESPACE::XMLUni *arg1 = (XERCES_CPP_NAMESPACE::XMLUni *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLUni(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLUni. Expected _p_XERCES_CPP_NAMESPACE__XMLUni");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLPScanToken__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XMLPScanToken *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_XMLPScanToken();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLPScanToken *)new XERCES_CPP_NAMESPACE::XMLPScanToken();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLPScanToken__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_XMLPScanToken(toCopy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_XMLPScanToken. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLPScanToken *)new XERCES_CPP_NAMESPACE::XMLPScanToken((XERCES_CPP_NAMESPACE::XMLPScanToken const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XMLPScanToken) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLPScanToken__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XMLPScanToken__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_XMLPScanToken'");
    XSRETURN(0);
}


XS(_wrap_delete_XMLPScanToken) {
    {
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg1 = (XERCES_CPP_NAMESPACE::XMLPScanToken *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLPScanToken(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLPScanToken. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Parser) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Parser(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Parser. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_setEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *arg2 = (XERCES_CPP_NAMESPACE::EntityResolver *) (XERCES_CPP_NAMESPACE::EntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_setEntityResolver(self,resolver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of Parser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            try {
                (arg1)->setEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_setDTDHandler) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XERCES_CPP_NAMESPACE::DTDHandler *arg2 = (XERCES_CPP_NAMESPACE::DTDHandler *) (XERCES_CPP_NAMESPACE::DTDHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_setDTDHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of Parser_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            try {
                (arg1)->setDTDHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_setDocumentHandler) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XERCES_CPP_NAMESPACE::DocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::DocumentHandler *) (XERCES_CPP_NAMESPACE::DocumentHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_setDocumentHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_setDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of Parser_setDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                (arg1)->setDocumentHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::ErrorHandler *) (XERCES_CPP_NAMESPACE::ErrorHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_setErrorHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of Parser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_parse__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_parse(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_parse. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of Parser_parse. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                (arg1)->parse((XERCES_CPP_NAMESPACE::InputSource const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_parse__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_parse. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Parser_parse, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->parse((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_parse__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::Parser *arg1 = (XERCES_CPP_NAMESPACE::Parser *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Parser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser,0) < 0) {
                SWIG_croak("Type error in argument 1 of Parser_parse. Expected _p_XERCES_CPP_NAMESPACE__Parser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->parse((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Parser_parse) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Parser_parse__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Parser_parse__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Parser_parse__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'Parser_parse'");
    XSRETURN(0);
}


XS(_wrap_delete_XMLDocumentHandler) {
    {
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLDocumentHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLDocumentHandler_elementTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: XMLDocumentHandler_elementTypeInfo(self,XMLCh const *const,XMLCh const *const);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLDocumentHandler_elementTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XMLDocumentHandler_elementTypeInfo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLDocumentHandler_elementTypeInfo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->elementTypeInfo((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLErrorReporter) {
    {
        XERCES_CPP_NAMESPACE::XMLErrorReporter *arg1 = (XERCES_CPP_NAMESPACE::XMLErrorReporter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLErrorReporter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLErrorReporter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLErrorReporter. Expected _p_XERCES_CPP_NAMESPACE__XMLErrorReporter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLErrorReporter_error) {
    {
        XERCES_CPP_NAMESPACE::XMLErrorReporter *arg1 = (XERCES_CPP_NAMESPACE::XMLErrorReporter *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int arg4 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg6 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg7 = (XMLCh *) (XMLCh *)0 ;
        XMLSSize_t arg8 ;
        XMLSSize_t arg9 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: XMLErrorReporter_error(self,errCode,errDomain,type,errorText,systemId,publicId,lineNum,colNum);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLErrorReporter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLErrorReporter_error. Expected _p_XERCES_CPP_NAMESPACE__XMLErrorReporter");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XMLErrorReporter_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (int) SvIV(ST(3));
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of XMLErrorReporter_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(5))||SvIOK(ST(5))||SvNOK(ST(5))) {
                arg6 = Perl2XMLString(ST(5));
            } else {
                croak("Type error in argument 2 of XMLErrorReporter_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(6))||SvIOK(ST(6))||SvNOK(ST(6))) {
                arg7 = Perl2XMLString(ST(6));
            } else {
                croak("Type error in argument 2 of XMLErrorReporter_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg8 = (XMLSSize_t) SvIV(ST(7));
        arg9 = (XMLSSize_t) SvIV(ST(8));
        {
            try {
                (arg1)->error(arg2,(XMLCh const *)arg3,(XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrTypes )arg4,(XMLCh const *)arg5,(XMLCh const *)arg6,(XMLCh const *)arg7,arg8,arg9);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLErrorReporter_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::XMLErrorReporter *arg1 = (XERCES_CPP_NAMESPACE::XMLErrorReporter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XMLErrorReporter_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLErrorReporter,0) < 0) {
                SWIG_croak("Type error in argument 1 of XMLErrorReporter_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__XMLErrorReporter");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XMLEntityHandler) {
    {
        XERCES_CPP_NAMESPACE::XMLEntityHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XMLEntityHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XMLEntityHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DocTypeHandler) {
    {
        XERCES_CPP_NAMESPACE::DocTypeHandler *arg1 = (XERCES_CPP_NAMESPACE::DocTypeHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DocTypeHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocTypeHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DocTypeHandler. Expected _p_XERCES_CPP_NAMESPACE__DocTypeHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SAX2XMLReader) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAX2XMLReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAX2XMLReader. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getContentHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::ContentHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getContentHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getContentHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ContentHandler *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getContentHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getDTDHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::DTDHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getDTDHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DTDHandler *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getDTDHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::EntityResolver *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ErrorHandler *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getErrorHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getFeature) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_getFeature(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getFeature. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_getFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getFeature((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const SAXNotSupportedException& e)
            {
                makeSAXNotSupportedException(e);
            }
            catch (const SAXNotRecognizedException& e)
            {
                makeSAXNotRecognizedException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getProperty) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_getProperty(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getProperty. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_getProperty, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (void *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getProperty((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const SAXNotSupportedException& e)
            {
                makeSAXNotSupportedException(e);
            }
            catch (const SAXNotRecognizedException& e)
            {
                makeSAXNotRecognizedException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setContentHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::ContentHandler *arg2 = (XERCES_CPP_NAMESPACE::ContentHandler *) (XERCES_CPP_NAMESPACE::ContentHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setContentHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setContentHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setContentHandler. Expected _p_XERCES_CPP_NAMESPACE__ContentHandler");
            }
        }
        {
            try {
                (arg1)->setContentHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setDTDHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::DTDHandler *arg2 = (XERCES_CPP_NAMESPACE::DTDHandler *) (XERCES_CPP_NAMESPACE::DTDHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setDTDHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            try {
                (arg1)->setDTDHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *arg2 = (XERCES_CPP_NAMESPACE::EntityResolver *) (XERCES_CPP_NAMESPACE::EntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setEntityResolver(self,resolver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            try {
                (arg1)->setEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::ErrorHandler *) (XERCES_CPP_NAMESPACE::ErrorHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setErrorHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setFeature) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAX2XMLReader_setFeature(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setFeature. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_setFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                (arg1)->setFeature((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const SAXNotSupportedException& e)
            {
                makeSAXNotSupportedException(e);
            }
            catch (const SAXNotRecognizedException& e)
            {
                makeSAXNotRecognizedException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setProperty) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        void *arg3 = (void *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAX2XMLReader_setProperty(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setProperty. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_setProperty, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAX2XMLReader_setProperty. Expected _p_void");
            }
        }
        {
            try {
                (arg1)->setProperty((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const SAXNotSupportedException& e)
            {
                makeSAXNotSupportedException(e);
            }
            catch (const SAXNotRecognizedException& e)
            {
                makeSAXNotRecognizedException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parse__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_parse(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parse. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_parse. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                (arg1)->parse((XERCES_CPP_NAMESPACE::InputSource const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parse__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parse. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_parse, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->parse((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parse__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parse. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->parse((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parse) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parse__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parse__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parse__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'SAX2XMLReader_parse'");
    XSRETURN(0);
}


XS(_wrap_SAX2XMLReader_getDeclarationHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::DeclHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getDeclarationHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getDeclarationHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DeclHandler *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getDeclarationHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getLexicalHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::LexicalHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getLexicalHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getLexicalHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::LexicalHandler *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getLexicalHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setDeclarationHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::DeclHandler *arg2 = (XERCES_CPP_NAMESPACE::DeclHandler *) (XERCES_CPP_NAMESPACE::DeclHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setDeclarationHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setDeclarationHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setDeclarationHandler. Expected _p_XERCES_CPP_NAMESPACE__DeclHandler");
            }
        }
        {
            try {
                (arg1)->setDeclarationHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setLexicalHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::LexicalHandler *arg2 = (XERCES_CPP_NAMESPACE::LexicalHandler *) (XERCES_CPP_NAMESPACE::LexicalHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setLexicalHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setLexicalHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setLexicalHandler. Expected _p_XERCES_CPP_NAMESPACE__LexicalHandler");
            }
        }
        {
            try {
                (arg1)->setLexicalHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getValidator) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getValidator. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLValidator *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getValidator();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getErrorCount) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getErrorCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getErrorCount. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getErrorCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getExitOnFirstFatalError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getExitOnFirstFatalError();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getValidationConstraintFatal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getValidationConstraintFatal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_getGrammar(self,nameSpaceKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_getGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getGrammar((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getRootGrammar) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getRootGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getRootGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getRootGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getURIText) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_getURIText(self,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getURIText. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getURIText(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_getSrcOffset) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_getSrcOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_getSrcOffset. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SAX2XMLReader const *)arg1)->getSrcOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setValidator) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLValidator *arg2 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setValidator(self,valueToAdopt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setValidator. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_setValidator. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
            }
        }
        {
            try {
                (arg1)->setValidator(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setExitOnFirstFatalError(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExitOnFirstFatalError(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_setValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_setValidationConstraintFatal(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_setValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationConstraintFatal(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parseFirst__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAX2XMLReader_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_parseFirst, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XMLCh const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parseFirst__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAX2XMLReader_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((char const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parseFirst__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAX2XMLReader_parseFirst(self,source,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAX2XMLReader_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parseFirst) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parseFirst__SWIG_2); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parseFirst__SWIG_0); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_parseFirst__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SAX2XMLReader_parseFirst'");
    XSRETURN(0);
}


XS(_wrap_SAX2XMLReader_parseNext) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_parseNext(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parseNext. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_parseNext. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseNext(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_parseReset) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_parseReset(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_parseReset. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_parseReset. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                (arg1)->parseReset(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_loadGrammar__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAX2XMLReader_loadGrammar(self,source,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_loadGrammar__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAX2XMLReader_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAX2XMLReader_loadGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_loadGrammar__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        char *arg2 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAX2XMLReader_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((char const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_loadGrammar) {
    dXSARGS;
    
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_0); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_0); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_1); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_2); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAX2XMLReader_loadGrammar__SWIG_2); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SAX2XMLReader_loadGrammar'");
    XSRETURN(0);
}


XS(_wrap_SAX2XMLReader_resetCachedGrammarPool) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAX2XMLReader_resetCachedGrammarPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_resetCachedGrammarPool. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            try {
                (arg1)->resetCachedGrammarPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_installAdvDocHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) (XERCES_CPP_NAMESPACE::XMLDocumentHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_installAdvDocHandler(self,toInstall);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_installAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_installAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            try {
                (arg1)->installAdvDocHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAX2XMLReader_removeAdvDocHandler) {
    {
        XERCES_CPP_NAMESPACE::SAX2XMLReader *arg1 = (XERCES_CPP_NAMESPACE::SAX2XMLReader *) 0 ;
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) (XERCES_CPP_NAMESPACE::XMLDocumentHandler *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAX2XMLReader_removeAdvDocHandler(self,toRemove);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAX2XMLReader_removeAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__SAX2XMLReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAX2XMLReader_removeAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            try {
                result = (bool)(arg1)->removeAdvDocHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XMLReaderFactory_createXMLReader) {
    {
        XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLGrammarPool *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarPool *) (XERCES_CPP_NAMESPACE::XMLGrammarPool *)0 ;
        XERCES_CPP_NAMESPACE::SAX2XMLReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 2)) {
            SWIG_croak("Usage: XMLReaderFactory_createXMLReader(manager,gramPool);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 1 of XMLReaderFactory_createXMLReader. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarPool,0) < 0) {
                    SWIG_croak("Type error in argument 2 of XMLReaderFactory_createXMLReader. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarPool");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAX2XMLReader *)XERCES_CPP_NAMESPACE::XMLReaderFactory::createXMLReader(arg1,arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SAXParser) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) (XERCES_CPP_NAMESPACE::XMLValidator *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLGrammarPool *arg3 = (XERCES_CPP_NAMESPACE::XMLGrammarPool *) (XERCES_CPP_NAMESPACE::XMLGrammarPool *)0 ;
        XERCES_CPP_NAMESPACE::SAXParser *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 3)) {
            SWIG_croak("Usage: new_SAXParser(valToAdopt,manager,gramPool);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_SAXParser. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
                }
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_SAXParser. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarPool,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_SAXParser. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarPool");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::SAXParser *)new XERCES_CPP_NAMESPACE::SAXParser(arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SAXParser) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SAXParser(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SAXParser. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getDocumentHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::DocumentHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getDocumentHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DocumentHandler *)(arg1)->getDocumentHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::EntityResolver *)(arg1)->getEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getXMLEntityResolver__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getXMLEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLEntityResolver *)(arg1)->getXMLEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getXMLEntityResolver__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getXMLEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLEntityResolver *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getXMLEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getXMLEntityResolver) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_getXMLEntityResolver__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_getXMLEntityResolver__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'SAXParser_getXMLEntityResolver'");
    XSRETURN(0);
}


XS(_wrap_SAXParser_getErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ErrorHandler *)(arg1)->getErrorHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getPSVIHandler__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getPSVIHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::PSVIHandler *)(arg1)->getPSVIHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getPSVIHandler__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getPSVIHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::PSVIHandler *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getPSVIHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getPSVIHandler) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_getPSVIHandler__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_getPSVIHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'SAXParser_getPSVIHandler'");
    XSRETURN(0);
}


XS(_wrap_SAXParser_getValidator) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getValidator. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLValidator const &_result_ref = ((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getValidator();
                    result = (XERCES_CPP_NAMESPACE::XMLValidator *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getValidationScheme) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getValidationScheme(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getValidationScheme. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getValidationScheme();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getDoSchema) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getDoSchema(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getDoSchema. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getDoSchema();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getValidationSchemaFullChecking) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getValidationSchemaFullChecking(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getValidationSchemaFullChecking. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getValidationSchemaFullChecking();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getErrorCount) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getErrorCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getErrorCount. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getErrorCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getDoNamespaces) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getDoNamespaces(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getDoNamespaces. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getDoNamespaces();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getExitOnFirstFatalError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getExitOnFirstFatalError();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getValidationConstraintFatal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getValidationConstraintFatal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getExternalSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getExternalSchemaLocation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getExternalSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getExternalSchemaLocation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getExternalNoNamespaceSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getExternalNoNamespaceSchemaLocation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getExternalNoNamespaceSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getExternalNoNamespaceSchemaLocation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getSecurityManager) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        SecurityManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getSecurityManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getSecurityManager. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (SecurityManager *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getSecurityManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_SecurityManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getLoadExternalDTD) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getLoadExternalDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getLoadExternalDTD. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getLoadExternalDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_isCachingGrammarFromParse) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_isCachingGrammarFromParse(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_isCachingGrammarFromParse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->isCachingGrammarFromParse();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_isUsingCachedGrammarInParse) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_isUsingCachedGrammarInParse(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_isUsingCachedGrammarInParse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->isUsingCachedGrammarInParse();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getCalculateSrcOfs) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getCalculateSrcOfs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getCalculateSrcOfs. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getCalculateSrcOfs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getStandardUriConformant) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getStandardUriConformant(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getStandardUriConformant. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getStandardUriConformant();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_getGrammar(self,nameSpaceKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_getGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getGrammar((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getRootGrammar) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getRootGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getRootGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getRootGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getURIText) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_getURIText(self,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getURIText. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getURIText(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_getSrcOffset) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_getSrcOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_getSrcOffset. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::SAXParser const *)arg1)->getSrcOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setDoNamespaces) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setDoNamespaces(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setDoNamespaces. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setDoNamespaces(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setValidationScheme) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setValidationScheme(self,newScheme);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setValidationScheme. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationScheme((XERCES_CPP_NAMESPACE::SAXParser::ValSchemes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setDoSchema) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setDoSchema(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setDoSchema. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setDoSchema(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setValidationSchemaFullChecking) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setValidationSchemaFullChecking(self,schemaFullChecking);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setValidationSchemaFullChecking. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationSchemaFullChecking(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setExitOnFirstFatalError(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExitOnFirstFatalError(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setValidationConstraintFatal(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationConstraintFatal(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setExternalSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setExternalSchemaLocation(self,schemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setExternalSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_setExternalSchemaLocation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setExternalSchemaLocation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setExternalNoNamespaceSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setExternalNoNamespaceSchemaLocation(self,noNamespaceSchemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setExternalNoNamespaceSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_setExternalNoNamespaceSchemaLocation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setExternalNoNamespaceSchemaLocation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setSecurityManager) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        SecurityManager *arg2 = (SecurityManager *) (SecurityManager *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setSecurityManager(self,securityManager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setSecurityManager. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_SecurityManager,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setSecurityManager. Expected _p_SecurityManager");
            }
        }
        {
            try {
                (arg1)->setSecurityManager(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setLoadExternalDTD) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setLoadExternalDTD(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setLoadExternalDTD. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setLoadExternalDTD(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_cacheGrammarFromParse) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_cacheGrammarFromParse(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_cacheGrammarFromParse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->cacheGrammarFromParse(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_useCachedGrammarInParse) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_useCachedGrammarInParse(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_useCachedGrammarInParse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->useCachedGrammarInParse(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setCalculateSrcOfs) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setCalculateSrcOfs(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setCalculateSrcOfs. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setCalculateSrcOfs(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setStandardUriConformant) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setStandardUriConformant(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setStandardUriConformant. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setStandardUriConformant(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_useScanner) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_useScanner(self,scannerName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_useScanner. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_useScanner, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->useScanner((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_installAdvDocHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) (XERCES_CPP_NAMESPACE::XMLDocumentHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_installAdvDocHandler(self,toInstall);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_installAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_installAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            try {
                (arg1)->installAdvDocHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_removeAdvDocHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) (XERCES_CPP_NAMESPACE::XMLDocumentHandler *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_removeAdvDocHandler(self,toRemove);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_removeAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_removeAdvDocHandler. Expected _p_XERCES_CPP_NAMESPACE__XMLDocumentHandler");
            }
        }
        {
            try {
                result = (bool)(arg1)->removeAdvDocHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parseFirst__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAXParser_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_parseFirst, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XMLCh const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parseFirst__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAXParser_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((char const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parseFirst__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SAXParser_parseFirst(self,source,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of SAXParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parseFirst) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parseFirst__SWIG_2); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parseFirst__SWIG_0); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parseFirst__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SAXParser_parseFirst'");
    XSRETURN(0);
}


XS(_wrap_SAXParser_parseNext) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_parseNext(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parseNext. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_parseNext. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseNext(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parseReset) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_parseReset(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parseReset. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_parseReset. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                (arg1)->parseReset(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_loadGrammar__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAXParser_loadGrammar(self,source,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_loadGrammar__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAXParser_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_loadGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_loadGrammar__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        char *arg2 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: SAXParser_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((char const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_loadGrammar) {
    dXSARGS;
    
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_0); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_0); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_1); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_2); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_loadGrammar__SWIG_2); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'SAXParser_loadGrammar'");
    XSRETURN(0);
}


XS(_wrap_SAXParser_resetCachedGrammarPool) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_resetCachedGrammarPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_resetCachedGrammarPool. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                (arg1)->resetCachedGrammarPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parse__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_parse(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_parse. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                (arg1)->parse((XERCES_CPP_NAMESPACE::InputSource const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parse__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of SAXParser_parse, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->parse((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parse__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_parse. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->parse((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_parse) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parse__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parse__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_SAXParser_parse__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'SAXParser_parse'");
    XSRETURN(0);
}


XS(_wrap_SAXParser_setDocumentHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::DocumentHandler *arg2 = (XERCES_CPP_NAMESPACE::DocumentHandler *) (XERCES_CPP_NAMESPACE::DocumentHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setDocumentHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setDocumentHandler. Expected _p_XERCES_CPP_NAMESPACE__DocumentHandler");
            }
        }
        {
            try {
                (arg1)->setDocumentHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setDTDHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::DTDHandler *arg2 = (XERCES_CPP_NAMESPACE::DTDHandler *) (XERCES_CPP_NAMESPACE::DTDHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setDTDHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setDTDHandler. Expected _p_XERCES_CPP_NAMESPACE__DTDHandler");
            }
        }
        {
            try {
                (arg1)->setDTDHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::ErrorHandler *) (XERCES_CPP_NAMESPACE::ErrorHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setErrorHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setPSVIHandler) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *arg2 = (XERCES_CPP_NAMESPACE::PSVIHandler *) (XERCES_CPP_NAMESPACE::PSVIHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setPSVIHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__PSVIHandler");
            }
        }
        {
            try {
                (arg1)->setPSVIHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *arg2 = (XERCES_CPP_NAMESPACE::EntityResolver *) (XERCES_CPP_NAMESPACE::EntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setEntityResolver(self,resolver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            try {
                (arg1)->setEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_setXMLEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *arg2 = (XERCES_CPP_NAMESPACE::XMLEntityResolver *) (XERCES_CPP_NAMESPACE::XMLEntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SAXParser_setXMLEntityResolver(self,resolver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_setXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of SAXParser_setXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityResolver");
            }
        }
        {
            try {
                (arg1)->setXMLEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_error) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int arg4 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg6 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg7 = (XMLCh *) (XMLCh *)0 ;
        XMLSSize_t arg8 ;
        XMLSSize_t arg9 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: SAXParser_error(self,errCode,msgDomain,errType,errorText,systemId,publicId,lineNum,colNum);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_error. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of SAXParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (int) SvIV(ST(3));
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of SAXParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(5))||SvIOK(ST(5))||SvNOK(ST(5))) {
                arg6 = Perl2XMLString(ST(5));
            } else {
                croak("Type error in argument 2 of SAXParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(6))||SvIOK(ST(6))||SvNOK(ST(6))) {
                arg7 = Perl2XMLString(ST(6));
            } else {
                croak("Type error in argument 2 of SAXParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg8 = (XMLSSize_t) SvIV(ST(7));
        arg9 = (XMLSSize_t) SvIV(ST(8));
        {
            try {
                (arg1)->error(arg2,(XMLCh const *)arg3,(XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrTypes )arg4,(XMLCh const *)arg5,(XMLCh const *)arg6,(XMLCh const *)arg7,arg8,arg9);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SAXParser_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::SAXParser *arg1 = (XERCES_CPP_NAMESPACE::SAXParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SAXParser_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of SAXParser_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__SAXParser");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMException__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DOMException();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMException__SWIG_1) {
    {
        short arg1 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_DOMException(code,message);");
        }
        arg1 = (short) SvIV(ST(0));
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_DOMException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException(arg1,(XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMException__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::DOMException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_DOMException(other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DOMException. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException((XERCES_CPP_NAMESPACE::DOMException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMException) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMException__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMException__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMException__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DOMException'");
    XSRETURN(0);
}


XS(_wrap_delete_DOMException) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMException. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMException_code_set) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMException_code_set(self,code);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMException_code_set. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->code = (XERCES_CPP_NAMESPACE::DOMException::ExceptionCode )arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMException_code_get) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMException_code_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMException_code_get. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        result = (int) ((arg1)->code);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMException_msg_set) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMException_msg_set(self,msg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMException_msg_set. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMException_msg_set, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (arg1) (arg1)->msg = (XMLCh const *)arg2;
        
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMException_msg_get) {
    {
        XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMException_msg_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMException_msg_get. Expected _p_XERCES_CPP_NAMESPACE__DOMException");
            }
        }
        result = (XMLCh *) ((arg1)->msg);
        
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMDocumentRange) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentRange *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentRange *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMDocumentRange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMDocumentRange. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentRange");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentRange_createRange) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentRange *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMRange *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentRange_createRange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentRange_createRange. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMRange *)(arg1)->createRange();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMDocumentTraversal) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentTraversal *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentTraversal *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMDocumentTraversal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMDocumentTraversal. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentTraversal_createNodeIterator) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentTraversal *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentTraversal *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        unsigned long arg3 ;
        XERCES_CPP_NAMESPACE::DOMNodeFilter *arg4 = (XERCES_CPP_NAMESPACE::DOMNodeFilter *) 0 ;
        bool arg5 ;
        XERCES_CPP_NAMESPACE::DOMNodeIterator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DOMDocumentTraversal_createNodeIterator(self,root,whatToShow,filter,entityReferenceExpansion);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentTraversal_createNodeIterator. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMDocumentTraversal_createNodeIterator. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter,0) < 0) {
                SWIG_croak("Type error in argument 4 of DOMDocumentTraversal_createNodeIterator. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeFilter");
            }
        }
        arg5 = (bool) SvIV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeIterator *)(arg1)->createNodeIterator(arg2,arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentTraversal_createTreeWalker) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentTraversal *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentTraversal *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        unsigned long arg3 ;
        XERCES_CPP_NAMESPACE::DOMNodeFilter *arg4 = (XERCES_CPP_NAMESPACE::DOMNodeFilter *) 0 ;
        bool arg5 ;
        XERCES_CPP_NAMESPACE::DOMTreeWalker *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DOMDocumentTraversal_createTreeWalker(self,root,whatToShow,filter,entityReferenceExpansion);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentTraversal_createTreeWalker. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMDocumentTraversal_createTreeWalker. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter,0) < 0) {
                SWIG_croak("Type error in argument 4 of DOMDocumentTraversal_createTreeWalker. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeFilter");
            }
        }
        arg5 = (bool) SvIV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMTreeWalker *)(arg1)->createTreeWalker(arg2,arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNodeFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeFilter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNodeFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNodeFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeFilter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeFilter_acceptNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeFilter *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNodeFilter_acceptNode(self,node);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeFilter_acceptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeFilter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNodeFilter_acceptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (short)((XERCES_CPP_NAMESPACE::DOMNodeFilter const *)arg1)->acceptNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNodeIterator) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNodeIterator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNodeIterator. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_getRoot) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_getRoot(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_getRoot. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->getRoot();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_getWhatToShow) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_getWhatToShow(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_getWhatToShow. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->getWhatToShow();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_getFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeFilter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_getFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_getFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeFilter *)(arg1)->getFilter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_getExpandEntityReferences) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_getExpandEntityReferences(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_getExpandEntityReferences. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (bool)(arg1)->getExpandEntityReferences();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_nextNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_nextNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_nextNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->nextNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_previousNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_previousNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_previousNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->previousNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_detach) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_detach(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_detach. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                (arg1)->detach();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeIterator_release) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeIterator *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeIterator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeIterator_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeIterator_release. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeIterator");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMRange) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMRange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMRange. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getStartContainer) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getStartContainer(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getStartContainer. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getStartContainer();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getStartOffset) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XMLSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getStartOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getStartOffset. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XMLSize_t)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getStartOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getEndContainer) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getEndContainer(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getEndContainer. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getEndContainer();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getEndOffset) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XMLSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getEndOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getEndOffset. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XMLSize_t)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getEndOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getCollapsed) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getCollapsed(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getCollapsed. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getCollapsed();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_getCommonAncestorContainer) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_getCommonAncestorContainer(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_getCommonAncestorContainer. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->getCommonAncestorContainer();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setStart) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLSize_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMRange_setStart(self,refNode,offset);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setStart. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setStart. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg3 = (XMLSize_t) SvUV(ST(2));
        {
            try {
                (arg1)->setStart((XERCES_CPP_NAMESPACE::DOMNode const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setEnd) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLSize_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMRange_setEnd(self,refNode,offset);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setEnd. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setEnd. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg3 = (XMLSize_t) SvUV(ST(2));
        {
            try {
                (arg1)->setEnd((XERCES_CPP_NAMESPACE::DOMNode const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setStartBefore) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_setStartBefore(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setStartBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setStartBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setStartBefore((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setStartAfter) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_setStartAfter(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setStartAfter. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setStartAfter. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setStartAfter((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setEndBefore) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_setEndBefore(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setEndBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setEndBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setEndBefore((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_setEndAfter) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_setEndAfter(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_setEndAfter. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_setEndAfter. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setEndAfter((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_collapse) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_collapse(self,toStart);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_collapse. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->collapse(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_selectNode) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_selectNode(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_selectNode. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_selectNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->selectNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_selectNodeContents) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_selectNodeContents(self,refNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_selectNodeContents. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_selectNodeContents. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->selectNodeContents((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_compareBoundaryPoints) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        int arg2 ;
        XERCES_CPP_NAMESPACE::DOMRange *arg3 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMRange_compareBoundaryPoints(self,how,sourceRange);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_compareBoundaryPoints. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMRange_compareBoundaryPoints. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (short)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->compareBoundaryPoints((XERCES_CPP_NAMESPACE::DOMRange::CompareHow )arg2,(XERCES_CPP_NAMESPACE::DOMRange const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_deleteContents) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_deleteContents(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_deleteContents. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                (arg1)->deleteContents();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_extractContents) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentFragment *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_extractContents(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_extractContents. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentFragment *)(arg1)->extractContents();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_cloneContents) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentFragment *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_cloneContents(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_cloneContents. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentFragment *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->cloneContents();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_insertNode) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_insertNode(self,newNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_insertNode. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_insertNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->insertNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_surroundContents) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRange_surroundContents(self,newParent);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_surroundContents. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMRange_surroundContents. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->surroundContents(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_cloneRange) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XERCES_CPP_NAMESPACE::DOMRange *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_cloneRange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_cloneRange. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMRange *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->cloneRange();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_toString) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_toString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_toString. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMRange const *)arg1)->toString();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_detach) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_detach(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_detach. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                (arg1)->detach();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRange_release) {
    {
        XERCES_CPP_NAMESPACE::DOMRange *arg1 = (XERCES_CPP_NAMESPACE::DOMRange *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRange_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRange_release. Expected _p_XERCES_CPP_NAMESPACE__DOMRange");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMRangeException__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMRangeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DOMRangeException();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMRangeException *)new XERCES_CPP_NAMESPACE::DOMRangeException();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMRangeException__SWIG_1) {
    {
        int arg1 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMRangeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_DOMRangeException(code,message);");
        }
        arg1 = (int) SvIV(ST(0));
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of new_DOMRangeException, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMRangeException *)new XERCES_CPP_NAMESPACE::DOMRangeException((XERCES_CPP_NAMESPACE::DOMRangeException::RangeExceptionCode )arg1,(XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException, SWIG_SHADOW|SWIG_OWNER);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMRangeException__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::DOMRangeException *arg1 = 0 ;
        XERCES_CPP_NAMESPACE::DOMRangeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_DOMRangeException(other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DOMRangeException. Expected _p_XERCES_CPP_NAMESPACE__DOMRangeException");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMRangeException *)new XERCES_CPP_NAMESPACE::DOMRangeException((XERCES_CPP_NAMESPACE::DOMRangeException const &)*arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DOMRangeException) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMRangeException__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMRangeException__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DOMRangeException__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_DOMRangeException'");
    XSRETURN(0);
}


XS(_wrap_delete_DOMRangeException) {
    {
        XERCES_CPP_NAMESPACE::DOMRangeException *arg1 = (XERCES_CPP_NAMESPACE::DOMRangeException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMRangeException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMRangeException. Expected _p_XERCES_CPP_NAMESPACE__DOMRangeException");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRangeException_code_set) {
    {
        XERCES_CPP_NAMESPACE::DOMRangeException *arg1 = (XERCES_CPP_NAMESPACE::DOMRangeException *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMRangeException_code_set(self,code);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRangeException_code_set. Expected _p_XERCES_CPP_NAMESPACE__DOMRangeException");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->code = (XERCES_CPP_NAMESPACE::DOMRangeException::RangeExceptionCode )arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMRangeException_code_get) {
    {
        XERCES_CPP_NAMESPACE::DOMRangeException *arg1 = (XERCES_CPP_NAMESPACE::DOMRangeException *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMRangeException_code_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMRangeException_code_get. Expected _p_XERCES_CPP_NAMESPACE__DOMRangeException");
            }
        }
        result = (int) ((arg1)->code);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMTreeWalker) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMTreeWalker(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMTreeWalker. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_getRoot) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_getRoot(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_getRoot. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->getRoot();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_getWhatToShow) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_getWhatToShow(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_getWhatToShow. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (unsigned long)(arg1)->getWhatToShow();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_getFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeFilter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_getFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_getFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeFilter *)(arg1)->getFilter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_getExpandEntityReferences) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_getExpandEntityReferences(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_getExpandEntityReferences. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (bool)(arg1)->getExpandEntityReferences();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_getCurrentNode) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_getCurrentNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_getCurrentNode. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->getCurrentNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_parentNode) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_parentNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_parentNode. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->parentNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_firstChild) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_firstChild(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_firstChild. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->firstChild();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_lastChild) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_lastChild(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_lastChild. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->lastChild();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_previousSibling) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_previousSibling(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_previousSibling. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->previousSibling();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_nextSibling) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_nextSibling(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_nextSibling. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->nextSibling();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_previousNode) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_previousNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_previousNode. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->previousNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_nextNode) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_nextNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_nextNode. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->nextNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_setCurrentNode) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMTreeWalker_setCurrentNode(self,currentNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_setCurrentNode. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMTreeWalker_setCurrentNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setCurrentNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMTreeWalker_release) {
    {
        XERCES_CPP_NAMESPACE::DOMTreeWalker *arg1 = (XERCES_CPP_NAMESPACE::DOMTreeWalker *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMTreeWalker_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMTreeWalker_release. Expected _p_XERCES_CPP_NAMESPACE__DOMTreeWalker");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getNodeName) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getNodeName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getNodeName. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getNodeValue) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getNodeValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getNodeValue. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getNodeType) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getNodeType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getNodeType. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (short)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeType();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getParentNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getParentNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getParentNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getParentNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getChildNodes) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getChildNodes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getChildNodes. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getChildNodes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getFirstChild) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getFirstChild(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getFirstChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getFirstChild();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getLastChild) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getLastChild(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getLastChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getLastChild();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getPreviousSibling) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getPreviousSibling(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getPreviousSibling. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getPreviousSibling();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getNextSibling) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getNextSibling(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getNextSibling. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNextSibling();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getAttributes) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getAttributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getAttributes. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getAttributes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getOwnerDocument) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getOwnerDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getOwnerDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getOwnerDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_cloneNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool arg2 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_cloneNode(self,deep);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_cloneNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->cloneNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_insertBefore) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg3 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNode_insertBefore(self,newChild,refChild);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_insertBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_insertBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMNode_insertBefore. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->insertBefore(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_replaceChild) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg3 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNode_replaceChild(self,newChild,oldChild);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_replaceChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_replaceChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMNode_replaceChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->replaceChild(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_removeChild) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_removeChild(self,oldChild);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_removeChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_removeChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeChild(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_appendChild) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_appendChild(self,newChild);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_appendChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_appendChild. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->appendChild(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_hasChildNodes) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_hasChildNodes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_hasChildNodes. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->hasChildNodes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_setNodeValue) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_setNodeValue(self,nodeValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_setNodeValue. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_setNodeValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setNodeValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_normalize) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_normalize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_normalize. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->normalize();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_isSupported) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNode_isSupported(self,feature,version);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_isSupported. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_isSupported, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMNode_isSupported, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isSupported((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getNamespaceURI) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getNamespaceURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getNamespaceURI. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNamespaceURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getPrefix) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getPrefix(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getPrefix. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getPrefix();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getLocalName) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getLocalName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getLocalName. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getLocalName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_setPrefix) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_setPrefix(self,prefix);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_setPrefix. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_setPrefix, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPrefix((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_hasAttributes) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_hasAttributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_hasAttributes. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->hasAttributes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_isSameNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_isSameNode(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_isSameNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_isSameNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isSameNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_isEqualNode) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_isEqualNode(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_isEqualNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_isEqualNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isEqualNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_setUserData) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        void *arg3 = (void *) 0 ;
        XERCES_CPP_NAMESPACE::DOMUserDataHandler *arg4 = (XERCES_CPP_NAMESPACE::DOMUserDataHandler *) 0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMNode_setUserData(self,key,data,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_setUserData. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_setUserData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMNode_setUserData. Expected _p_void");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler,0) < 0) {
                SWIG_croak("Type error in argument 4 of DOMNode_setUserData. Expected _p_XERCES_CPP_NAMESPACE__DOMUserDataHandler");
            }
        }
        {
            try {
                result = (void *)(arg1)->setUserData((XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getUserData) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_getUserData(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getUserData. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_getUserData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (void *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getUserData((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getBaseURI) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getBaseURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getBaseURI. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getBaseURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_compareTreePosition) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_compareTreePosition(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_compareTreePosition. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_compareTreePosition. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (short)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->compareTreePosition((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getTextContent) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_getTextContent(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getTextContent. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getTextContent();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_setTextContent) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_setTextContent(self,textContent);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_setTextContent. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_setTextContent, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setTextContent((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_lookupNamespacePrefix) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        bool arg3 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNode_lookupNamespacePrefix(self,namespaceURI,useDefault);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_lookupNamespacePrefix. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_lookupNamespacePrefix, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->lookupNamespacePrefix((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_isDefaultNamespace) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_isDefaultNamespace(self,namespaceURI);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_isDefaultNamespace. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_isDefaultNamespace, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isDefaultNamespace((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_lookupNamespaceURI) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_lookupNamespaceURI(self,prefix);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_lookupNamespaceURI. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_lookupNamespaceURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->lookupNamespaceURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_getInterface) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_getInterface(self,feature);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_getInterface. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNode_getInterface, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->getInterface((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_release) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNode_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_release. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_operator_equal_to) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_operator_equal_to(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_operator_equal_to. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE_DOMNode_operator_Se__Se_(arg1,(XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNode_operator_not_equal_to) {
    {
        XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNode_operator_not_equal_to(self,other);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNode_operator_not_equal_to. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNode_operator_not_equal_to. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)XERCES_CPP_NAMESPACE_DOMNode_operator_SN__Se_(arg1,(XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMAttr) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMAttr(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMAttr. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_getName) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_getName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_getName. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_getSpecified) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_getSpecified(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_getSpecified. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getSpecified();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_getValue) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_getValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_getValue. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getValue();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_setValue) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMAttr_setValue(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_setValue. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMAttr_setValue, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setValue((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_getOwnerElement) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_getOwnerElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_getOwnerElement. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getOwnerElement();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_isId) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_isId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_isId. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->isId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMAttr_getTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XERCES_CPP_NAMESPACE::DOMTypeInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMAttr_getTypeInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMAttr_getTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMTypeInfo *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getTypeInfo();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMCharacterData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMCharacterData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMCharacterData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_getData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMCharacterData_getData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_getData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->getData();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_getLength) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMCharacterData_getLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_getLength. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        {
            try {
                result = (XMLSize_t)((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->getLength();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_substringData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLSize_t arg2 ;
        XMLSize_t arg3 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMCharacterData_substringData(self,offset,count);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_substringData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        arg3 = (XMLSize_t) SvUV(ST(2));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->substringData(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_appendData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMCharacterData_appendData(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_appendData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMCharacterData_appendData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->appendData((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_insertData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLSize_t arg2 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMCharacterData_insertData(self,offset,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_insertData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMCharacterData_insertData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->insertData(arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_deleteData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLSize_t arg2 ;
        XMLSize_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMCharacterData_deleteData(self,offset,count);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_deleteData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        arg3 = (XMLSize_t) SvUV(ST(2));
        {
            try {
                (arg1)->deleteData(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_replaceData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLSize_t arg2 ;
        XMLSize_t arg3 ;
        XMLCh *arg4 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMCharacterData_replaceData(self,offset,count,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_replaceData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        arg3 = (XMLSize_t) SvUV(ST(2));
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DOMCharacterData_replaceData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->replaceData(arg2,arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMCharacterData_setData) {
    {
        XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMCharacterData_setData(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMCharacterData_setData. Expected _p_XERCES_CPP_NAMESPACE__DOMCharacterData");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMCharacterData_setData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setData((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMText) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMText(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMText. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMText_splitText) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        XMLSize_t arg2 ;
        XERCES_CPP_NAMESPACE::DOMText *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMText_splitText(self,offset);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMText_splitText. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMText *)(arg1)->splitText(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMText_getIsWhitespaceInElementContent) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMText_getIsWhitespaceInElementContent(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMText_getIsWhitespaceInElementContent. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMText const *)arg1)->getIsWhitespaceInElementContent();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMText_getWholeText) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMText_getWholeText(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMText_getWholeText. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->getWholeText();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMText_replaceWholeText) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMText *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMText_replaceWholeText(self,content);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMText_replaceWholeText. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMText_replaceWholeText, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMText *)(arg1)->replaceWholeText((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMText_isIgnorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMText_isIgnorableWhitespace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMText_isIgnorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__DOMText");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMText const *)arg1)->isIgnorableWhitespace();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMCDATASection) {
    {
        XERCES_CPP_NAMESPACE::DOMCDATASection *arg1 = (XERCES_CPP_NAMESPACE::DOMCDATASection *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMCDATASection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMCDATASection. Expected _p_XERCES_CPP_NAMESPACE__DOMCDATASection");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMComment) {
    {
        XERCES_CPP_NAMESPACE::DOMComment *arg1 = (XERCES_CPP_NAMESPACE::DOMComment *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMComment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMComment. Expected _p_XERCES_CPP_NAMESPACE__DOMComment");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMDocument) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createElement) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createElement(self,tagName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createElement. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createElement, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)(arg1)->createElement((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createDocumentFragment) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentFragment *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_createDocumentFragment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createDocumentFragment. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentFragment *)(arg1)->createDocumentFragment();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createTextNode) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMText *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createTextNode(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createTextNode. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createTextNode, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMText *)(arg1)->createTextNode((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createComment) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMComment *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createComment(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createComment. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createComment, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMComment *)(arg1)->createComment((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createCDATASection) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMCDATASection *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createCDATASection(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createCDATASection. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createCDATASection, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMCDATASection *)(arg1)->createCDATASection((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createProcessingInstruction) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMProcessingInstruction *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMDocument_createProcessingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createProcessingInstruction. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createProcessingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_createProcessingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *)(arg1)->createProcessingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createAttribute(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->createAttribute((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createEntityReference) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMEntityReference *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createEntityReference(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createEntityReference. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createEntityReference, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMEntityReference *)(arg1)->createEntityReference((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getDoctype) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getDoctype(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getDoctype. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentType *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getDoctype();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getImplementation) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMImplementation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getImplementation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getImplementation. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMImplementation *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getImplementation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getDocumentElement) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getDocumentElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getDocumentElement. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getDocumentElement();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getElementsByTagName) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_getElementsByTagName(self,tagname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getElementsByTagName. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_getElementsByTagName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getElementsByTagName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_importNode) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        bool arg3 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMDocument_importNode(self,importedNode,deep);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_importNode. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMDocument_importNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->importNode(arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createElementNS__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMDocument_createElementNS(self,namespaceURI,qualifiedName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createElementNS. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createElementNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_createElementNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)(arg1)->createElementNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMDocument_createAttributeNS(self,namespaceURI,qualifiedName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_createAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->createAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getElementsByTagNameNS) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMDocument_getElementsByTagNameNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getElementsByTagNameNS. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_getElementsByTagNameNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_getElementsByTagNameNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getElementsByTagNameNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getElementById) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_getElementById(self,elementId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getElementById. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_getElementById, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getElementById((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getActualEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getActualEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getActualEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getActualEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setActualEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setActualEncoding(self,actualEncoding);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setActualEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_setActualEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setActualEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setEncoding(self,encoding);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getStandalone) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getStandalone(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getStandalone. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getStandalone();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setStandalone) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setStandalone(self,standalone);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setStandalone. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setStandalone(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getVersion) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getVersion. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getVersion();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setVersion) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setVersion(self,version);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setVersion. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_setVersion, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setVersion((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getDocumentURI) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getDocumentURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getDocumentURI. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getDocumentURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setDocumentURI) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setDocumentURI(self,documentURI);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setDocumentURI. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_setDocumentURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setDocumentURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getStrictErrorChecking) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getStrictErrorChecking(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getStrictErrorChecking. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getStrictErrorChecking();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_setStrictErrorChecking) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_setStrictErrorChecking(self,strictErrorChecking);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_setStrictErrorChecking. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setStrictErrorChecking(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_renameNode) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XMLCh *arg4 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMDocument_renameNode(self,n,namespaceURI,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_renameNode. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMDocument_renameNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_renameNode, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DOMDocument_renameNode, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->renameNode(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_adoptNode) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_adoptNode(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_adoptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMDocument_adoptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->adoptNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_normalizeDocument) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_normalizeDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_normalizeDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                (arg1)->normalizeDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_getDOMConfiguration) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMConfiguration *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_getDOMConfiguration(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_getDOMConfiguration. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMConfiguration *)((XERCES_CPP_NAMESPACE::DOMDocument const *)arg1)->getDOMConfiguration();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMConfiguration, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createEntity) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMEntity *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createEntity. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMEntity *)(arg1)->createEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createDocumentType) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createDocumentType(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createDocumentType. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createDocumentType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(arg1)->createDocumentType((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createNotation) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNotation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMDocument_createNotation(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createNotation. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createNotation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNotation *)(arg1)->createNotation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createElementNS__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XMLSSize_t arg4 ;
        XMLSSize_t arg5 ;
        XERCES_CPP_NAMESPACE::DOMElement *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DOMDocument_createElementNS(self,namespaceURI,qualifiedName,lineNum,columnNum);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_createElementNS. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMDocument_createElementNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMDocument_createElementNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (XMLSSize_t) SvIV(ST(3));
        arg5 = (XMLSSize_t) SvIV(ST(4));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMElement *)(arg1)->createElementNS((XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_createElementNS) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMDocument_createElementNS__SWIG_0); return;
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMDocument_createElementNS__SWIG_1); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DOMDocument_createElementNS'");
    XSRETURN(0);
}


XS(_wrap_DOMDocument_toDOMNode) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_toDOMNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_toDOMNode. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)XERCES_CPP_NAMESPACE_DOMDocument_toDOMNode(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocument_toDOMDocumentTraversal) {
    {
        XERCES_CPP_NAMESPACE::DOMDocument *arg1 = (XERCES_CPP_NAMESPACE::DOMDocument *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentTraversal *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocument_toDOMDocumentTraversal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocument_toDOMDocumentTraversal. Expected _p_XERCES_CPP_NAMESPACE__DOMDocument");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentTraversal *)XERCES_CPP_NAMESPACE_DOMDocument_toDOMDocumentTraversal(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMDocumentFragment) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentFragment *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentFragment *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMDocumentFragment(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMDocumentFragment. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentFragment");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMDocumentType) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMDocumentType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMDocumentType. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getName) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getName. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getEntities) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getEntities(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getEntities. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getEntities();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getNotations) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getNotations(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getNotations. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getNotations();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMDocumentType_getInternalSubset) {
    {
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMDocumentType_getInternalSubset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMDocumentType_getInternalSubset. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getInternalSubset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMImplementationLS) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationLS *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationLS *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMImplementationLS(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMImplementationLS. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationLS");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationLS_createDOMBuilder) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationLS *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationLS *) 0 ;
        short arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLGrammarPool *arg5 = (XERCES_CPP_NAMESPACE::XMLGrammarPool *) (XERCES_CPP_NAMESPACE::XMLGrammarPool *)0 ;
        XERCES_CPP_NAMESPACE::DOMBuilder *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 5)) {
            SWIG_croak("Usage: DOMImplementationLS_createDOMBuilder(self,mode,schemaType,manager,gramPool);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementationLS_createDOMBuilder. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationLS");
            }
        }
        arg2 = (short) SvIV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMImplementationLS_createDOMBuilder, Expected perl-string.");
                XSRETURN(1);
            }
        }
        if (items > 3) {
            {
                if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 4 of DOMImplementationLS_createDOMBuilder. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarPool,0) < 0) {
                    SWIG_croak("Type error in argument 5 of DOMImplementationLS_createDOMBuilder. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarPool");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMBuilder *)(arg1)->createDOMBuilder(arg2,(XMLCh const *)arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, SWIG_SHADOW|0);
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationLS_createDOMWriter) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationLS *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationLS *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DOMWriter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: DOMImplementationLS_createDOMWriter(self,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementationLS_createDOMWriter. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationLS");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of DOMImplementationLS_createDOMWriter. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMWriter *)(arg1)->createDOMWriter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationLS_createDOMInputSource) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationLS *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationLS *) 0 ;
        XERCES_CPP_NAMESPACE::DOMInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMImplementationLS_createDOMInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementationLS_createDOMInputSource. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationLS");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMInputSource *)(arg1)->createDOMInputSource();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMImplementation) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMImplementation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMImplementation. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_hasFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMImplementation_hasFeature(self,feature,version);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementation_hasFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMImplementation_hasFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMImplementation_hasFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMImplementation const *)arg1)->hasFeature((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_createDocumentType) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XMLCh *arg4 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMImplementation_createDocumentType(self,qualifiedName,publicId,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementation_createDocumentType. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMImplementation_createDocumentType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMImplementation_createDocumentType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DOMImplementation_createDocumentType, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(arg1)->createDocumentType((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_createDocument__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocumentType *arg4 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg5 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 5)) {
            SWIG_croak("Usage: DOMImplementation_createDocument(self,namespaceURI,qualifiedName,doctype,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementation_createDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMImplementation_createDocument, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMImplementation_createDocument, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType,0) < 0) {
                SWIG_croak("Type error in argument 4 of DOMImplementation_createDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMDocumentType");
            }
        }
        if (items > 4) {
            {
                if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 5 of DOMImplementation_createDocument. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->createDocument((XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_getInterface) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMImplementation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMImplementation_getInterface(self,feature);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementation_getInterface. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMImplementation_getInterface, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMImplementation *)(arg1)->getInterface((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_createDocument__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementation *) 0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: DOMImplementation_createDocument(self,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementation_createDocument. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementation");
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of DOMImplementation_createDocument. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->createDocument(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementation_createDocument) {
    dXSARGS;
    
    if ((items >= 1) && (items <= 2)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (items <= 1) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMImplementation_createDocument__SWIG_1); return;
            }
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMImplementation_createDocument__SWIG_1); return;
            }
        }
    }
    if ((items >= 4) && (items <= 5)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        if (items <= 4) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMImplementation_createDocument__SWIG_0); return;
                        }
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMImplementation_createDocument__SWIG_0); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DOMImplementation_createDocument'");
    XSRETURN(0);
}


XS(_wrap_DOMImplementation_getImplementation) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: DOMImplementation_getImplementation();");
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMImplementation *)XERCES_CPP_NAMESPACE::DOMImplementation::getImplementation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMElement) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMElement(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMElement. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getTagName) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMElement_getTagName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getTagName. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getTagName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_getAttribute(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttribute((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getAttributeNode) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_getAttributeNode(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttributeNode, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNode((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getElementsByTagName) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_getElementsByTagName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getElementsByTagName. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getElementsByTagName, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getElementsByTagName((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_setAttribute(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_setAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_setAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setAttribute((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setAttributeNode) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_setAttributeNode(self,newAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMElement_setAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->setAttributeNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_removeAttributeNode) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_removeAttributeNode(self,oldAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_removeAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMElement_removeAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->removeAttributeNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_removeAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_removeAttribute(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_removeAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_removeAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->removeAttribute((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_getAttributeNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XMLCh *arg4 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMElement_setAttributeNS(self,namespaceURI,qualifiedName,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_setAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_setAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(3))||SvIOK(ST(3))||SvNOK(ST(3))) {
                arg4 = Perl2XMLString(ST(3));
            } else {
                croak("Type error in argument 2 of DOMElement_setAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        {
            delete[] arg4;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_removeAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_removeAttributeNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_removeAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_removeAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_removeAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->removeAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getAttributeNodeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_getAttributeNodeNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getAttributeNodeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttributeNodeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_getAttributeNodeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNodeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setAttributeNodeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_setAttributeNodeNS(self,newAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setAttributeNodeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMElement_setAttributeNodeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->setAttributeNodeNS(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getElementsByTagNameNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNodeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_getElementsByTagNameNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getElementsByTagNameNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_getElementsByTagNameNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_getElementsByTagNameNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getElementsByTagNameNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_hasAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_hasAttribute(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_hasAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_hasAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->hasAttribute((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_hasAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_hasAttributeNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_hasAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_hasAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_hasAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->hasAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setIdAttribute) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_setIdAttribute(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setIdAttribute. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_setIdAttribute, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setIdAttribute((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setIdAttributeNS) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMElement_setIdAttributeNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setIdAttributeNS. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMElement_setIdAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMElement_setIdAttributeNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setIdAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_setIdAttributeNode) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMElement_setIdAttributeNode(self,idAttr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_setIdAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMElement_setIdAttributeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMAttr");
            }
        }
        {
            try {
                (arg1)->setIdAttributeNode((XERCES_CPP_NAMESPACE::DOMAttr const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMElement_getTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
        XERCES_CPP_NAMESPACE::DOMTypeInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMElement_getTypeInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMElement_getTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__DOMElement");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMTypeInfo *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getTypeInfo();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMEntity) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMEntity(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMEntity. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getNotationName) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getNotationName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getNotationName. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getNotationName();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getActualEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getActualEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getActualEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getActualEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_setActualEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMEntity_setActualEncoding(self,actualEncoding);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_setActualEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMEntity_setActualEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setActualEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMEntity_setEncoding(self,encoding);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMEntity_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_getVersion) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMEntity_getVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_getVersion. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getVersion();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMEntity_setVersion) {
    {
        XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMEntity_setVersion(self,version);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMEntity_setVersion. Expected _p_XERCES_CPP_NAMESPACE__DOMEntity");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMEntity_setVersion, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setVersion((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMEntityReference) {
    {
        XERCES_CPP_NAMESPACE::DOMEntityReference *arg1 = (XERCES_CPP_NAMESPACE::DOMEntityReference *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMEntityReference(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMEntityReference. Expected _p_XERCES_CPP_NAMESPACE__DOMEntityReference");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNamedNodeMap) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNamedNodeMap(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNamedNodeMap. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_setNamedItem) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNamedNodeMap_setNamedItem(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_setNamedItem. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNamedNodeMap_setNamedItem. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->setNamedItem(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_item) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLSize_t arg2 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNamedNodeMap_item(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_item. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->item(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_getNamedItem) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNamedNodeMap_getNamedItem(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_getNamedItem. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_getNamedItem, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getNamedItem((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_getLength) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNamedNodeMap_getLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_getLength. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            try {
                result = (XMLSize_t)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getLength();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_removeNamedItem) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNamedNodeMap_removeNamedItem(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_removeNamedItem. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_removeNamedItem, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeNamedItem((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_getNamedItemNS) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNamedNodeMap_getNamedItemNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_getNamedItemNS. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_getNamedItemNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_getNamedItemNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getNamedItemNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_setNamedItemNS) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNamedNodeMap_setNamedItemNS(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_setNamedItemNS. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMNamedNodeMap_setNamedItemNS. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->setNamedItemNS(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNamedNodeMap_removeNamedItemNS) {
    {
        XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XMLCh *arg3 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMNamedNodeMap_removeNamedItemNS(self,namespaceURI,localName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNamedNodeMap_removeNamedItemNS. Expected _p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_removeNamedItemNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of DOMNamedNodeMap_removeNamedItemNS, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeNamedItemNS((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNodeList) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeList *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNodeList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNodeList. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeList");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeList_item) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeList *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *) 0 ;
        XMLSize_t arg2 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMNodeList_item(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeList_item. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeList");
            }
        }
        arg2 = (XMLSize_t) SvUV(ST(1));
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNodeList const *)arg1)->item(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNodeList_getLength) {
    {
        XERCES_CPP_NAMESPACE::DOMNodeList *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *) 0 ;
        XMLSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNodeList_getLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNodeList_getLength. Expected _p_XERCES_CPP_NAMESPACE__DOMNodeList");
            }
        }
        {
            try {
                result = (XMLSize_t)((XERCES_CPP_NAMESPACE::DOMNodeList const *)arg1)->getLength();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMNotation) {
    {
        XERCES_CPP_NAMESPACE::DOMNotation *arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMNotation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMNotation. Expected _p_XERCES_CPP_NAMESPACE__DOMNotation");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNotation_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::DOMNotation *arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNotation_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNotation_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__DOMNotation");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNotation const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMNotation_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::DOMNotation *arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMNotation_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMNotation_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__DOMNotation");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNotation const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMProcessingInstruction) {
    {
        XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMProcessingInstruction(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMProcessingInstruction. Expected _p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMProcessingInstruction_getTarget) {
    {
        XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMProcessingInstruction_getTarget(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMProcessingInstruction_getTarget. Expected _p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *)arg1)->getTarget();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMProcessingInstruction_getData) {
    {
        XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMProcessingInstruction_getData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMProcessingInstruction_getData. Expected _p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *)arg1)->getData();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMProcessingInstruction_setData) {
    {
        XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMProcessingInstruction_setData(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMProcessingInstruction_setData. Expected _p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMProcessingInstruction_setData, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setData((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMInputSource) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMInputSource. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_getBaseURI) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_getBaseURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_getBaseURI. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->getBaseURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMInputSource_setEncoding(self,encodingStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMInputSource_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMInputSource_setPublicId(self,publicId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMInputSource_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMInputSource_setSystemId(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMInputSource_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_setBaseURI) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMInputSource_setBaseURI(self,baseURI);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_setBaseURI. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMInputSource_setBaseURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setBaseURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_setIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMInputSource_setIssueFatalErrorIfNotFound(self,flag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_setIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIssueFatalErrorIfNotFound(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_getIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_getIssueFatalErrorIfNotFound(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_getIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMInputSource const *)arg1)->getIssueFatalErrorIfNotFound();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMInputSource_release) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMInputSource_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMInputSource_release. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Wrapper4InputSource) {
    {
        XERCES_CPP_NAMESPACE::InputSource *arg1 = (XERCES_CPP_NAMESPACE::InputSource *) (XERCES_CPP_NAMESPACE::InputSource *)0 ;
        bool arg2 = (bool) (bool)true ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 3)) {
            SWIG_croak("Usage: new_Wrapper4InputSource(inputSource,adoptFlag,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_Wrapper4InputSource. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        if (items > 1) {
            arg2 = (bool) SvIV(ST(1));
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_Wrapper4InputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *)new XERCES_CPP_NAMESPACE::Wrapper4InputSource(arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Wrapper4InputSource) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Wrapper4InputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Wrapper4InputSource. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_getBaseURI) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_getBaseURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_getBaseURI. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->getBaseURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_getIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_getIssueFatalErrorIfNotFound(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_getIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::Wrapper4InputSource const *)arg1)->getIssueFatalErrorIfNotFound();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4InputSource_setEncoding(self,encodingStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4InputSource_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4InputSource_setPublicId(self,publicId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4InputSource_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4InputSource_setSystemId(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4InputSource_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_setBaseURI) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4InputSource_setBaseURI(self,baseURI);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_setBaseURI. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4InputSource_setBaseURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setBaseURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_setIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4InputSource_setIssueFatalErrorIfNotFound(self,flag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_setIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIssueFatalErrorIfNotFound(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4InputSource_release) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4InputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4InputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4InputSource_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4InputSource_release. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4InputSource");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Wrapper4DOMInputSource) {
    {
        XERCES_CPP_NAMESPACE::DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::DOMInputSource *) (XERCES_CPP_NAMESPACE::DOMInputSource *)0 ;
        bool arg2 = (bool) (bool)true ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 3)) {
            SWIG_croak("Usage: new_Wrapper4DOMInputSource(inputSource,adoptFlag,manager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_Wrapper4DOMInputSource. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        if (items > 1) {
            arg2 = (bool) SvIV(ST(1));
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_Wrapper4DOMInputSource. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *)new XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource(arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Wrapper4DOMInputSource) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Wrapper4DOMInputSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Wrapper4DOMInputSource. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_makeStream) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XERCES_CPP_NAMESPACE::BinInputStream *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_makeStream(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_makeStream. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource const *)arg1)->makeStream();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_getPublicId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_getPublicId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_getPublicId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource const *)arg1)->getPublicId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_getSystemId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_getSystemId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_getSystemId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource const *)arg1)->getSystemId();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_getIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_getIssueFatalErrorIfNotFound(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_getIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource const *)arg1)->getIssueFatalErrorIfNotFound();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_setEncoding(self,encodingStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4DOMInputSource_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_setPublicId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_setPublicId(self,publicId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_setPublicId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4DOMInputSource_setPublicId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setPublicId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_setSystemId) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_setSystemId(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_setSystemId. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of Wrapper4DOMInputSource_setSystemId, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setSystemId((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_Wrapper4DOMInputSource_setIssueFatalErrorIfNotFound) {
    {
        XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *arg1 = (XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Wrapper4DOMInputSource_setIssueFatalErrorIfNotFound(self,flag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of Wrapper4DOMInputSource_setIssueFatalErrorIfNotFound. Expected _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIssueFatalErrorIfNotFound(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMBuilder) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMBuilder(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMBuilder. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMErrorHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_getErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMErrorHandler *)(arg1)->getErrorHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMErrorHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMEntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_getEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMEntityResolver *)(arg1)->getEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityResolver, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMBuilderFilter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_getFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMBuilderFilter *)(arg1)->getFilter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilderFilter, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::DOMErrorHandler *) (XERCES_CPP_NAMESPACE::DOMErrorHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_setErrorHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_setEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMEntityResolver *arg2 = (XERCES_CPP_NAMESPACE::DOMEntityResolver *) (XERCES_CPP_NAMESPACE::DOMEntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_setEntityResolver(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__DOMEntityResolver");
            }
        }
        {
            try {
                (arg1)->setEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_setFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMBuilderFilter *arg2 = (XERCES_CPP_NAMESPACE::DOMBuilderFilter *) (XERCES_CPP_NAMESPACE::DOMBuilderFilter *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_setFilter(self,filter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_setFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilderFilter,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_setFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilderFilter");
            }
        }
        {
            try {
                (arg1)->setFilter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_setFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMBuilder_setFeature(self,name,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_setFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_setFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                (arg1)->setFeature((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_getFeature(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_getFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getFeature((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_canSetFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMBuilder_canSetFeature(self,name,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_canSetFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_canSetFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->canSetFeature((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_parse) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMInputSource *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_parse(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_parse. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_parse. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->parse((XERCES_CPP_NAMESPACE::DOMInputSource const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_parseURI__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_parseURI(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_parseURI. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_parseURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->parseURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_parseURI__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_parseURI(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_parseURI. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->parseURI((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_parseURI) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_parseURI__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_parseURI__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DOMBuilder_parseURI'");
    XSRETURN(0);
}


XS(_wrap_DOMBuilder_parseWithContext) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMInputSource *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg3 = (XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMNode *)0 ;
        short arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DOMBuilder_parseWithContext(self,source,contextNode,action);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_parseWithContext. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_parseWithContext. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMBuilder_parseWithContext. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        arg4 = (short) SvIV(ST(3));
        {
            try {
                (arg1)->parseWithContext((XERCES_CPP_NAMESPACE::DOMInputSource const &)*arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getProperty) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_getProperty(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getProperty. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_getProperty, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (void *)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getProperty((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_setProperty) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        void *arg3 = (void *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMBuilder_setProperty(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_setProperty. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_setProperty, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMBuilder_setProperty. Expected _p_void");
            }
        }
        {
            try {
                (arg1)->setProperty((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_release) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_release. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_resetDocumentPool) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_resetDocumentPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_resetDocumentPool. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                (arg1)->resetDocumentPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_loadGrammar__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::DOMInputSource *arg2 = 0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: DOMBuilder_loadGrammar(self,source,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMBuilder_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMInputSource");
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XERCES_CPP_NAMESPACE::DOMInputSource const &)*arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_loadGrammar__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: DOMBuilder_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_loadGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_loadGrammar__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        char *arg2 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: DOMBuilder_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((char const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_loadGrammar) {
    dXSARGS;
    
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_0); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_0); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_1); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_2); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DOMBuilder_loadGrammar__SWIG_2); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DOMBuilder_loadGrammar'");
    XSRETURN(0);
}


XS(_wrap_DOMBuilder_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_getGrammar(self,nameSpaceKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMBuilder_getGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getGrammar((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getRootGrammar) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_getRootGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getRootGrammar. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getRootGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getURIText) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMBuilder_getURIText(self,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getURIText. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getURIText(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_resetCachedGrammarPool) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_resetCachedGrammarPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_resetCachedGrammarPool. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                (arg1)->resetCachedGrammarPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMBuilder_getSrcOffset) {
    {
        XERCES_CPP_NAMESPACE::DOMBuilder *arg1 = (XERCES_CPP_NAMESPACE::DOMBuilder *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMBuilder_getSrcOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMBuilder_getSrcOffset. Expected _p_XERCES_CPP_NAMESPACE__DOMBuilder");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::DOMBuilder const *)arg1)->getSrcOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationRegistry_getDOMImplementation) {
    {
        XMLCh *arg1 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMImplementation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMImplementationRegistry_getDOMImplementation(features);");
        }
        {
            if (SvPOK(ST(0))||SvIOK(ST(0))||SvNOK(ST(0))) {
                arg1 = Perl2XMLString(ST(0));
            } else {
                croak("Type error in argument 2 of DOMImplementationRegistry_getDOMImplementation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMImplementation *)XERCES_CPP_NAMESPACE::DOMImplementationRegistry::getDOMImplementation((XMLCh const *)arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, SWIG_SHADOW|0);
        {
            delete[] arg1;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg1;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationRegistry_addSource) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationSource *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMImplementationRegistry_addSource(source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementationRegistry_addSource. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationSource");
            }
        }
        {
            try {
                XERCES_CPP_NAMESPACE::DOMImplementationRegistry::addSource(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMImplementationRegistry) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationRegistry *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationRegistry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMImplementationRegistry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMImplementationRegistry. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMImplementationSource) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationSource *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationSource *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMImplementationSource(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMImplementationSource. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationSource");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMImplementationSource_getDOMImplementation) {
    {
        XERCES_CPP_NAMESPACE::DOMImplementationSource *arg1 = (XERCES_CPP_NAMESPACE::DOMImplementationSource *) 0 ;
        XMLCh *arg2 = (XMLCh *) 0 ;
        XERCES_CPP_NAMESPACE::DOMImplementation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMImplementationSource_getDOMImplementation(self,features);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationSource,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMImplementationSource_getDOMImplementation. Expected _p_XERCES_CPP_NAMESPACE__DOMImplementationSource");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMImplementationSource_getDOMImplementation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMImplementation *)((XERCES_CPP_NAMESPACE::DOMImplementationSource const *)arg1)->getDOMImplementation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, SWIG_SHADOW|0);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMLocator) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMLocator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMLocator. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_getLineNumber) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMLocator_getLineNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_getLineNumber. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::DOMLocator const *)arg1)->getLineNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_getColumnNumber) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMLocator_getColumnNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_getColumnNumber. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::DOMLocator const *)arg1)->getColumnNumber();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_getOffset) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMLocator_getOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_getOffset. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                result = (XMLSSize_t)((XERCES_CPP_NAMESPACE::DOMLocator const *)arg1)->getOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_getErrorNode) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMLocator_getErrorNode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_getErrorNode. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMLocator const *)arg1)->getErrorNode();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_getURI) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMLocator_getURI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_getURI. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMLocator const *)arg1)->getURI();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_setLineNumber) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMLocator_setLineNumber(self,lineNumber);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_setLineNumber. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        arg2 = (XMLSSize_t) SvIV(ST(1));
        {
            try {
                (arg1)->setLineNumber(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_setColumnNumber) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMLocator_setColumnNumber(self,columnNumber);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_setColumnNumber. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        arg2 = (XMLSSize_t) SvIV(ST(1));
        {
            try {
                (arg1)->setColumnNumber(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_setOffset) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLSSize_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMLocator_setOffset(self,offset);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_setOffset. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        arg2 = (XMLSSize_t) SvIV(ST(1));
        {
            try {
                (arg1)->setOffset(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_setErrorNode) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMNode *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMLocator_setErrorNode(self,errorNode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_setErrorNode. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMLocator_setErrorNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                (arg1)->setErrorNode(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMLocator_setURI) {
    {
        XERCES_CPP_NAMESPACE::DOMLocator *arg1 = (XERCES_CPP_NAMESPACE::DOMLocator *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMLocator_setURI(self,uri);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMLocator_setURI. Expected _p_XERCES_CPP_NAMESPACE__DOMLocator");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMLocator_setURI, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setURI((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMWriter) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMWriter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMWriter. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_canSetFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMWriter_canSetFeature(self,featName,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_canSetFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMWriter_canSetFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->canSetFeature((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_setFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMWriter_setFeature(self,featName,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_setFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMWriter_setFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (bool) SvIV(ST(2));
        {
            try {
                (arg1)->setFeature((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_getFeature) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_getFeature(self,featName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_getFeature. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMWriter_getFeature, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->getFeature((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_setEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_setEncoding(self,encoding);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_setEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMWriter_setEncoding, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setEncoding((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_setNewLine) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_setNewLine(self,newLine);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_setNewLine. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of DOMWriter_setNewLine, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setNewLine((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XERCES_CPP_NAMESPACE::DOMErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::DOMErrorHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_setErrorHandler(self,errorHandler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMWriter_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_setFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        DOMWriterFilter *arg2 = (DOMWriterFilter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_setFilter(self,filter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_setFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_DOMWriterFilter,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMWriter_setFilter. Expected _p_DOMWriterFilter");
            }
        }
        {
            try {
                (arg1)->setFilter(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_getEncoding) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriter_getEncoding(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_getEncoding. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->getEncoding();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_getNewLine) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriter_getNewLine(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_getNewLine. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->getNewLine();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_getErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XERCES_CPP_NAMESPACE::DOMErrorHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriter_getErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_getErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMErrorHandler *)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->getErrorHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMErrorHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_getFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        DOMWriterFilter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriter_getFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_getFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                result = (DOMWriterFilter *)((XERCES_CPP_NAMESPACE::DOMWriter const *)arg1)->getFilter();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_DOMWriterFilter, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_writeNode) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XERCES_CPP_NAMESPACE::XMLFormatTarget *arg2 = (XERCES_CPP_NAMESPACE::XMLFormatTarget *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *)0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DOMWriter_writeNode(self,destination,nodeToWrite);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_writeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMWriter_writeNode. Expected _p_XERCES_CPP_NAMESPACE__XMLFormatTarget");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 3 of DOMWriter_writeNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (bool)(arg1)->writeNode(arg2,(XERCES_CPP_NAMESPACE::DOMNode const &)*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_writeToString) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriter_writeToString(self,nodeToWrite);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_writeToString. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMWriter_writeToString. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (XMLCh *)(arg1)->writeToString((XERCES_CPP_NAMESPACE::DOMNode const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriter_release) {
    {
        XERCES_CPP_NAMESPACE::DOMWriter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriter_release(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriter_release. Expected _p_XERCES_CPP_NAMESPACE__DOMWriter");
            }
        }
        {
            try {
                (arg1)->release();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DOMWriterFilter) {
    {
        XERCES_CPP_NAMESPACE::DOMWriterFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriterFilter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DOMWriterFilter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DOMWriterFilter. Expected _p_XERCES_CPP_NAMESPACE__DOMWriterFilter");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriterFilter_acceptNode) {
    {
        XERCES_CPP_NAMESPACE::DOMWriterFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriterFilter *) 0 ;
        XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriterFilter_acceptNode(self,node);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriterFilter_acceptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMWriterFilter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode,0) < 0) {
                SWIG_croak("Type error in argument 2 of DOMWriterFilter_acceptNode. Expected _p_XERCES_CPP_NAMESPACE__DOMNode");
            }
        }
        {
            try {
                result = (short)((XERCES_CPP_NAMESPACE::DOMWriterFilter const *)arg1)->acceptNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriterFilter_getWhatToShow) {
    {
        XERCES_CPP_NAMESPACE::DOMWriterFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriterFilter *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DOMWriterFilter_getWhatToShow(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriterFilter_getWhatToShow. Expected _p_XERCES_CPP_NAMESPACE__DOMWriterFilter");
            }
        }
        {
            try {
                result = (unsigned long)((XERCES_CPP_NAMESPACE::DOMWriterFilter const *)arg1)->getWhatToShow();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DOMWriterFilter_setWhatToShow) {
    {
        XERCES_CPP_NAMESPACE::DOMWriterFilter *arg1 = (XERCES_CPP_NAMESPACE::DOMWriterFilter *) 0 ;
        unsigned long arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DOMWriterFilter_setWhatToShow(self,toShow);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter,0) < 0) {
                SWIG_croak("Type error in argument 1 of DOMWriterFilter_setWhatToShow. Expected _p_XERCES_CPP_NAMESPACE__DOMWriterFilter");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        {
            try {
                (arg1)->setWhatToShow(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_AbstractDOMParser) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_AbstractDOMParser(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_AbstractDOMParser. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_reset) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_reset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_reset. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                (arg1)->reset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_adoptDocument) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_adoptDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_adoptDocument. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->adoptDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getDocument) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::DOMDocument *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getDocument(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getDocument. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::DOMDocument *)(arg1)->getDocument();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getValidator) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLValidator *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getValidator(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getValidator. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                {
                    XERCES_CPP_NAMESPACE::XMLValidator const &_result_ref = ((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getValidator();
                    result = (XERCES_CPP_NAMESPACE::XMLValidator *) &_result_ref;
                }
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getValidationScheme) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getValidationScheme(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getValidationScheme. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getValidationScheme();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getDoSchema) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getDoSchema(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getDoSchema. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getDoSchema();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getValidationSchemaFullChecking) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getValidationSchemaFullChecking(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getValidationSchemaFullChecking. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getValidationSchemaFullChecking();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getErrorCount) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getErrorCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getErrorCount. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (int)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getErrorCount();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getDoNamespaces) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getDoNamespaces(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getDoNamespaces. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getDoNamespaces();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getExitOnFirstFatalError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getExitOnFirstFatalError();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getValidationConstraintFatal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getValidationConstraintFatal();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getCreateEntityReferenceNodes) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getCreateEntityReferenceNodes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getCreateEntityReferenceNodes. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getCreateEntityReferenceNodes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getIncludeIgnorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getIncludeIgnorableWhitespace(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getIncludeIgnorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getIncludeIgnorableWhitespace();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getExternalSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getExternalSchemaLocation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getExternalSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getExternalSchemaLocation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getExternalNoNamespaceSchemaLocation) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getExternalNoNamespaceSchemaLocation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getExternalNoNamespaceSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getExternalNoNamespaceSchemaLocation();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getSecurityManager) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        SecurityManager *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getSecurityManager(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getSecurityManager. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (SecurityManager *)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getSecurityManager();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_SecurityManager, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getLoadExternalDTD) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getLoadExternalDTD(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getLoadExternalDTD. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getLoadExternalDTD();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getCreateCommentNodes) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getCreateCommentNodes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getCreateCommentNodes. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getCreateCommentNodes();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getCalculateSrcOfs) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getCalculateSrcOfs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getCalculateSrcOfs. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getCalculateSrcOfs();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getStandardUriConformant) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getStandardUriConformant(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getStandardUriConformant. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getStandardUriConformant();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getPSVIHandler__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getPSVIHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::PSVIHandler *)(arg1)->getPSVIHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getPSVIHandler__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getPSVIHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::PSVIHandler *)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getPSVIHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getPSVIHandler) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_getPSVIHandler__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_getPSVIHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'AbstractDOMParser_getPSVIHandler'");
    XSRETURN(0);
}


XS(_wrap_AbstractDOMParser_setDoNamespaces) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setDoNamespaces(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setDoNamespaces. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setDoNamespaces(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExitOnFirstFatalError) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExitOnFirstFatalError(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExitOnFirstFatalError. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExitOnFirstFatalError(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setValidationConstraintFatal) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setValidationConstraintFatal(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setValidationConstraintFatal. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationConstraintFatal(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setCreateEntityReferenceNodes) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setCreateEntityReferenceNodes(self,create);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setCreateEntityReferenceNodes. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setCreateEntityReferenceNodes(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setIncludeIgnorableWhitespace) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setIncludeIgnorableWhitespace(self,include);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setIncludeIgnorableWhitespace. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setIncludeIgnorableWhitespace(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setValidationScheme) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setValidationScheme(self,newScheme);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setValidationScheme. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationScheme((XERCES_CPP_NAMESPACE::AbstractDOMParser::ValSchemes )arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setDoSchema) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setDoSchema(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setDoSchema. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setDoSchema(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setValidationSchemaFullChecking) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setValidationSchemaFullChecking(self,schemaFullChecking);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setValidationSchemaFullChecking. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setValidationSchemaFullChecking(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExternalSchemaLocation__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExternalSchemaLocation(self,schemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExternalSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_setExternalSchemaLocation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setExternalSchemaLocation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExternalSchemaLocation__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExternalSchemaLocation(self,schemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExternalSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->setExternalSchemaLocation((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExternalSchemaLocation) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_setExternalSchemaLocation__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_setExternalSchemaLocation__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'AbstractDOMParser_setExternalSchemaLocation'");
    XSRETURN(0);
}


XS(_wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExternalNoNamespaceSchemaLocation(self,noNamespaceSchemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExternalNoNamespaceSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_setExternalNoNamespaceSchemaLocation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->setExternalNoNamespaceSchemaLocation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExternalNoNamespaceSchemaLocation(self,noNamespaceSchemaLocation);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExternalNoNamespaceSchemaLocation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->setExternalNoNamespaceSchemaLocation((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'AbstractDOMParser_setExternalNoNamespaceSchemaLocation'");
    XSRETURN(0);
}


XS(_wrap_AbstractDOMParser_setSecurityManager) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        SecurityManager *arg2 = (SecurityManager *) (SecurityManager *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setSecurityManager(self,securityManager);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setSecurityManager. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_SecurityManager,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_setSecurityManager. Expected _p_SecurityManager");
            }
        }
        {
            try {
                (arg1)->setSecurityManager(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setLoadExternalDTD) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setLoadExternalDTD(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setLoadExternalDTD. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setLoadExternalDTD(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setCreateCommentNodes) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setCreateCommentNodes(self,create);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setCreateCommentNodes. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setCreateCommentNodes(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setCalculateSrcOfs) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setCalculateSrcOfs(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setCalculateSrcOfs. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setCalculateSrcOfs(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setStandardUriConformant) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setStandardUriConformant(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setStandardUriConformant. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setStandardUriConformant(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_useScanner) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_useScanner(self,scannerName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_useScanner. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_useScanner, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->useScanner((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_useImplementation) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_useImplementation(self,implementationFeatures);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_useImplementation. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_useImplementation, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->useImplementation((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setPSVIHandler) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::PSVIHandler *arg2 = (XERCES_CPP_NAMESPACE::PSVIHandler *) (XERCES_CPP_NAMESPACE::PSVIHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setPSVIHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_setPSVIHandler. Expected _p_XERCES_CPP_NAMESPACE__PSVIHandler");
            }
        }
        {
            try {
                (arg1)->setPSVIHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parse__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_parse(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parse. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_parse. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            try {
                (arg1)->parse((XERCES_CPP_NAMESPACE::InputSource const &)*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parse__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parse. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_parse, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->parse((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parse__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_parse(self,systemId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parse. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            try {
                (arg1)->parse((char const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parse) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parse__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parse__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parse__SWIG_2); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'AbstractDOMParser_parse'");
    XSRETURN(0);
}


XS(_wrap_AbstractDOMParser_parseFirst__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: AbstractDOMParser_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_parseFirst, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XMLCh const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parseFirst__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        char *arg2 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: AbstractDOMParser_parseFirst(self,systemId,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((char const *)arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parseFirst__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: AbstractDOMParser_parseFirst(self,source,toFill);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 3 of AbstractDOMParser_parseFirst. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseFirst((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,*arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parseFirst) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parseFirst__SWIG_2); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parseFirst__SWIG_0); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_AbstractDOMParser_parseFirst__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'AbstractDOMParser_parseFirst'");
    XSRETURN(0);
}


XS(_wrap_AbstractDOMParser_parseNext) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_parseNext(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parseNext. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_parseNext. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                result = (bool)(arg1)->parseNext(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_parseReset) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLPScanToken *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_parseReset(self,token);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_parseReset. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,0) < 0) {
                SWIG_croak("Type error in argument 2 of AbstractDOMParser_parseReset. Expected _p_XERCES_CPP_NAMESPACE__XMLPScanToken");
            }
        }
        {
            try {
                (arg1)->parseReset(*arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_elementTypeInfo) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: AbstractDOMParser_elementTypeInfo(self,typeName,typeURI);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_elementTypeInfo. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_elementTypeInfo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of AbstractDOMParser_elementTypeInfo, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->elementTypeInfo((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_getExpandEntityReferences) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AbstractDOMParser_getExpandEntityReferences(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_getExpandEntityReferences. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::AbstractDOMParser const *)arg1)->getExpandEntityReferences();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AbstractDOMParser_setExpandEntityReferences) {
    {
        XERCES_CPP_NAMESPACE::AbstractDOMParser *arg1 = (XERCES_CPP_NAMESPACE::AbstractDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AbstractDOMParser_setExpandEntityReferences(self,expand);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of AbstractDOMParser_setExpandEntityReferences. Expected _p_XERCES_CPP_NAMESPACE__AbstractDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->setExpandEntityReferences(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XercesDOMParser) {
    {
        XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) (XERCES_CPP_NAMESPACE::XMLValidator *)0 ;
        XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager ;
        XERCES_CPP_NAMESPACE::XMLGrammarPool *arg3 = (XERCES_CPP_NAMESPACE::XMLGrammarPool *) (XERCES_CPP_NAMESPACE::XMLGrammarPool *)0 ;
        XERCES_CPP_NAMESPACE::XercesDOMParser *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 3)) {
            SWIG_croak("Usage: new_XercesDOMParser(valToAdopt,manager,gramPool);");
        }
        if (items > 0) {
            {
                if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator,0) < 0) {
                    SWIG_croak("Type error in argument 1 of new_XercesDOMParser. Expected _p_XERCES_CPP_NAMESPACE__XMLValidator");
                }
            }
        }
        if (items > 1) {
            {
                if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager,0) < 0) {
                    SWIG_croak("Type error in argument 2 of new_XercesDOMParser. Expected _p_XERCES_CPP_NAMESPACE__MemoryManager");
                }
            }
        }
        if (items > 2) {
            {
                if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarPool,0) < 0) {
                    SWIG_croak("Type error in argument 3 of new_XercesDOMParser. Expected _p_XERCES_CPP_NAMESPACE__XMLGrammarPool");
                }
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XercesDOMParser *)new XERCES_CPP_NAMESPACE::XercesDOMParser(arg1,arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_XercesDOMParser) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XercesDOMParser(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XercesDOMParser. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getErrorHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::ErrorHandler *)(arg1)->getErrorHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::EntityResolver *)(arg1)->getEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getXMLEntityResolver__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getXMLEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLEntityResolver *)(arg1)->getXMLEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getXMLEntityResolver__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getXMLEntityResolver(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::XMLEntityResolver *)((XERCES_CPP_NAMESPACE::XercesDOMParser const *)arg1)->getXMLEntityResolver();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getXMLEntityResolver) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_getXMLEntityResolver__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_getXMLEntityResolver__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'XercesDOMParser_getXMLEntityResolver'");
    XSRETURN(0);
}


XS(_wrap_XercesDOMParser_isCachingGrammarFromParse) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_isCachingGrammarFromParse(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_isCachingGrammarFromParse. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XercesDOMParser const *)arg1)->isCachingGrammarFromParse();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_isUsingCachedGrammarInParse) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_isUsingCachedGrammarInParse(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_isUsingCachedGrammarInParse. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (bool)((XERCES_CPP_NAMESPACE::XercesDOMParser const *)arg1)->isUsingCachedGrammarInParse();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getGrammar) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_getGrammar(self,nameSpaceKey);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getGrammar. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_getGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getGrammar((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getRootGrammar) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getRootGrammar(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getRootGrammar. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->getRootGrammar();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getURIText) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        unsigned int arg2 ;
        XMLCh *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_getURIText(self,uriId);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getURIText. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            try {
                result = (XMLCh *)((XERCES_CPP_NAMESPACE::XercesDOMParser const *)arg1)->getURIText(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            ST(argvi) = XMLString2Perl(result);
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_getSrcOffset) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_getSrcOffset(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_getSrcOffset. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                result = (unsigned int)((XERCES_CPP_NAMESPACE::XercesDOMParser const *)arg1)->getSrcOffset();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_setErrorHandler) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::ErrorHandler *arg2 = (XERCES_CPP_NAMESPACE::ErrorHandler *) (XERCES_CPP_NAMESPACE::ErrorHandler *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_setErrorHandler(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler,0) < 0) {
                SWIG_croak("Type error in argument 2 of XercesDOMParser_setErrorHandler. Expected _p_XERCES_CPP_NAMESPACE__ErrorHandler");
            }
        }
        {
            try {
                (arg1)->setErrorHandler(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_setEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::EntityResolver *arg2 = (XERCES_CPP_NAMESPACE::EntityResolver *) (XERCES_CPP_NAMESPACE::EntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_setEntityResolver(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of XercesDOMParser_setEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__EntityResolver");
            }
        }
        {
            try {
                (arg1)->setEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_setXMLEntityResolver) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::XMLEntityResolver *arg2 = (XERCES_CPP_NAMESPACE::XMLEntityResolver *) (XERCES_CPP_NAMESPACE::XMLEntityResolver *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_setXMLEntityResolver(self,handler);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_setXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver,0) < 0) {
                SWIG_croak("Type error in argument 2 of XercesDOMParser_setXMLEntityResolver. Expected _p_XERCES_CPP_NAMESPACE__XMLEntityResolver");
            }
        }
        {
            try {
                (arg1)->setXMLEntityResolver(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_cacheGrammarFromParse) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_cacheGrammarFromParse(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_cacheGrammarFromParse. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->cacheGrammarFromParse(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_useCachedGrammarInParse) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XercesDOMParser_useCachedGrammarInParse(self,newState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_useCachedGrammarInParse. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        {
            try {
                (arg1)->useCachedGrammarInParse(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_resetDocumentPool) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_resetDocumentPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_resetDocumentPool. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                (arg1)->resetDocumentPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_error) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        unsigned int arg2 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int arg4 ;
        XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg6 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg7 = (XMLCh *) (XMLCh *)0 ;
        XMLSSize_t arg8 ;
        XMLSSize_t arg9 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: XercesDOMParser_error(self,errCode,msgDomain,errType,errorText,systemId,publicId,lineNum,colNum);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_error. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg4 = (int) SvIV(ST(3));
        {
            if (SvPOK(ST(4))||SvIOK(ST(4))||SvNOK(ST(4))) {
                arg5 = Perl2XMLString(ST(4));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(5))||SvIOK(ST(5))||SvNOK(ST(5))) {
                arg6 = Perl2XMLString(ST(5));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(6))||SvIOK(ST(6))||SvNOK(ST(6))) {
                arg7 = Perl2XMLString(ST(6));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_error, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg8 = (XMLSSize_t) SvIV(ST(7));
        arg9 = (XMLSSize_t) SvIV(ST(8));
        {
            try {
                (arg1)->error(arg2,(XMLCh const *)arg3,(XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrTypes )arg4,(XMLCh const *)arg5,(XMLCh const *)arg6,(XMLCh const *)arg7,arg8,arg9);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg3;
        }
        {
            delete[] arg5;
        }
        {
            delete[] arg6;
        }
        {
            delete[] arg7;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_resetErrors) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_resetErrors. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_loadGrammar__SWIG_0) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XERCES_CPP_NAMESPACE::InputSource *arg2 = 0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: XercesDOMParser_loadGrammar(self,source,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource,0) < 0) {
                SWIG_croak("Type error in argument 2 of XercesDOMParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__InputSource");
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XERCES_CPP_NAMESPACE::InputSource const &)*arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_loadGrammar__SWIG_1) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: XercesDOMParser_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of XercesDOMParser_loadGrammar, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((XMLCh const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_loadGrammar__SWIG_2) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        char *arg2 ;
        short arg3 ;
        bool arg4 = (bool) (bool)false ;
        XERCES_CPP_NAMESPACE::Grammar *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: XercesDOMParser_loadGrammar(self,systemId,grammarType,toCache);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_loadGrammar. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (short) SvIV(ST(2));
        if (items > 3) {
            arg4 = (bool) SvIV(ST(3));
        }
        {
            try {
                result = (XERCES_CPP_NAMESPACE::Grammar *)(arg1)->loadGrammar((char const *)arg2,arg3,arg4);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        {
            swig_type_info *ty = SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void **) &result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) result, ty, SWIG_SHADOW|0);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XercesDOMParser_loadGrammar) {
    dXSARGS;
    
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_0); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_0); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_1); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_1); return;
                    }
                }
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_2); return;
                    }
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_XercesDOMParser_loadGrammar__SWIG_2); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'XercesDOMParser_loadGrammar'");
    XSRETURN(0);
}


XS(_wrap_XercesDOMParser_resetCachedGrammarPool) {
    {
        XERCES_CPP_NAMESPACE::XercesDOMParser *arg1 = (XERCES_CPP_NAMESPACE::XercesDOMParser *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XercesDOMParser_resetCachedGrammarPool(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser,0) < 0) {
                SWIG_croak("Type error in argument 1 of XercesDOMParser_resetCachedGrammarPool. Expected _p_XERCES_CPP_NAMESPACE__XercesDOMParser");
            }
        }
        {
            try {
                (arg1)->resetCachedGrammarPool();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlCallbackHandler__SWIG_0) {
    {
        PerlCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlCallbackHandler();");
        }
        {
            try {
                result = (PerlCallbackHandler *)new PerlCallbackHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlCallbackHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlCallbackHandler(SV *);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlCallbackHandler *)new PerlCallbackHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlCallbackHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlCallbackHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlCallbackHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlCallbackHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlCallbackHandler) {
    {
        PerlCallbackHandler *arg1 = (PerlCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlCallbackHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlCallbackHandler. Expected _p_PerlCallbackHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlCallbackHandler_type) {
    {
        PerlCallbackHandler *arg1 = (PerlCallbackHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlCallbackHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlCallbackHandler_type. Expected _p_PerlCallbackHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlCallbackHandler_set_callback_obj) {
    {
        PerlCallbackHandler *arg1 = (PerlCallbackHandler *) 0 ;
        SV *arg2 = (SV *) 0 ;
        SV *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PerlCallbackHandler_set_callback_obj(self,SV *);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlCallbackHandler_set_callback_obj. Expected _p_PerlCallbackHandler");
            }
        }
        {
            arg2 = ST(1);
        }
        {
            try {
                result = (SV *)(arg1)->set_callback_obj(arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_SV, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlErrorCallbackHandler__SWIG_0) {
    {
        PerlErrorCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlErrorCallbackHandler();");
        }
        {
            try {
                result = (PerlErrorCallbackHandler *)new PerlErrorCallbackHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlErrorCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlErrorCallbackHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlErrorCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlErrorCallbackHandler(obj);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlErrorCallbackHandler *)new PerlErrorCallbackHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlErrorCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlErrorCallbackHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlErrorCallbackHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlErrorCallbackHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlErrorCallbackHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlErrorCallbackHandler) {
    {
        PerlErrorCallbackHandler *arg1 = (PerlErrorCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlErrorCallbackHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlErrorCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlErrorCallbackHandler. Expected _p_PerlErrorCallbackHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlErrorCallbackHandler_type) {
    {
        PerlErrorCallbackHandler *arg1 = (PerlErrorCallbackHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlErrorCallbackHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlErrorCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlErrorCallbackHandler_type. Expected _p_PerlErrorCallbackHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlErrorCallbackHandler_resetErrors) {
    {
        PerlErrorCallbackHandler *arg1 = (PerlErrorCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlErrorCallbackHandler_resetErrors(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlErrorCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlErrorCallbackHandler_resetErrors. Expected _p_PerlErrorCallbackHandler");
            }
        }
        {
            try {
                (arg1)->resetErrors();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlDocumentCallbackHandler__SWIG_0) {
    {
        PerlDocumentCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlDocumentCallbackHandler();");
        }
        {
            try {
                result = (PerlDocumentCallbackHandler *)new PerlDocumentCallbackHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlDocumentCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlDocumentCallbackHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlDocumentCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlDocumentCallbackHandler(obj);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlDocumentCallbackHandler *)new PerlDocumentCallbackHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlDocumentCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlDocumentCallbackHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlDocumentCallbackHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlDocumentCallbackHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlDocumentCallbackHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlDocumentCallbackHandler) {
    {
        PerlDocumentCallbackHandler *arg1 = (PerlDocumentCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlDocumentCallbackHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlDocumentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlDocumentCallbackHandler. Expected _p_PerlDocumentCallbackHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlDocumentCallbackHandler_type) {
    {
        PerlDocumentCallbackHandler *arg1 = (PerlDocumentCallbackHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlDocumentCallbackHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlDocumentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlDocumentCallbackHandler_type. Expected _p_PerlDocumentCallbackHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlDocumentCallbackHandler_characters) {
    {
        PerlDocumentCallbackHandler *arg1 = (PerlDocumentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: PerlDocumentCallbackHandler_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlDocumentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlDocumentCallbackHandler_characters. Expected _p_PerlDocumentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlDocumentCallbackHandler_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlDocumentCallbackHandler_processingInstruction) {
    {
        PerlDocumentCallbackHandler *arg1 = (PerlDocumentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: PerlDocumentCallbackHandler_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlDocumentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlDocumentCallbackHandler_processingInstruction. Expected _p_PerlDocumentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlDocumentCallbackHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of PerlDocumentCallbackHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlDocumentCallbackHandler_setDocumentLocator) {
    {
        PerlDocumentCallbackHandler *arg1 = (PerlDocumentCallbackHandler *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PerlDocumentCallbackHandler_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlDocumentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlDocumentCallbackHandler_setDocumentLocator. Expected _p_PerlDocumentCallbackHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of PerlDocumentCallbackHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlContentCallbackHandler__SWIG_0) {
    {
        PerlContentCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlContentCallbackHandler();");
        }
        {
            try {
                result = (PerlContentCallbackHandler *)new PerlContentCallbackHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlContentCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlContentCallbackHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlContentCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlContentCallbackHandler(obj);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlContentCallbackHandler *)new PerlContentCallbackHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlContentCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlContentCallbackHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlContentCallbackHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlContentCallbackHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlContentCallbackHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlContentCallbackHandler) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlContentCallbackHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlContentCallbackHandler. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_type) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_type. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_characters) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        unsigned int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_characters(self,chars,length);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_characters. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_characters, Expected perl-string.");
                XSRETURN(1);
            }
        }
        arg3 = (unsigned int) SvUV(ST(2));
        {
            try {
                (arg1)->characters((XMLCh const *)arg2,arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_processingInstruction) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_processingInstruction(self,target,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_processingInstruction. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_processingInstruction, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->processingInstruction((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_setDocumentLocator) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XERCES_CPP_NAMESPACE::Locator *arg2 = (XERCES_CPP_NAMESPACE::Locator *) (XERCES_CPP_NAMESPACE::Locator *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_setDocumentLocator(self,locator);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_setDocumentLocator. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator,0) < 0) {
                SWIG_croak("Type error in argument 2 of PerlContentCallbackHandler_setDocumentLocator. Expected _p_XERCES_CPP_NAMESPACE__Locator");
            }
        }
        {
            try {
                (arg1)->setDocumentLocator((XERCES_CPP_NAMESPACE::Locator const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_startPrefixMapping) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_startPrefixMapping(self,prefix,uri);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_startPrefixMapping. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            if (SvPOK(ST(2))||SvIOK(ST(2))||SvNOK(ST(2))) {
                arg3 = Perl2XMLString(ST(2));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_startPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->startPrefixMapping((XMLCh const *)arg2,(XMLCh const *)arg3);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        {
            delete[] arg3;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_endPrefixMapping) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_endPrefixMapping(self,prefix);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_endPrefixMapping. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_endPrefixMapping, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->endPrefixMapping((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlContentCallbackHandler_skippedEntity) {
    {
        PerlContentCallbackHandler *arg1 = (PerlContentCallbackHandler *) 0 ;
        XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PerlContentCallbackHandler_skippedEntity(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlContentCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlContentCallbackHandler_skippedEntity. Expected _p_PerlContentCallbackHandler");
            }
        }
        {
            if (SvPOK(ST(1))||SvIOK(ST(1))||SvNOK(ST(1))) {
                arg2 = Perl2XMLString(ST(1));
            } else {
                croak("Type error in argument 2 of PerlContentCallbackHandler_skippedEntity, Expected perl-string.");
                XSRETURN(1);
            }
        }
        {
            try {
                (arg1)->skippedEntity((XMLCh const *)arg2);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        {
            delete[] arg2;
        }
        XSRETURN(argvi);
        fail:
        {
            delete[] arg2;
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlEntityResolverHandler__SWIG_0) {
    {
        PerlEntityResolverHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlEntityResolverHandler();");
        }
        {
            try {
                result = (PerlEntityResolverHandler *)new PerlEntityResolverHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlEntityResolverHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlEntityResolverHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlEntityResolverHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlEntityResolverHandler(obj);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlEntityResolverHandler *)new PerlEntityResolverHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlEntityResolverHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlEntityResolverHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlEntityResolverHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlEntityResolverHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlEntityResolverHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlEntityResolverHandler) {
    {
        PerlEntityResolverHandler *arg1 = (PerlEntityResolverHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlEntityResolverHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlEntityResolverHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlEntityResolverHandler. Expected _p_PerlEntityResolverHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlEntityResolverHandler_type) {
    {
        PerlEntityResolverHandler *arg1 = (PerlEntityResolverHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlEntityResolverHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlEntityResolverHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlEntityResolverHandler_type. Expected _p_PerlEntityResolverHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlNodeFilterCallbackHandler__SWIG_0) {
    {
        PerlNodeFilterCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PerlNodeFilterCallbackHandler();");
        }
        {
            try {
                result = (PerlNodeFilterCallbackHandler *)new PerlNodeFilterCallbackHandler();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlNodeFilterCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlNodeFilterCallbackHandler__SWIG_1) {
    {
        SV *arg1 = (SV *) 0 ;
        PerlNodeFilterCallbackHandler *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_PerlNodeFilterCallbackHandler(obj);");
        }
        {
            arg1 = ST(0);
        }
        {
            try {
                result = (PerlNodeFilterCallbackHandler *)new PerlNodeFilterCallbackHandler(arg1);
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_PerlNodeFilterCallbackHandler, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PerlNodeFilterCallbackHandler) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlNodeFilterCallbackHandler__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_PerlNodeFilterCallbackHandler__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_PerlNodeFilterCallbackHandler'");
    XSRETURN(0);
}


XS(_wrap_delete_PerlNodeFilterCallbackHandler) {
    {
        PerlNodeFilterCallbackHandler *arg1 = (PerlNodeFilterCallbackHandler *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PerlNodeFilterCallbackHandler(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlNodeFilterCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PerlNodeFilterCallbackHandler. Expected _p_PerlNodeFilterCallbackHandler");
            }
        }
        {
            try {
                delete arg1;
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PerlNodeFilterCallbackHandler_type) {
    {
        PerlNodeFilterCallbackHandler *arg1 = (PerlNodeFilterCallbackHandler *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PerlNodeFilterCallbackHandler_type(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_PerlNodeFilterCallbackHandler,0) < 0) {
                SWIG_croak("Type error in argument 1 of PerlNodeFilterCallbackHandler_type. Expected _p_PerlNodeFilterCallbackHandler");
            }
        }
        {
            try {
                result = (int)(arg1)->type();
                
            } 
            catch (const XMLException& e)
            {
                makeXMLException(e);
            }
            catch (const DOMException& e)
            {
                makeDOMException(e);
            }
            catch (...)
            {
                croak("%s", "Handling Unknown exception");
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMText(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMText *)  ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMImplementationTo_p_XERCES_CPP_NAMESPACE__DOMImplementationLS(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMImplementationLS *)  ((XERCES_CPP_NAMESPACE::DOMImplementation *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLValidator *)  ((XERCES_CPP_NAMESPACE::DTDValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLValidator *)  ((XERCES_CPP_NAMESPACE::SchemaValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMWriterFilterTo_p_XERCES_CPP_NAMESPACE__DOMNodeFilter(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNodeFilter *)  ((XERCES_CPP_NAMESPACE::DOMWriterFilter *) x));
}
static void *_p_PerlNodeFilterCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__DOMNodeFilter(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNodeFilter *)  ((PerlNodeFilterCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__Parser(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::Parser *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttrTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttr *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::SchemaElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::DTDElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLValidator *) ((XERCES_CPP_NAMESPACE::SchemaValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLValidator *) ((XERCES_CPP_NAMESPACE::DTDValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLPScanTokenTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLPScanToken *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::DTDAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLNotationDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__MemBufFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *) ((XERCES_CPP_NAMESPACE::MemBufFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__LocalFileFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *) ((XERCES_CPP_NAMESPACE::LocalFileFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__StdOutFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLFormatTarget *) ((XERCES_CPP_NAMESPACE::StdOutFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLURLTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLURL *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__InputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::InputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__MemBufInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::InputSource *) ((XERCES_CPP_NAMESPACE::MemBufInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__StdInInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::InputSource *) ((XERCES_CPP_NAMESPACE::StdInInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__LocalFileInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::InputSource *) ((XERCES_CPP_NAMESPACE::LocalFileInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__URLInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::InputSource *) ((XERCES_CPP_NAMESPACE::URLInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::InputSource *) ((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::SchemaAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::AbstractDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::AbstractDOMParser *) ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysTableBucketElemTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysTableBucketElem<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXNotSupportedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::SAXException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLContentModelTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLContentModel *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__QNameTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::QName *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::SchemaGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::DTDGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__GrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::Grammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXParseException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::SchemaAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::DTDAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLUri *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLFormatterTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLFormatter *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLEntityDecl *) ((XERCES_CPP_NAMESPACE::DTDEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLErrorReporter *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLErrorReporter *)  ((XERCES_CPP_NAMESPACE::AbstractDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLErrorReporter *) (XERCES_CPP_NAMESPACE::AbstractDOMParser *) ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLElementDecl *)  ((XERCES_CPP_NAMESPACE::DTDElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLElementDecl *)  ((XERCES_CPP_NAMESPACE::SchemaElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__AbstractDOMParser(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::AbstractDOMParser *)  ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::Grammar *)  ((XERCES_CPP_NAMESPACE::DTDGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::Grammar *)  ((XERCES_CPP_NAMESPACE::SchemaGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDef *)  ((XERCES_CPP_NAMESPACE::SchemaAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDef *)  ((XERCES_CPP_NAMESPACE::DTDAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__MemBufFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLFormatTarget *)  ((XERCES_CPP_NAMESPACE::MemBufFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__LocalFileFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLFormatTarget *)  ((XERCES_CPP_NAMESPACE::LocalFileFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__StdOutFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLFormatTarget *)  ((XERCES_CPP_NAMESPACE::StdOutFormatTarget *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__MemBufInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::InputSource *)  ((XERCES_CPP_NAMESPACE::MemBufInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__StdInInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::InputSource *)  ((XERCES_CPP_NAMESPACE::StdInInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__LocalFileInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::InputSource *)  ((XERCES_CPP_NAMESPACE::LocalFileInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__URLInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::InputSource *)  ((XERCES_CPP_NAMESPACE::URLInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::InputSource *)  ((XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__Wrapper4InputSourceTo_p_XERCES_CPP_NAMESPACE__DOMInputSource(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMInputSource *)  ((XERCES_CPP_NAMESPACE::Wrapper4InputSource *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDefList *)  ((XERCES_CPP_NAMESPACE::DTDAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDefList *)  ((XERCES_CPP_NAMESPACE::SchemaAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DocTypeHandler *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DocTypeHandler *)  ((XERCES_CPP_NAMESPACE::AbstractDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DocTypeHandler *) (XERCES_CPP_NAMESPACE::AbstractDOMParser *) ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityHandler *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityHandler *)  ((XERCES_CPP_NAMESPACE::AbstractDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityHandler *) (XERCES_CPP_NAMESPACE::AbstractDOMParser *) ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLDocumentHandler *)  ((XERCES_CPP_NAMESPACE::SAXParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLDocumentHandler *)  ((XERCES_CPP_NAMESPACE::AbstractDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLDocumentHandler *) (XERCES_CPP_NAMESPACE::AbstractDOMParser *) ((XERCES_CPP_NAMESPACE::XercesDOMParser *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__DeclHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DeclHandler *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__LexicalHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::LexicalHandler *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__ContentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ContentHandler *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_PerlContentCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ContentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ContentHandler *)  ((PerlContentCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__ErrorHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ErrorHandler *)  ((XERCES_CPP_NAMESPACE::HandlerBase *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ErrorHandler *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ErrorHandler *)  ((PerlErrorCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__DTDHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DTDHandler *)  ((XERCES_CPP_NAMESPACE::HandlerBase *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__DTDHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DTDHandler *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__DocumentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DocumentHandler *)  ((XERCES_CPP_NAMESPACE::HandlerBase *) x));
}
static void *_p_PerlDocumentCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__DocumentHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DocumentHandler *)  ((PerlDocumentCallbackHandler *) x));
}
static void *_p_PerlErrorCallbackHandlerTo_p_PerlCallbackHandler(void *x) {
    return (void *)((PerlCallbackHandler *)  ((PerlErrorCallbackHandler *) x));
}
static void *_p_PerlDocumentCallbackHandlerTo_p_PerlCallbackHandler(void *x) {
    return (void *)((PerlCallbackHandler *)  ((PerlDocumentCallbackHandler *) x));
}
static void *_p_PerlContentCallbackHandlerTo_p_PerlCallbackHandler(void *x) {
    return (void *)((PerlCallbackHandler *)  ((PerlContentCallbackHandler *) x));
}
static void *_p_PerlEntityResolverHandlerTo_p_PerlCallbackHandler(void *x) {
    return (void *)((PerlCallbackHandler *)  ((PerlEntityResolverHandler *) x));
}
static void *_p_PerlNodeFilterCallbackHandlerTo_p_PerlCallbackHandler(void *x) {
    return (void *)((PerlCallbackHandler *)  ((PerlNodeFilterCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXNotSupportedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXParseException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMRangeExceptionTo_p_XERCES_CPP_NAMESPACE__DOMException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMException *)  ((XERCES_CPP_NAMESPACE::DOMRangeException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMLEntityDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityDecl *)  ((XERCES_CPP_NAMESPACE::DTDEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMElementTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMElement *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentFragmentTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMDocumentFragment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMAttrTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMAttr *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCharacterDataTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMCharacterData *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *) ((XERCES_CPP_NAMESPACE::DOMText *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentTypeTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMDocumentType *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *) ((XERCES_CPP_NAMESPACE::DOMComment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMProcessingInstructionTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMDocument *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMEntityTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMEntity *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMEntityReferenceTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMEntityReference *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *)(XERCES_CPP_NAMESPACE::DOMText *) ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMNotationTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMNotation *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMDocumentRange(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMDocumentRange *)  ((XERCES_CPP_NAMESPACE::DOMDocument *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMDocumentTraversal *)  ((XERCES_CPP_NAMESPACE::DOMDocument *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__EntityResolver(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::EntityResolver *)  ((XERCES_CPP_NAMESPACE::HandlerBase *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::EntityResolver *)  ((XERCES_CPP_NAMESPACE::DefaultHandler *) x));
}
static void *_p_PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::EntityResolver *)  ((PerlEntityResolverHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *)  ((XERCES_CPP_NAMESPACE::DOMText *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *)  ((XERCES_CPP_NAMESPACE::DOMComment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *) (XERCES_CPP_NAMESPACE::DOMText *) ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0, 0, 0, 0},{"_FileHandle", 0, 0, 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_void[] = {{"_p_p_void", 0, "void **", 0, 0, 0, 0},{"_p_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils[] = {{"XML::Xerces::XMLPlatformUtils", 0, "XERCES_CPP_NAMESPACE::XMLPlatformUtils *", 0, 0, 0, 0},{"XML::Xerces::XMLPlatformUtils", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNodeList[] = {{"XML::Xerces::DOMNodeList", 0, "XERCES_CPP_NAMESPACE::DOMNodeList *", 0, 0, 0, 0},{"XML::Xerces::DOMNodeList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap[] = {{"XML::Xerces::DOMNamedNodeMap", 0, "XERCES_CPP_NAMESPACE::DOMNamedNodeMap *", 0, 0, 0, 0},{"XML::Xerces::DOMNamedNodeMap", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_IdentityConstraint[] = {{"_p_IdentityConstraint", 0, "IdentityConstraint *", 0, 0, 0, 0},{"_p_IdentityConstraint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PSVIDefs__Complexity[] = {{"_p_PSVIDefs__Complexity", 0, "PSVIDefs::Complexity *", 0, 0, 0, 0},{"_p_PSVIDefs__Complexity", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t[] = {{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t", 0, "RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *", 0, 0, 0, 0},{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel[] = {{"_p_XERCES_CPP_NAMESPACE__XMLContentModel", 0, "XERCES_CPP_NAMESPACE::XMLContentModel *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLContentModel", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__FileHandle[] = {{"_FileHandle", 0, "void *|FileHandle", 0, 0, 0, 0},{"_FileHandle", 0, 0, 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", 0, "XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSAnnotation[] = {{"_p_XERCES_CPP_NAMESPACE__XSAnnotation", 0, "XERCES_CPP_NAMESPACE::XSAnnotation *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XSAnnotation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNotation[] = {{"XML::Xerces::DOMNotation", 0, "XERCES_CPP_NAMESPACE::DOMNotation *", 0, 0, 0, 0},{"XML::Xerces::DOMNotation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMText[] = {{"XML::Xerces::DOMText", 0, "XERCES_CPP_NAMESPACE::DOMText *", 0, 0, 0, 0},{"XML::Xerces::DOMText", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMCDATASection", _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMText, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XMLBuffer[] = {{"_p_XMLBuffer", 0, "XMLBuffer *", 0, 0, 0, 0},{"_p_XMLBuffer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMBuilderFilter[] = {{"_p_XERCES_CPP_NAMESPACE__DOMBuilderFilter", 0, "XERCES_CPP_NAMESPACE::DOMBuilderFilter *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMBuilderFilter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DOMWriterFilter[] = {{"_p_DOMWriterFilter", 0, "DOMWriterFilter *", 0, 0, 0, 0},{"_p_DOMWriterFilter", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMWriterFilter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMWriterFilter[] = {{"XML::Xerces::DOMWriterFilter", 0, "XERCES_CPP_NAMESPACE::DOMWriterFilter *", 0, 0, 0, 0},{"XML::Xerces::DOMWriterFilter", 0, 0, 0, 0, 0, 0},{"_p_DOMWriterFilter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t", 0, "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDElementDeclEnumerator", _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", 0, "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDEntityDeclEnumerator", _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", 0, "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, 0, 0},{"XML::Xerces::SchemaElementDeclEnumerator", _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Base64[] = {{"XML::Xerces::Base64", 0, "XERCES_CPP_NAMESPACE::Base64 *", 0, 0, 0, 0},{"XML::Xerces::Base64", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PSVIDefs__PSVIScope[] = {{"_p_PSVIDefs__PSVIScope", 0, "PSVIDefs::PSVIScope *", 0, 0, 0, 0},{"_p_PSVIDefs__PSVIScope", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttr[] = {{"_p_XERCES_CPP_NAMESPACE__XMLAttr", 0, "XERCES_CPP_NAMESPACE::XMLAttr *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLAttr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLUni[] = {{"XML::Xerces::XMLUni", 0, "XERCES_CPP_NAMESPACE::XMLUni *", 0, 0, 0, 0},{"XML::Xerces::XMLUni", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationLS[] = {{"XML::Xerces::DOMImplementationLS", 0, "XERCES_CPP_NAMESPACE::DOMImplementationLS *", 0, 0, 0, 0},{"XML::Xerces::DOMImplementation", _p_XERCES_CPP_NAMESPACE__DOMImplementationTo_p_XERCES_CPP_NAMESPACE__DOMImplementationLS, 0, 0, 0, 0, 0},{"XML::Xerces::DOMImplementationLS", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__HexBin[] = {{"XML::Xerces::HexBin", 0, "XERCES_CPP_NAMESPACE::HexBin *", 0, 0, 0, 0},{"XML::Xerces::HexBin", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XSerializeEngine[] = {{"_p_XSerializeEngine", 0, "XSerializeEngine *", 0, 0, 0, 0},{"_p_XSerializeEngine", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DatatypeValidator[] = {{"_p_XERCES_CPP_NAMESPACE__DatatypeValidator", 0, "XERCES_CPP_NAMESPACE::DatatypeValidator *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DatatypeValidator", 0, 0, 0, 0, 0, 0},{"_p_DatatypeValidator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator[] = {{"XML::Xerces::SchemaValidator", 0, "XERCES_CPP_NAMESPACE::SchemaValidator *", 0, 0, 0, 0},{"XML::Xerces::SchemaValidator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DatatypeValidator[] = {{"_p_DatatypeValidator", 0, "DatatypeValidator *", 0, 0, 0, 0},{"_p_DatatypeValidator", 0, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DatatypeValidator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDValidator[] = {{"XML::Xerces::DTDValidator", 0, "XERCES_CPP_NAMESPACE::DTDValidator *", 0, 0, 0, 0},{"XML::Xerces::DTDValidator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLValidator[] = {{"XML::Xerces::XMLValidator", 0, "XERCES_CPP_NAMESPACE::XMLValidator *", 0, 0, 0, 0},{"XML::Xerces::XMLValidator", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDValidator", _p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaValidator", _p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PSVIDefs__Validity[] = {{"_p_PSVIDefs__Validity", 0, "PSVIDefs::Validity *", 0, 0, 0, 0},{"_p_PSVIDefs__Validity", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_int[] = {{"_p_unsigned_int", 0, "unsigned int *", 0, 0, 0, 0},{"_p_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMElement[] = {{"XML::Xerces::DOMElement", 0, "XERCES_CPP_NAMESPACE::DOMElement *", 0, 0, 0, 0},{"XML::Xerces::DOMElement", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLExcepts[] = {{"XML::Xerces::XMLExcepts", 0, "XERCES_CPP_NAMESPACE::XMLExcepts *", 0, 0, 0, 0},{"XML::Xerces::XMLExcepts", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocument[] = {{"XML::Xerces::DOMDocument", 0, "XERCES_CPP_NAMESPACE::DOMDocument *", 0, 0, 0, 0},{"XML::Xerces::DOMDocument", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMImplementation[] = {{"XML::Xerces::DOMImplementation", 0, "XERCES_CPP_NAMESPACE::DOMImplementation *", 0, 0, 0, 0},{"XML::Xerces::DOMImplementation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAX2XMLReader[] = {{"XML::Xerces::SAX2XMLReader", 0, "XERCES_CPP_NAMESPACE::SAX2XMLReader *", 0, 0, 0, 0},{"XML::Xerces::SAX2XMLReader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNodeFilter[] = {{"XML::Xerces::DOMNodeFilter", 0, "XERCES_CPP_NAMESPACE::DOMNodeFilter *", 0, 0, 0, 0},{"XML::Xerces::DOMWriterFilter", _p_XERCES_CPP_NAMESPACE__DOMWriterFilterTo_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, 0, 0, 0, 0, 0},{"_p_DOMWriterFilter", _p_XERCES_CPP_NAMESPACE__DOMWriterFilterTo_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, 0, 0, 0, 0, 0},{"XML::Xerces::DOMNodeFilter", 0, 0, 0, 0, 0, 0},{"XML::Xerces::PerlNodeFilterCallbackHandler", _p_PerlNodeFilterCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXParser[] = {{"XML::Xerces::SAXParser", 0, "XERCES_CPP_NAMESPACE::SAXParser *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMConfiguration[] = {{"_p_XERCES_CPP_NAMESPACE__DOMConfiguration", 0, "XERCES_CPP_NAMESPACE::DOMConfiguration *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMConfiguration", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMemory[] = {{"_p_XERCES_CPP_NAMESPACE__XMemory", 0, "XERCES_CPP_NAMESPACE::XMemory *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLAttr", _p_XERCES_CPP_NAMESPACE__XMLAttrTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLUri", _p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaElementDecl", _p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLElementDecl", _p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDElementDecl", _p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaValidator", _p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDValidator", _p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLValidator", _p_XERCES_CPP_NAMESPACE__XMLValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLPScanToken", _p_XERCES_CPP_NAMESPACE__XMLPScanTokenTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaElementDeclEnumerator", _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XMLAttDef", _p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLAttDef", _p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLNotationDecl", _p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLFormatTarget", _p_XERCES_CPP_NAMESPACE__XMLFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::MemBufFormatTarget", _p_XERCES_CPP_NAMESPACE__MemBufFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::LocalFileFormatTarget", _p_XERCES_CPP_NAMESPACE__LocalFileFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::StdOutFormatTarget", _p_XERCES_CPP_NAMESPACE__StdOutFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t", _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::InputSource", _p_XERCES_CPP_NAMESPACE__InputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::MemBufInputSource", _p_XERCES_CPP_NAMESPACE__MemBufInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::StdInInputSource", _p_XERCES_CPP_NAMESPACE__StdInInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::LocalFileInputSource", _p_XERCES_CPP_NAMESPACE__LocalFileInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::URLInputSource", _p_XERCES_CPP_NAMESPACE__URLInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::Wrapper4DOMInputSource", _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSourceTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLURL", _p_XERCES_CPP_NAMESPACE__XMLURLTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SAXNotSupportedException", _p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SAXNotRecognizedException", _p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SAXException", _p_XERCES_CPP_NAMESPACE__SAXExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SAXParseException", _p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLException", _p_XERCES_CPP_NAMESPACE__XMLExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLContentModel", _p_XERCES_CPP_NAMESPACE__XMLContentModelTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaGrammar", _p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDGrammar", _p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::Grammar", _p_XERCES_CPP_NAMESPACE__GrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDEntityDeclEnumerator", _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDElementDeclEnumerator", _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMemory", 0, 0, 0, 0, 0, 0},{"XML::Xerces::QName", _p_XERCES_CPP_NAMESPACE__QNameTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaAttDefList", _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDefList", _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLAttDefList", _p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XMLAttDefList", _p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLFormatter", _p_XERCES_CPP_NAMESPACE__XMLFormatterTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::DTDEntityDecl", _p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"XML::Xerces::XMLEntityDecl", _p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__RefHash3KeysTableBucketElemTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", _p_XERCES_CPP_NAMESPACE__RefHash3KeysTableBucketElemTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ValueVectorOfTunsigned_int_t[] = {{"_p_ValueVectorOfTunsigned_int_t", 0, "ValueVectorOf<unsigned int > *", 0, 0, 0, 0},{"_p_ValueVectorOfTunsigned_int_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t[] = {{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t", 0, "RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *", 0, 0, 0, 0},{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLTranscoder[] = {{"_p_XERCES_CPP_NAMESPACE__XMLTranscoder", 0, "XERCES_CPP_NAMESPACE::XMLTranscoder *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLTranscoder", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLErrorReporter[] = {{"XML::Xerces::XMLErrorReporter", 0, "XERCES_CPP_NAMESPACE::XMLErrorReporter *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"XML::Xerces::XMLErrorReporter", 0, 0, 0, 0, 0, 0},{"_p_XMLErrorReporter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XMLErrorReporter[] = {{"_p_XMLErrorReporter", 0, "XMLErrorReporter *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 0, 0, 0, 0, 0},{"_p_XMLErrorReporter", 0, 0, 0, 0, 0, 0},{"XML::Xerces::XMLErrorReporter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference[] = {{"XML::Xerces::DOMEntityReference", 0, "XERCES_CPP_NAMESPACE::DOMEntityReference *", 0, 0, 0, 0},{"XML::Xerces::DOMEntityReference", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl[] = {{"XML::Xerces::SchemaElementDecl", 0, "XERCES_CPP_NAMESPACE::SchemaElementDecl *", 0, 0, 0, 0},{"XML::Xerces::SchemaElementDecl", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl[] = {{"XML::Xerces::XMLElementDecl", 0, "XERCES_CPP_NAMESPACE::XMLElementDecl *", 0, 0, 0, 0},{"XML::Xerces::XMLElementDecl", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDElementDecl", _p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaElementDecl", _p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl[] = {{"XML::Xerces::DTDElementDecl", 0, "XERCES_CPP_NAMESPACE::DTDElementDecl *", 0, 0, 0, 0},{"XML::Xerces::DTDElementDecl", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken[] = {{"XML::Xerces::XMLPScanToken", 0, "XERCES_CPP_NAMESPACE::XMLPScanToken *", 0, 0, 0, 0},{"XML::Xerces::XMLPScanToken", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMComment[] = {{"XML::Xerces::DOMComment", 0, "XERCES_CPP_NAMESPACE::DOMComment *", 0, 0, 0, 0},{"XML::Xerces::DOMComment", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNodeIterator[] = {{"XML::Xerces::DOMNodeIterator", 0, "XERCES_CPP_NAMESPACE::DOMNodeIterator *", 0, 0, 0, 0},{"XML::Xerces::DOMNodeIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SV[] = {{"_p_SV", 0, "SV *", 0, 0, 0, 0},{"_p_SV", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry[] = {{"XML::Xerces::DOMImplementationRegistry", 0, "XERCES_CPP_NAMESPACE::DOMImplementationRegistry *", 0, 0, 0, 0},{"XML::Xerces::DOMImplementationRegistry", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ContentSpecNode[] = {{"_p_XERCES_CPP_NAMESPACE__ContentSpecNode", 0, "XERCES_CPP_NAMESPACE::ContentSpecNode *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__ContentSpecNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHash2KeysTableOfTSchemaAttDef_t[] = {{"_p_RefHash2KeysTableOfTSchemaAttDef_t", 0, "RefHash2KeysTableOf<SchemaAttDef > *", 0, 0, 0, 0},{"_p_RefHash2KeysTableOfTSchemaAttDef_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTDTDAttDef_t[] = {{"_p_RefHashTableOfTDTDAttDef_t", 0, "RefHashTableOf<DTDAttDef > *", 0, 0, 0, 0},{"_p_RefHashTableOfTDTDAttDef_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__BinInputStream[] = {{"_p_XERCES_CPP_NAMESPACE__BinInputStream", 0, "XERCES_CPP_NAMESPACE::BinInputStream *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__BinInputStream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLScanner[] = {{"_p_XERCES_CPP_NAMESPACE__XMLScanner", 0, "XERCES_CPP_NAMESPACE::XMLScanner *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", 0, "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t", 0, "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Parser[] = {{"XML::Xerces::Parser", 0, "XERCES_CPP_NAMESPACE::Parser *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__Parser, 0, 0, 0, 0, 0},{"XML::Xerces::Parser", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__AbstractDOMParser[] = {{"XML::Xerces::AbstractDOMParser", 0, "XERCES_CPP_NAMESPACE::AbstractDOMParser *", 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", 0, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {{"XML::Xerces::SchemaElementDeclEnumerator", 0, "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, 0, 0},{"XML::Xerces::SchemaElementDeclEnumerator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XercesDOMParser[] = {{"XML::Xerces::XercesDOMParser", 0, "XERCES_CPP_NAMESPACE::XercesDOMParser *", 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription[] = {{"_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription", 0, "XERCES_CPP_NAMESPACE::XMLGrammarDescription *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar[] = {{"XML::Xerces::SchemaGrammar", 0, "XERCES_CPP_NAMESPACE::SchemaGrammar *", 0, 0, 0, 0},{"XML::Xerces::SchemaGrammar", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar[] = {{"XML::Xerces::DTDGrammar", 0, "XERCES_CPP_NAMESPACE::DTDGrammar *", 0, 0, 0, 0},{"XML::Xerces::DTDGrammar", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Grammar[] = {{"XML::Xerces::Grammar", 0, "XERCES_CPP_NAMESPACE::Grammar *", 0, 0, 0, 0},{"XML::Xerces::Grammar", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDGrammar", _p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaGrammar", _p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ValidationContext[] = {{"_p_ValidationContext", 0, "ValidationContext *", 0, 0, 0, 0},{"_p_ValidationContext", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef[] = {{"XML::Xerces::DTDAttDef", 0, "XERCES_CPP_NAMESPACE::DTDAttDef *", 0, 0, 0, 0},{"XML::Xerces::DTDAttDef", 0, 0, 0, 0, 0, 0},{"_p_DTDAttDef", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef[] = {{"XML::Xerces::XMLAttDef", 0, "XERCES_CPP_NAMESPACE::XMLAttDef *", 0, 0, 0, 0},{"XML::Xerces::SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"_p_SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"XML::Xerces::XMLAttDef", 0, 0, 0, 0, 0, 0},{"_p_XMLAttDef", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"_p_DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XMLAttDef[] = {{"_p_XMLAttDef", 0, "XMLAttDef *", 0, 0, 0, 0},{"XML::Xerces::SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"_p_SchemaAttDef", _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"_p_XMLAttDef", 0, 0, 0, 0, 0, 0},{"XML::Xerces::XMLAttDef", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{"_p_DTDAttDef", _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DTDAttDef[] = {{"_p_DTDAttDef", 0, "DTDAttDef *", 0, 0, 0, 0},{"_p_DTDAttDef", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDef", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLURL[] = {{"XML::Xerces::XMLURL", 0, "XERCES_CPP_NAMESPACE::XMLURL *", 0, 0, 0, 0},{"XML::Xerces::XMLURL", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *", 0, 0, 0, 0},{"_p_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTXMLRefInfo_t[] = {{"_p_RefHashTableOfTXMLRefInfo_t", 0, "RefHashTableOf<XMLRefInfo > *", 0, 0, 0, 0},{"_p_RefHashTableOfTXMLRefInfo_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NamespaceScope[] = {{"_p_XERCES_CPP_NAMESPACE__NamespaceScope", 0, "XERCES_CPP_NAMESPACE::NamespaceScope *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NamespaceScope", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XMLValid__Codes[] = {{"_p_XMLValid__Codes", 0, "XMLValid::Codes *", 0, 0, 0, 0},{"_p_XMLValid__Codes", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PSVIDefs__Validation[] = {{"_p_PSVIDefs__Validation", 0, "PSVIDefs::Validation *", 0, 0, 0, 0},{"_p_PSVIDefs__Validation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t[] = {{"_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t", 0, "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {{"XML::Xerces::DTDEntityDeclEnumerator", 0, "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, 0, 0},{"XML::Xerces::DTDEntityDeclEnumerator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {{"XML::Xerces::DTDElementDeclEnumerator", 0, "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, 0, 0},{"XML::Xerces::DTDElementDeclEnumerator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLFormatter[] = {{"XML::Xerces::XMLFormatter", 0, "XERCES_CPP_NAMESPACE::XMLFormatter *", 0, 0, 0, 0},{"XML::Xerces::XMLFormatter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__StdOutFormatTarget[] = {{"XML::Xerces::StdOutFormatTarget", 0, "XERCES_CPP_NAMESPACE::StdOutFormatTarget *", 0, 0, 0, 0},{"XML::Xerces::StdOutFormatTarget", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget[] = {{"XML::Xerces::LocalFileFormatTarget", 0, "XERCES_CPP_NAMESPACE::LocalFileFormatTarget *", 0, 0, 0, 0},{"XML::Xerces::LocalFileFormatTarget", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__MemBufFormatTarget[] = {{"XML::Xerces::MemBufFormatTarget", 0, "XERCES_CPP_NAMESPACE::MemBufFormatTarget *", 0, 0, 0, 0},{"XML::Xerces::MemBufFormatTarget", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLFormatTarget[] = {{"XML::Xerces::XMLFormatTarget", 0, "XERCES_CPP_NAMESPACE::XMLFormatTarget *", 0, 0, 0, 0},{"XML::Xerces::XMLFormatTarget", 0, 0, 0, 0, 0, 0},{"XML::Xerces::MemBufFormatTarget", _p_XERCES_CPP_NAMESPACE__MemBufFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0, 0, 0, 0, 0},{"XML::Xerces::LocalFileFormatTarget", _p_XERCES_CPP_NAMESPACE__LocalFileFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0, 0, 0, 0, 0},{"XML::Xerces::StdOutFormatTarget", _p_XERCES_CPP_NAMESPACE__StdOutFormatTargetTo_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarPool[] = {{"_p_XERCES_CPP_NAMESPACE__XMLGrammarPool", 0, "XERCES_CPP_NAMESPACE::XMLGrammarPool *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLGrammarPool", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLMutex[] = {{"_p_XERCES_CPP_NAMESPACE__XMLMutex", 0, "XERCES_CPP_NAMESPACE::XMLMutex *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLMutex", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PanicHandler__PanicReasons[] = {{"_p_PanicHandler__PanicReasons", 0, "PanicHandler::PanicReasons *", 0, 0, 0, 0},{"_p_PanicHandler__PanicReasons", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__URLInputSource[] = {{"XML::Xerces::URLInputSource", 0, "XERCES_CPP_NAMESPACE::URLInputSource *", 0, 0, 0, 0},{"XML::Xerces::URLInputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__LocalFileInputSource[] = {{"XML::Xerces::LocalFileInputSource", 0, "XERCES_CPP_NAMESPACE::LocalFileInputSource *", 0, 0, 0, 0},{"XML::Xerces::LocalFileInputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__StdInInputSource[] = {{"XML::Xerces::StdInInputSource", 0, "XERCES_CPP_NAMESPACE::StdInInputSource *", 0, 0, 0, 0},{"XML::Xerces::StdInInputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__MemBufInputSource[] = {{"XML::Xerces::MemBufInputSource", 0, "XERCES_CPP_NAMESPACE::MemBufInputSource *", 0, 0, 0, 0},{"XML::Xerces::MemBufInputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMInputSource[] = {{"XML::Xerces::DOMInputSource", 0, "XERCES_CPP_NAMESPACE::DOMInputSource *", 0, 0, 0, 0},{"XML::Xerces::DOMInputSource", 0, 0, 0, 0, 0, 0},{"XML::Xerces::Wrapper4InputSource", _p_XERCES_CPP_NAMESPACE__Wrapper4InputSourceTo_p_XERCES_CPP_NAMESPACE__DOMInputSource, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__InputSource[] = {{"XML::Xerces::InputSource", 0, "XERCES_CPP_NAMESPACE::InputSource *", 0, 0, 0, 0},{"XML::Xerces::InputSource", 0, 0, 0, 0, 0, 0},{"XML::Xerces::MemBufInputSource", _p_XERCES_CPP_NAMESPACE__MemBufInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource, 0, 0, 0, 0, 0},{"XML::Xerces::StdInInputSource", _p_XERCES_CPP_NAMESPACE__StdInInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource, 0, 0, 0, 0, 0},{"XML::Xerces::LocalFileInputSource", _p_XERCES_CPP_NAMESPACE__LocalFileInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource, 0, 0, 0, 0, 0},{"XML::Xerces::URLInputSource", _p_XERCES_CPP_NAMESPACE__URLInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource, 0, 0, 0, 0, 0},{"XML::Xerces::Wrapper4DOMInputSource", _p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSourceTo_p_XERCES_CPP_NAMESPACE__InputSource, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLDeleter[] = {{"XML::Xerces::XMLDeleter", 0, "XERCES_CPP_NAMESPACE::XMLDeleter *", 0, 0, 0, 0},{"XML::Xerces::XMLDeleter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList[] = {{"XML::Xerces::SchemaAttDefList", 0, "XERCES_CPP_NAMESPACE::SchemaAttDefList *", 0, 0, 0, 0},{"XML::Xerces::SchemaAttDefList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList[] = {{"XML::Xerces::DTDAttDefList", 0, "XERCES_CPP_NAMESPACE::DTDAttDefList *", 0, 0, 0, 0},{"XML::Xerces::DTDAttDefList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList[] = {{"XML::Xerces::XMLAttDefList", 0, "XERCES_CPP_NAMESPACE::XMLAttDefList *", 0, 0, 0, 0},{"XML::Xerces::XMLAttDefList", 0, 0, 0, 0, 0, 0},{"_p_XMLAttDefList", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDefList", _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaAttDefList", _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XMLAttDefList[] = {{"_p_XMLAttDefList", 0, "XMLAttDefList *", 0, 0, 0, 0},{"_p_XMLAttDefList", 0, 0, 0, 0, 0, 0},{"XML::Xerces::XMLAttDefList", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDAttDefList", _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaAttDefList", _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Wrapper4InputSource[] = {{"XML::Xerces::Wrapper4InputSource", 0, "XERCES_CPP_NAMESPACE::Wrapper4InputSource *", 0, 0, 0, 0},{"XML::Xerces::Wrapper4InputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource[] = {{"XML::Xerces::Wrapper4DOMInputSource", 0, "XERCES_CPP_NAMESPACE::Wrapper4DOMInputSource *", 0, 0, 0, 0},{"XML::Xerces::Wrapper4DOMInputSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationSource[] = {{"XML::Xerces::DOMImplementationSource", 0, "XERCES_CPP_NAMESPACE::DOMImplementationSource *", 0, 0, 0, 0},{"XML::Xerces::DOMImplementationSource", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler[] = {{"_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler", 0, "XERCES_CPP_NAMESPACE::DOMUserDataHandler *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIHandler[] = {{"_p_XERCES_CPP_NAMESPACE__PSVIHandler", 0, "XERCES_CPP_NAMESPACE::PSVIHandler *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__PSVIHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DefaultHandler[] = {{"XML::Xerces::DefaultHandler", 0, "XERCES_CPP_NAMESPACE::DefaultHandler *", 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DocTypeHandler[] = {{"XML::Xerces::DocTypeHandler", 0, "XERCES_CPP_NAMESPACE::DocTypeHandler *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__DocTypeHandler, 0, 0, 0, 0, 0},{"XML::Xerces::DocTypeHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEntityHandler[] = {{"XML::Xerces::XMLEntityHandler", 0, "XERCES_CPP_NAMESPACE::XMLEntityHandler *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLEntityHandler, 0, 0, 0, 0, 0},{"XML::Xerces::XMLEntityHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler[] = {{"XML::Xerces::XMLDocumentHandler", 0, "XERCES_CPP_NAMESPACE::XMLDocumentHandler *", 0, 0, 0, 0},{"XML::Xerces::SAXParser", _p_XERCES_CPP_NAMESPACE__SAXParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0, 0, 0, 0, 0},{"XML::Xerces::AbstractDOMParser", _p_XERCES_CPP_NAMESPACE__AbstractDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0, 0, 0, 0, 0},{"XML::Xerces::XercesDOMParser", _p_XERCES_CPP_NAMESPACE__XercesDOMParserTo_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0, 0, 0, 0, 0},{"XML::Xerces::XMLDocumentHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DeclHandler[] = {{"XML::Xerces::DeclHandler", 0, "XERCES_CPP_NAMESPACE::DeclHandler *", 0, 0, 0, 0},{"XML::Xerces::DeclHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__DeclHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__LexicalHandler[] = {{"XML::Xerces::LexicalHandler", 0, "XERCES_CPP_NAMESPACE::LexicalHandler *", 0, 0, 0, 0},{"XML::Xerces::LexicalHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__LexicalHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ContentHandler[] = {{"XML::Xerces::ContentHandler", 0, "XERCES_CPP_NAMESPACE::ContentHandler *", 0, 0, 0, 0},{"XML::Xerces::ContentHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__ContentHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlContentCallbackHandler", _p_PerlContentCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ContentHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ErrorHandler[] = {{"XML::Xerces::ErrorHandler", 0, "XERCES_CPP_NAMESPACE::ErrorHandler *", 0, 0, 0, 0},{"XML::Xerces::HandlerBase", _p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0, 0, 0, 0, 0},{"XML::Xerces::ErrorHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlErrorCallbackHandler", _p_PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDHandler[] = {{"XML::Xerces::DTDHandler", 0, "XERCES_CPP_NAMESPACE::DTDHandler *", 0, 0, 0, 0},{"XML::Xerces::HandlerBase", _p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__DTDHandler, 0, 0, 0, 0, 0},{"XML::Xerces::DTDHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__DTDHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DocumentHandler[] = {{"XML::Xerces::DocumentHandler", 0, "XERCES_CPP_NAMESPACE::DocumentHandler *", 0, 0, 0, 0},{"XML::Xerces::HandlerBase", _p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__DocumentHandler, 0, 0, 0, 0, 0},{"XML::Xerces::DocumentHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::PerlDocumentCallbackHandler", _p_PerlDocumentCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__DocumentHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlCallbackHandler[] = {{"XML::Xerces::PerlCallbackHandler", 0, "PerlCallbackHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlCallbackHandler", 0, 0, 0, 0, 0, 0},{"XML::Xerces::PerlErrorCallbackHandler", _p_PerlErrorCallbackHandlerTo_p_PerlCallbackHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlDocumentCallbackHandler", _p_PerlDocumentCallbackHandlerTo_p_PerlCallbackHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlContentCallbackHandler", _p_PerlContentCallbackHandlerTo_p_PerlCallbackHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlEntityResolverHandler", _p_PerlEntityResolverHandlerTo_p_PerlCallbackHandler, 0, 0, 0, 0, 0},{"XML::Xerces::PerlNodeFilterCallbackHandler", _p_PerlNodeFilterCallbackHandlerTo_p_PerlCallbackHandler, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PanicHandler[] = {{"_p_PanicHandler", 0, "PanicHandler *", 0, 0, 0, 0},{"_p_PanicHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_bool[] = {{"_p_bool", 0, "bool *", 0, 0, 0, 0},{"_p_bool", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__AttributeList[] = {{"XML::Xerces::AttributeList", 0, "XERCES_CPP_NAMESPACE::AttributeList *", 0, 0, 0, 0},{"XML::Xerces::AttributeList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMErrorHandler[] = {{"_p_XERCES_CPP_NAMESPACE__DOMErrorHandler", 0, "XERCES_CPP_NAMESPACE::DOMErrorHandler *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMErrorHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlErrorCallbackHandler[] = {{"XML::Xerces::PerlErrorCallbackHandler", 0, "PerlErrorCallbackHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlErrorCallbackHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlDocumentCallbackHandler[] = {{"XML::Xerces::PerlDocumentCallbackHandler", 0, "PerlDocumentCallbackHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlDocumentCallbackHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlContentCallbackHandler[] = {{"XML::Xerces::PerlContentCallbackHandler", 0, "PerlContentCallbackHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlContentCallbackHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlEntityResolverHandler[] = {{"XML::Xerces::PerlEntityResolverHandler", 0, "PerlEntityResolverHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlEntityResolverHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PerlNodeFilterCallbackHandler[] = {{"XML::Xerces::PerlNodeFilterCallbackHandler", 0, "PerlNodeFilterCallbackHandler *", 0, 0, 0, 0},{"XML::Xerces::PerlNodeFilterCallbackHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction[] = {{"XML::Xerces::DOMProcessingInstruction", 0, "XERCES_CPP_NAMESPACE::DOMProcessingInstruction *", 0, 0, 0, 0},{"XML::Xerces::DOMProcessingInstruction", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef[] = {{"XML::Xerces::SchemaAttDef", 0, "XERCES_CPP_NAMESPACE::SchemaAttDef *", 0, 0, 0, 0},{"XML::Xerces::SchemaAttDef", 0, 0, 0, 0, 0, 0},{"_p_SchemaAttDef", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SchemaAttDef[] = {{"_p_SchemaAttDef", 0, "SchemaAttDef *", 0, 0, 0, 0},{"_p_SchemaAttDef", 0, 0, 0, 0, 0, 0},{"XML::Xerces::SchemaAttDef", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMRangeException[] = {{"XML::Xerces::DOMRangeException", 0, "XERCES_CPP_NAMESPACE::DOMRangeException *", 0, 0, 0, 0},{"XML::Xerces::DOMRangeException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXParseException[] = {{"XML::Xerces::SAXParseException", 0, "XERCES_CPP_NAMESPACE::SAXParseException *", 0, 0, 0, 0},{"XML::Xerces::SAXParseException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException[] = {{"XML::Xerces::SAXNotRecognizedException", 0, "XERCES_CPP_NAMESPACE::SAXNotRecognizedException *", 0, 0, 0, 0},{"XML::Xerces::SAXNotRecognizedException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException[] = {{"XML::Xerces::SAXNotSupportedException", 0, "XERCES_CPP_NAMESPACE::SAXNotSupportedException *", 0, 0, 0, 0},{"XML::Xerces::SAXNotSupportedException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMException[] = {{"XML::Xerces::DOMException", 0, "XERCES_CPP_NAMESPACE::DOMException *", 0, 0, 0, 0},{"XML::Xerces::DOMException", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMRangeException", _p_XERCES_CPP_NAMESPACE__DOMRangeExceptionTo_p_XERCES_CPP_NAMESPACE__DOMException, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXException[] = {{"XML::Xerces::SAXException", 0, "XERCES_CPP_NAMESPACE::SAXException *", 0, 0, 0, 0},{"XML::Xerces::SAXException", 0, 0, 0, 0, 0, 0},{"XML::Xerces::SAXNotSupportedException", _p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0, 0, 0, 0},{"XML::Xerces::SAXNotRecognizedException", _p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0, 0, 0, 0},{"XML::Xerces::SAXParseException", _p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLException[] = {{"XML::Xerces::XMLException", 0, "XERCES_CPP_NAMESPACE::XMLException *", 0, 0, 0, 0},{"XML::Xerces::XMLException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl[] = {{"XML::Xerces::DTDEntityDecl", 0, "XERCES_CPP_NAMESPACE::DTDEntityDecl *", 0, 0, 0, 0},{"XML::Xerces::DTDEntityDecl", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl[] = {{"XML::Xerces::XMLEntityDecl", 0, "XERCES_CPP_NAMESPACE::XMLEntityDecl *", 0, 0, 0, 0},{"XML::Xerces::XMLEntityDecl", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DTDEntityDecl", _p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Locator[] = {{"XML::Xerces::Locator", 0, "XERCES_CPP_NAMESPACE::Locator *", 0, 0, 0, 0},{"XML::Xerces::Locator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMLocator[] = {{"XML::Xerces::DOMLocator", 0, "XERCES_CPP_NAMESPACE::DOMLocator *", 0, 0, 0, 0},{"XML::Xerces::DOMLocator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__HandlerBase[] = {{"XML::Xerces::HandlerBase", 0, "XERCES_CPP_NAMESPACE::HandlerBase *", 0, 0, 0, 0},{"XML::Xerces::HandlerBase", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMTypeInfo[] = {{"_p_XERCES_CPP_NAMESPACE__DOMTypeInfo", 0, "XERCES_CPP_NAMESPACE::DOMTypeInfo *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMTypeInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo[] = {{"_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo", 0, "XERCES_CPP_NAMESPACE::ComplexTypeInfo *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo", 0, 0, 0, 0, 0, 0},{"_p_ComplexTypeInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ComplexTypeInfo[] = {{"_p_ComplexTypeInfo", 0, "ComplexTypeInfo *", 0, 0, 0, 0},{"_p_ComplexTypeInfo", 0, 0, 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNode[] = {{"XML::Xerces::DOMNode", 0, "XERCES_CPP_NAMESPACE::DOMNode *", 0, 0, 0, 0},{"XML::Xerces::DOMAttr", _p_XERCES_CPP_NAMESPACE__DOMAttrTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMNotation", _p_XERCES_CPP_NAMESPACE__DOMNotationTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMText", _p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMDocumentFragment", _p_XERCES_CPP_NAMESPACE__DOMDocumentFragmentTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMCDATASection", _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMEntityReference", _p_XERCES_CPP_NAMESPACE__DOMEntityReferenceTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMEntity", _p_XERCES_CPP_NAMESPACE__DOMEntityTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMCharacterData", _p_XERCES_CPP_NAMESPACE__DOMCharacterDataTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMDocumentType", _p_XERCES_CPP_NAMESPACE__DOMDocumentTypeTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMComment", _p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMNode", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMDocument", _p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMElement", _p_XERCES_CPP_NAMESPACE__DOMElementTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{"XML::Xerces::DOMProcessingInstruction", _p_XERCES_CPP_NAMESPACE__DOMProcessingInstructionTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentRange[] = {{"XML::Xerces::DOMDocumentRange", 0, "XERCES_CPP_NAMESPACE::DOMDocumentRange *", 0, 0, 0, 0},{"XML::Xerces::DOMDocumentRange", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMDocument", _p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMDocumentRange, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLReaderFactory[] = {{"XML::Xerces::XMLReaderFactory", 0, "XERCES_CPP_NAMESPACE::XMLReaderFactory *", 0, 0, 0, 0},{"XML::Xerces::XMLReaderFactory", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DatatypeValidatorFactory[] = {{"_p_DatatypeValidatorFactory", 0, "DatatypeValidatorFactory *", 0, 0, 0, 0},{"_p_DatatypeValidatorFactory", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLMsgLoader[] = {{"_p_XERCES_CPP_NAMESPACE__XMLMsgLoader", 0, "XERCES_CPP_NAMESPACE::XMLMsgLoader *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLMsgLoader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t[] = {{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t", 0, "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *", 0, 0, 0, 0},{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment[] = {{"XML::Xerces::DOMDocumentFragment", 0, "XERCES_CPP_NAMESPACE::DOMDocumentFragment *", 0, 0, 0, 0},{"XML::Xerces::DOMDocumentFragment", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl[] = {{"XML::Xerces::XMLNotationDecl", 0, "XERCES_CPP_NAMESPACE::XMLNotationDecl *", 0, 0, 0, 0},{"XML::Xerces::XMLNotationDecl", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal[] = {{"XML::Xerces::DOMDocumentTraversal", 0, "XERCES_CPP_NAMESPACE::DOMDocumentTraversal *", 0, 0, 0, 0},{"XML::Xerces::DOMDocumentTraversal", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMDocument", _p_XERCES_CPP_NAMESPACE__DOMDocumentTo_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMRange[] = {{"XML::Xerces::DOMRange", 0, "XERCES_CPP_NAMESPACE::DOMRange *", 0, 0, 0, 0},{"XML::Xerces::DOMRange", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMTreeWalker[] = {{"XML::Xerces::DOMTreeWalker", 0, "XERCES_CPP_NAMESPACE::DOMTreeWalker *", 0, 0, 0, 0},{"XML::Xerces::DOMTreeWalker", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t[] = {{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t", 0, "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *", 0, 0, 0, 0},{"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__QName[] = {{"XML::Xerces::QName", 0, "XERCES_CPP_NAMESPACE::QName *", 0, 0, 0, 0},{"XML::Xerces::QName", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_XERCES_CPP_NAMESPACE__QName[] = {{"_p_p_XERCES_CPP_NAMESPACE__QName", 0, "XERCES_CPP_NAMESPACE::QName **", 0, 0, 0, 0},{"_p_p_XERCES_CPP_NAMESPACE__QName", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection[] = {{"XML::Xerces::DOMCDATASection", 0, "XERCES_CPP_NAMESPACE::DOMCDATASection *", 0, 0, 0, 0},{"XML::Xerces::DOMCDATASection", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t[] = {{"_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t", 0, "RefHash2KeysTableOf<ValueVectorOf<XERCES_CPP_NAMESPACE::SchemaElementDecl * > > *const|RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *const", 0, 0, 0, 0},{"_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMEntity[] = {{"XML::Xerces::DOMEntity", 0, "XERCES_CPP_NAMESPACE::DOMEntity *", 0, 0, 0, 0},{"XML::Xerces::DOMEntity", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLBufferMgr[] = {{"_p_XERCES_CPP_NAMESPACE__XMLBufferMgr", 0, "XERCES_CPP_NAMESPACE::XMLBufferMgr *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLBufferMgr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEntityResolver[] = {{"_p_XERCES_CPP_NAMESPACE__XMLEntityResolver", 0, "XERCES_CPP_NAMESPACE::XMLEntityResolver *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__XMLEntityResolver", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__GrammarResolver[] = {{"_p_XERCES_CPP_NAMESPACE__GrammarResolver", 0, "XERCES_CPP_NAMESPACE::GrammarResolver *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__GrammarResolver", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__EntityResolver[] = {{"XML::Xerces::EntityResolver", 0, "XERCES_CPP_NAMESPACE::EntityResolver *", 0, 0, 0, 0},{"XML::Xerces::EntityResolver", 0, 0, 0, 0, 0, 0},{"XML::Xerces::HandlerBase", _p_XERCES_CPP_NAMESPACE__HandlerBaseTo_p_XERCES_CPP_NAMESPACE__EntityResolver, 0, 0, 0, 0, 0},{"XML::Xerces::DefaultHandler", _p_XERCES_CPP_NAMESPACE__DefaultHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver, 0, 0, 0, 0, 0},{"XML::Xerces::PerlEntityResolverHandler", _p_PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Attributes[] = {{"XML::Xerces::Attributes", 0, "XERCES_CPP_NAMESPACE::Attributes *", 0, 0, 0, 0},{"XML::Xerces::Attributes", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMEntityResolver[] = {{"_p_XERCES_CPP_NAMESPACE__DOMEntityResolver", 0, "XERCES_CPP_NAMESPACE::DOMEntityResolver *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__DOMEntityResolver", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMBuilder[] = {{"XML::Xerces::DOMBuilder", 0, "XERCES_CPP_NAMESPACE::DOMBuilder *", 0, 0, 0, 0},{"XML::Xerces::DOMBuilder", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ReaderMgr[] = {{"_p_XERCES_CPP_NAMESPACE__ReaderMgr", 0, "XERCES_CPP_NAMESPACE::ReaderMgr *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__ReaderMgr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData[] = {{"XML::Xerces::DOMCharacterData", 0, "XERCES_CPP_NAMESPACE::DOMCharacterData *", 0, 0, 0, 0},{"XML::Xerces::DOMCharacterData", 0, 0, 0, 0, 0, 0},{"XML::Xerces::DOMText", _p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0, 0, 0, 0},{"XML::Xerces::DOMComment", _p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0, 0, 0, 0},{"XML::Xerces::DOMCDATASection", _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLUri[] = {{"XML::Xerces::XMLUri", 0, "XERCES_CPP_NAMESPACE::XMLUri *", 0, 0, 0, 0},{"XML::Xerces::XMLUri", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMAttr[] = {{"XML::Xerces::DOMAttr", 0, "XERCES_CPP_NAMESPACE::DOMAttr *", 0, 0, 0, 0},{"XML::Xerces::DOMAttr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType[] = {{"XML::Xerces::DOMDocumentType", 0, "XERCES_CPP_NAMESPACE::DOMDocumentType *", 0, 0, 0, 0},{"XML::Xerces::DOMDocumentType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SecurityManager[] = {{"_p_SecurityManager", 0, "SecurityManager *", 0, 0, 0, 0},{"_p_SecurityManager", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__MemoryManager[] = {{"_p_XERCES_CPP_NAMESPACE__MemoryManager", 0, "XERCES_CPP_NAMESPACE::MemoryManager *", 0, 0, 0, 0},{"_p_XERCES_CPP_NAMESPACE__MemoryManager", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMWriter[] = {{"XML::Xerces::DOMWriter", 0, "XERCES_CPP_NAMESPACE::DOMWriter *", 0, 0, 0, 0},{"XML::Xerces::DOMWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_void, 
_swigt__p_p_void, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNodeList, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 
_swigt__p_IdentityConstraint, 
_swigt__p_PSVIDefs__Complexity, 
_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel, 
_swigt__FileHandle, 
_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XSAnnotation, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNotation, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMText, 
_swigt__p_XMLBuffer, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMBuilderFilter, 
_swigt__p_DOMWriterFilter, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMWriterFilter, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__Base64, 
_swigt__p_PSVIDefs__PSVIScope, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLAttr, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLUni, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationLS, 
_swigt__p_XERCES_CPP_NAMESPACE__HexBin, 
_swigt__p_XSerializeEngine, 
_swigt__p_XERCES_CPP_NAMESPACE__DatatypeValidator, 
_swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator, 
_swigt__p_DatatypeValidator, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDValidator, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLValidator, 
_swigt__p_PSVIDefs__Validity, 
_swigt__p_unsigned_int, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMElement, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLExcepts, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMDocument, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMImplementation, 
_swigt__p_XERCES_CPP_NAMESPACE__SAX2XMLReader, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNodeFilter, 
_swigt__p_XERCES_CPP_NAMESPACE__SAXParser, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMConfiguration, 
_swigt__p_XERCES_CPP_NAMESPACE__XMemory, 
_swigt__p_ValueVectorOfTunsigned_int_t, 
_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLTranscoder, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLErrorReporter, 
_swigt__p_XMLErrorReporter, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference, 
_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMComment, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNodeIterator, 
_swigt__p_SV, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry, 
_swigt__p_XERCES_CPP_NAMESPACE__ContentSpecNode, 
_swigt__p_RefHash2KeysTableOfTSchemaAttDef_t, 
_swigt__p_RefHashTableOfTDTDAttDef_t, 
_swigt__p_XERCES_CPP_NAMESPACE__BinInputStream, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLScanner, 
_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__Parser, 
_swigt__p_XERCES_CPP_NAMESPACE__AbstractDOMParser, 
_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__XercesDOMParser, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 
_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar, 
_swigt__p_XERCES_CPP_NAMESPACE__Grammar, 
_swigt__p_ValidationContext, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef, 
_swigt__p_XMLAttDef, 
_swigt__p_DTDAttDef, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLURL, 
_swigt__p_size_t, 
_swigt__p_RefHashTableOfTXMLRefInfo_t, 
_swigt__p_XERCES_CPP_NAMESPACE__NamespaceScope, 
_swigt__p_XMLValid__Codes, 
_swigt__p_PSVIDefs__Validation, 
_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 
_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 
_swigt__p_int, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLFormatter, 
_swigt__p_XERCES_CPP_NAMESPACE__StdOutFormatTarget, 
_swigt__p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget, 
_swigt__p_XERCES_CPP_NAMESPACE__MemBufFormatTarget, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLFormatTarget, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarPool, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLMutex, 
_swigt__p_PanicHandler__PanicReasons, 
_swigt__p_XERCES_CPP_NAMESPACE__URLInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__LocalFileInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__StdInInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__MemBufInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__InputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLDeleter, 
_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList, 
_swigt__p_XMLAttDefList, 
_swigt__p_XERCES_CPP_NAMESPACE__Wrapper4InputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMImplementationSource, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__PSVIHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DefaultHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DocTypeHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DeclHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__LexicalHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__ContentHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__ErrorHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DocumentHandler, 
_swigt__p_PerlCallbackHandler, 
_swigt__p_PanicHandler, 
_swigt__p_bool, 
_swigt__p_XERCES_CPP_NAMESPACE__AttributeList, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMErrorHandler, 
_swigt__p_PerlErrorCallbackHandler, 
_swigt__p_PerlDocumentCallbackHandler, 
_swigt__p_PerlContentCallbackHandler, 
_swigt__p_PerlEntityResolverHandler, 
_swigt__p_PerlNodeFilterCallbackHandler, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, 
_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef, 
_swigt__p_SchemaAttDef, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMRangeException, 
_swigt__p_XERCES_CPP_NAMESPACE__SAXParseException, 
_swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, 
_swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMException, 
_swigt__p_XERCES_CPP_NAMESPACE__SAXException, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLException, 
_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__Locator, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMLocator, 
_swigt__p_XERCES_CPP_NAMESPACE__HandlerBase, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 
_swigt__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 
_swigt__p_ComplexTypeInfo, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMNode, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentRange, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLReaderFactory, 
_swigt__p_DatatypeValidatorFactory, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLMsgLoader, 
_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMRange, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMTreeWalker, 
_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t, 
_swigt__p_XERCES_CPP_NAMESPACE__QName, 
_swigt__p_p_XERCES_CPP_NAMESPACE__QName, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection, 
_swigt__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMEntity, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLBufferMgr, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 
_swigt__p_XERCES_CPP_NAMESPACE__GrammarResolver, 
_swigt__p_XERCES_CPP_NAMESPACE__EntityResolver, 
_swigt__p_XERCES_CPP_NAMESPACE__Attributes, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMEntityResolver, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMBuilder, 
_swigt__p_XERCES_CPP_NAMESPACE__ReaderMgr, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData, 
_swigt__p_XERCES_CPP_NAMESPACE__XMLUri, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMAttr, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType, 
_swigt__p_SecurityManager, 
_swigt__p_XERCES_CPP_NAMESPACE__MemoryManager, 
_swigt__p_XERCES_CPP_NAMESPACE__DOMWriter, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "XMLURL_File", (long) XERCES_CPP_NAMESPACE::XMLURL::File, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLURL_HTTP", (long) XERCES_CPP_NAMESPACE::XMLURL::HTTP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLURL_FTP", (long) XERCES_CPP_NAMESPACE::XMLURL::FTP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLURL_Protocols_Count", (long) XERCES_CPP_NAMESPACE::XMLURL::Protocols_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLURL_Unknown", (long) XERCES_CPP_NAMESPACE::XMLURL::Unknown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NoError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NoError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_W_LowBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::W_LowBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Scan_CouldNotOpenSource_Warning", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Scan_CouldNotOpenSource_Warning, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_GC_ExistingGrammar", (long) XERCES_CPP_NAMESPACE::XMLExcepts::GC_ExistingGrammar, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_W_HighBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::W_HighBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_F_LowBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::F_LowBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Array_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Array_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Array_BadNewSize", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Array_BadNewSize, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_AttrList_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::AttrList_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_AttDef_BadAttType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::AttDef_BadAttType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_AttDef_BadDefAttType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::AttDef_BadDefAttType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Bitset_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Bitset_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Bitset_NotEqualSize", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Bitset_NotEqualSize, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_BufMgr_NoMoreBuffers", (long) XERCES_CPP_NAMESPACE::XMLExcepts::BufMgr_NoMoreBuffers, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_BufMgr_BufferNotInPool", (long) XERCES_CPP_NAMESPACE::XMLExcepts::BufMgr_BufferNotInPool, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CPtr_PointerIsZero", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CPtr_PointerIsZero, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_BinOpHadUnaryType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_BinOpHadUnaryType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_MustBeMixedOrChildren", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_MustBeMixedOrChildren, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_NoPCDATAHere", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_NoPCDATAHere, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_NotValidForSpecType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_NotValidForSpecType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_UnaryOpHadBinType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnaryOpHadBinType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_UnknownCMType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnknownCMType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_UnknownCMSpecType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnknownCMSpecType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_NoParentCSN", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_NoParentCSN, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_CM_NotValidSpecTypeForNode", (long) XERCES_CPP_NAMESPACE::XMLExcepts::CM_NotValidSpecTypeForNode, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DTD_UnknownCreateReason", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DTD_UnknownCreateReason, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_ElemStack_EmptyStack", (long) XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_EmptyStack, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_ElemStack_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_ElemStack_StackUnderflow", (long) XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_StackUnderflow, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_ElemStack_NoParentPushed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_NoParentPushed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Enum_NoMoreElements", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Enum_NoMoreElements, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotOpenFile", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotOpenFile, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotGetCurPos", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetCurPos, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotCloseFile", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotCloseFile, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotSeekToEnd", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotSeekToEnd, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotSeekToPos", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotSeekToPos, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotDupHandle", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotDupHandle, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotReadFromFile", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotReadFromFile, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotWriteToFile", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotWriteToFile, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotResetFile", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotResetFile, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotGetSize", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetSize, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_CouldNotGetBasePathName", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetBasePathName, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_File_BasePathUnderflow", (long) XERCES_CPP_NAMESPACE::XMLExcepts::File_BasePathUnderflow, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_ParseInProgress", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_ParseInProgress, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_NoDTDValidator", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_NoDTDValidator, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_CouldNotOpenDTD", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_CouldNotOpenDTD, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_CouldNotOpenExtEntity", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_CouldNotOpenExtEntity, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_UnexpectedEOF", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_UnexpectedEOF, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_HshTbl_ZeroModulus", (long) XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_ZeroModulus, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_HshTbl_BadHashFromKey", (long) XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_BadHashFromKey, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_HshTbl_NoSuchKeyExists", (long) XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_NoSuchKeyExists, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Mutex_CouldNotCreate", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotCreate, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Mutex_CouldNotClose", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotClose, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Mutex_CouldNotLock", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotLock, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Mutex_CouldNotUnlock", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotUnlock, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Mutex_CouldNotDestroy", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotDestroy, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_InternalError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_InternalError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_LengthError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_LengthError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_InitFailed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_InitFailed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_TargetResolution", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_TargetResolution, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_CreateSocket", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_CreateSocket, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_ConnSocket", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_ConnSocket, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_WriteSocket", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_WriteSocket, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NetAcc_ReadSocket", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_ReadSocket, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Pool_ElemAlreadyExists", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Pool_ElemAlreadyExists, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Pool_BadHashFromKey", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Pool_BadHashFromKey, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Pool_InvalidId", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Pool_InvalidId, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Pool_ZeroModulus", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Pool_ZeroModulus, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_RdrMgr_ReaderIdNotFound", (long) XERCES_CPP_NAMESPACE::XMLExcepts::RdrMgr_ReaderIdNotFound, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Reader_BadAutoEncoding", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Reader_BadAutoEncoding, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Reader_CouldNotDecodeFirstLine", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Reader_CouldNotDecodeFirstLine, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Reader_EOIInMultiSeq", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Reader_EOIInMultiSeq, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Reader_SrcOfsNotSupported", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Reader_SrcOfsNotSupported, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Reader_EncodingStrRequired", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Reader_EncodingStrRequired, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Scan_CouldNotOpenSource", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Scan_CouldNotOpenSource, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Scan_UnbalancedStartEnd", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Scan_UnbalancedStartEnd, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Scan_BadPScanToken", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Scan_BadPScanToken, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Stack_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Stack_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Stack_EmptyStack", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Stack_EmptyStack, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Str_ZeroSizedTargetBuf", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Str_ZeroSizedTargetBuf, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Str_UnknownRadix", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Str_UnknownRadix, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Str_TargetBufTooSmall", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Str_TargetBufTooSmall, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Str_StartIndexPastEnd", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Str_StartIndexPastEnd, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Str_ConvertOverflow", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Str_ConvertOverflow, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Strm_StdErrWriteFailure", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Strm_StdErrWriteFailure, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Strm_StdOutWriteFailure", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Strm_StdOutWriteFailure, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Strm_ConWriteFailure", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Strm_ConWriteFailure, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_StrPool_IllegalId", (long) XERCES_CPP_NAMESPACE::XMLExcepts::StrPool_IllegalId, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_CouldNotCreateDefCvtr", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_CouldNotCreateDefCvtr, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_InvalidSizeReq", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_InvalidSizeReq, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_Unrepresentable", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_Unrepresentable, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_NotValidForEncoding", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_NotValidForEncoding, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_BadBlockSize", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadBlockSize, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_BadSrcSeq", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadSrcSeq, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_BadSrcCP", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadSrcCP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_BadTrailingSurrogate", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadTrailingSurrogate, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Trans_CantCreateCvtrFor", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Trans_CantCreateCvtrFor, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_MalformedURL", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_MalformedURL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_UnsupportedProto", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnsupportedProto, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_UnsupportedProto1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnsupportedProto1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_OnlyLocalHost", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_OnlyLocalHost, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_NoProtocolPresent", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_NoProtocolPresent, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_ExpectingTwoSlashes", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_ExpectingTwoSlashes, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_IncorrectEscapedCharRef", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_IncorrectEscapedCharRef, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_UnterminatedHostComponent", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnterminatedHostComponent, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_RelativeBaseURL", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_RelativeBaseURL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_BaseUnderflow", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_BaseUnderflow, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_URL_BadPortField", (long) XERCES_CPP_NAMESPACE::XMLExcepts::URL_BadPortField, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_UTF8_FormatError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_FormatError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Vector_BadIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Vector_BadIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Val_InvalidElemId", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Val_InvalidElemId, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Val_CantHaveIntSS", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Val_CantHaveIntSS, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLRec_UnknownEncoding", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLRec_UnknownEncoding, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Parse1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Parse1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Parse2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Parse2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Next1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Next2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Next3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Next4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Factor6", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor6, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Atom1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Atom2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Atom3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Atom4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Atom5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_CC6", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC6, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Ope1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Ope2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Ope3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Descape1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Descape2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Descape3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Descape4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Descape5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Process1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Process1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Process2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Process2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Quantifier1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Quantifier2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Quantifier3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Quantifier4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Parser_Quantifier5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Gen_NoSchemaValidator", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Gen_NoSchemaValidator, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XUTIL_UnCopyableNodeType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XUTIL_UnCopyableNodeType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_SubGrpComparator_NGR", (long) XERCES_CPP_NAMESPACE::XMLExcepts::SubGrpComparator_NGR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_Len", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_Len, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_maxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_maxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_minLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_minLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_NonNeg_Len", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_Len, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_NonNeg_maxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_maxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_NonNeg_minLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_minLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Len_maxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_maxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Len_minLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_minLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxLen_minLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_minLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_bool_Pattern", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_bool_Pattern, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_Tag", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_Tag, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Len_baseLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minLen_baseminLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_baseminLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minLen_basemaxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_basemaxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxLen_basemaxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_basemaxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxLen_baseminLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_baseminLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Len_baseMinLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseMinLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Len_baseMaxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseMaxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minLen_baseLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_baseLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxLen_baseLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_baseLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_enum_base", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_enum_base, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_WS", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_WS, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_WS_collapse", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_WS_collapse, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_WS_replace", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_WS_replace, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_MaxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MaxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_MaxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MaxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_MinIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MinIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_MinExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MinExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_TotalDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_TotalDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Invalid_FractDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_FractDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_PosInt_TotalDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_PosInt_TotalDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_NonNeg_FractDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_FractDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_max_Incl_Excl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_max_Incl_Excl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_min_Incl_Excl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_min_Incl_Excl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_TotDigit_FractDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_TotDigit_FractDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_maxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_maxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_maxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_maxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_maxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_maxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_maxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_maxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_base_maxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_maxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_base_maxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_maxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_base_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_base_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_base_maxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_maxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_base_maxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_maxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_base_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_base_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_notFromBase", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_notFromBase, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_notFromBase", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_notFromBase, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_notFromBase", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_notFromBase, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_notFromBase", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_notFromBase, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_totalDigit_base_totalDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_totalDigit_base_totalDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_totalDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_totalDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_fractDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_fractDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minIncl_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minExcl_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_totalDigit_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_totalDigit_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_maxLen_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_minLen_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_len_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_len_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_whitespace_base_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_whitespace_base_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_internalError_fixed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_internalError_fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_List_Null_baseValidator", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_List_Null_baseValidator, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Union_Null_memberTypeValidators", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_Null_memberTypeValidators, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Union_Null_baseValidator", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_Null_baseValidator, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_FACET_Union_invalid_baseValidatorType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_invalid_baseValidatorType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_NotMatch_Pattern", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NotMatch_Pattern, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_Not_Base64", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Not_Base64, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_Not_HexBin", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Not_HexBin, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_GT_maxLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_GT_maxLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_LT_minLen", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_LT_minLen, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_NE_Len", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NE_Len, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_NotIn_Enumeration", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NotIn_Enumeration, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_totalDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_totalDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_fractDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_fractDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_maxIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_maxIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_maxExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_maxExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_minIncl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_minIncl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_exceed_minExcl", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_minExcl, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_WS_replaced", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_WS_replaced, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_WS_collapsed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_WS_collapsed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_Invalid_NCName", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Invalid_NCName, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_Invalid_Name", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Invalid_Name, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_ID_Not_Unique", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_ID_Not_Unique, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_ENTITY_Invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_ENTITY_Invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_QName_Invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_QName_Invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_NOTATION_Invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NOTATION_Invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_no_match_memberType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_no_match_memberType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_VALUE_URI_Malformed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_URI_Malformed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_emptyString", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_emptyString, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_WSString", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_WSString, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_2ManyDecPoint", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_2ManyDecPoint, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_Inv_chars", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_Inv_chars, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_null_ptr", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_null_ptr, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Empty", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Empty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_for_GenURI_Only", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_for_GenURI_Only, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Invalid_EscapeSequence", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Invalid_EscapeSequence, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Invalid_Char", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Invalid_Char, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Set_Null", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Set_Null, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Not_Conformant", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Not_Conformant, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_No_Scheme", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_No_Scheme, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_NullHost", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_NullHost, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_NullPath", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_NullPath, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_inPath", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_inPath, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_URI_PortNo_Invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_PortNo_Invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_maxNeg", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_maxNeg, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_maxPos", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_maxPos, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_minNegPos", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_minNegPos, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_InvalidType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_InvalidType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_No_Exponent", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_No_Exponent, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_Result_Not_Set", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_Result_Not_Set, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_CompactRangesError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_CompactRangesError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_MergeRangesTypeMismatch", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_MergeRangesTypeMismatch, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_SubtractRangesError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_SubtractRangesError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_IntersectRangesError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_IntersectRangesError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_ComplementRangesInvalidArg", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_ComplementRangesInvalidArg, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_InvalidCategoryName", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidCategoryName, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_KeywordNotFound", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_KeywordNotFound, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_BadRefNo", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_BadRefNo, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_UnknownOption", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_UnknownOption, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_UnknownTokenType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_UnknownTokenType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_RangeTokenGetError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_RangeTokenGetError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_NotSupported", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_NotSupported, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_InvalidChildIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidChildIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_RepPatMatchesZeroString", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_RepPatMatchesZeroString, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Regex_InvalidRepPattern", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidRepPattern, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NEL_RepeatedCalls", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NEL_RepeatedCalls, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_RethrowError", (long) XERCES_CPP_NAMESPACE::XMLExcepts::RethrowError, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_Out_Of_Memory", (long) XERCES_CPP_NAMESPACE::XMLExcepts::Out_Of_Memory, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DV_InvalidOperation", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DV_InvalidOperation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoAttrSelector", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoAttrSelector, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoUnionAtStart", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoUnionAtStart, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoMultipleUnion", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoMultipleUnion, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_MissingAttr", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_MissingAttr, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_ExpectedToken1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedToken1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_PrefixNoURI", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_PrefixNoURI, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoDoubleColon", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoDoubleColon, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_ExpectedStep1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_ExpectedStep2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_ExpectedStep3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoForwardSlash", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoForwardSlash, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoDoubleForwardSlash", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoDoubleForwardSlash, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoForwardSlashAtStart", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoForwardSlashAtStart, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoSelectionOfRoot", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoSelectionOfRoot, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_EmptyExpr", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_EmptyExpr, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_NoUnionAtEnd", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoUnionAtEnd, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_InvalidChar", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_InvalidChar, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_TokenNotSupported", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_TokenNotSupported, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XPath_FindSolution", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XPath_FindSolution, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_Assert_Buffer_Fail", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_Assert_Buffer_Fail, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dt_missingT", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dt_missingT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_gDay_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gDay_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_gMth_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gMth_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_gMthDay_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gMthDay_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_Start_dashP", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_Start_dashP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_noP", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_noP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_DashNotFirst", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_DashNotFirst, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_inv_b4T", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_inv_b4T, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_NoTimeAfterT", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_NoTimeAfterT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_NoElementAtAll", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_NoElementAtAll, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_dur_inv_seconds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_inv_seconds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_date_incomplete", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_date_incomplete, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_date_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_date_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_time_incomplete", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_time_incomplete, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_time_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_time_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_ms_noDigit", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ms_noDigit, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_ym_incomplete", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_incomplete, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_ym_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_year_tooShort", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_tooShort, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_year_leadingZero", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_leadingZero, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_ym_noMonth", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_noMonth, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_tz_noUTCsign", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_noUTCsign, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_tz_stuffAfterZ", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_stuffAfterZ, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_tz_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_year_zero", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_zero, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_mth_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_mth_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_day_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_day_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_hour_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_hour_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_min_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_min_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_second_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_second_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_DateTime_tz_hh_invalid", (long) XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_hh_invalid, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_EmptyBase", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_EmptyBase, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NSCompat1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSCompat1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_OccurRangeE", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_OccurRangeE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK5", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK6", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK6, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NameTypeOK7", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK7, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_RecurseAsIfGroup", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_RecurseAsIfGroup, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_Recurse1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_Recurse1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_Recurse2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_Recurse2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_ForbiddenRes1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_ForbiddenRes2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_ForbiddenRes3", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_ForbiddenRes4", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NSSubset1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSSubset1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NSSubset2", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSSubset2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_NSRecurseCheckCardinality1", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSRecurseCheckCardinality1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_RecurseUnordered", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_RecurseUnordered, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_MapAndSum", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_MapAndSum, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_PD_InvalidContentType", (long) XERCES_CPP_NAMESPACE::XMLExcepts::PD_InvalidContentType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_NodeIDMap_GrowErr", (long) XERCES_CPP_NAMESPACE::XMLExcepts::NodeIDMap_GrowErr, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_ProtoType_Null_ClassName", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_Null_ClassName, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_ProtoType_NameLen_Dif", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_NameLen_Dif, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_ProtoType_Name_Dif", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_Name_Dif, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_InStream_Read_LT_Req", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_InStream_Read_LT_Req, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_InStream_Read_OverFlow", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_InStream_Read_OverFlow, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Storing_Violation", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Storing_Violation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_StoreBuffer_Violation", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_StoreBuffer_Violation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_LoadPool_UppBnd_Exceed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadPool_UppBnd_Exceed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_LoadPool_NoTally_ObjCnt", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadPool_NoTally_ObjCnt, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Loading_Violation", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Loading_Violation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_LoadBuffer_Violation", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadBuffer_Violation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_ClassIndex", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_ClassIndex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_FillBuffer_Size", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_FillBuffer_Size, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_checkFillBuffer_Size", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_checkFillBuffer_Size, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_checkFlushBuffer_Size", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_checkFlushBuffer_Size, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_Null_Pointer", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_Null_Pointer, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_Inv_Buffer_Len", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_Buffer_Len, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_CreateObject_Fail", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_CreateObject_Fail, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_ObjCount_UppBnd_Exceed", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ObjCount_UppBnd_Exceed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_GrammarPool_Locked", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_Locked, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_GrammarPool_Empty", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_Empty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_GrammarPool_NotEmpty", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_NotEmpty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_StringPool_NotEmpty", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_StringPool_NotEmpty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_XSer_BinaryData_Version_NotSupported", (long) XERCES_CPP_NAMESPACE::XMLExcepts::XSer_BinaryData_Version_NotSupported, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_F_HighBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::F_HighBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_E_LowBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::E_LowBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLExcepts_E_HighBounds", (long) XERCES_CPP_NAMESPACE::XMLExcepts::E_HighBounds, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_NoReason", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::NoReason, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_Declared", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::Declared, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_AttList", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::AttList, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_InContentModel", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::InContentModel, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_AsRootElem", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::AsRootElem, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_JustFaultIn", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::JustFaultIn, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_AddIfNotFound", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::AddIfNotFound, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_FailIfNotFound", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::FailIfNotFound, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_NoCharData", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::NoCharData, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_SpacesOk", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::SpacesOk, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_AllCharData", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::AllCharData, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_Schema", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::Schema, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_DTD", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::DTD, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLElementDecl_UnKnown", (long) XERCES_CPP_NAMESPACE::XMLElementDecl::UnKnown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_CData", (long) XERCES_CPP_NAMESPACE::XMLAttDef::CData, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_ID", (long) XERCES_CPP_NAMESPACE::XMLAttDef::ID, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_IDRef", (long) XERCES_CPP_NAMESPACE::XMLAttDef::IDRef, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_IDRefs", (long) XERCES_CPP_NAMESPACE::XMLAttDef::IDRefs, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Entity", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Entity, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Entities", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Entities, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_NmToken", (long) XERCES_CPP_NAMESPACE::XMLAttDef::NmToken, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_NmTokens", (long) XERCES_CPP_NAMESPACE::XMLAttDef::NmTokens, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Notation", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Notation, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Enumeration", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Enumeration, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Simple", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Simple, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Any_Any", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Any_Any, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Any_Other", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Any_Other, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Any_List", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Any_List, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_AttTypes_Count", (long) XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_AttTypes_Min", (long) XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Min, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_AttTypes_Max", (long) XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Max, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_AttTypes_Unknown", (long) XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Unknown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Default", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Default, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Fixed", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Required", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Required, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Required_And_Fixed", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Required_And_Fixed, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Implied", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Implied, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_ProcessContents_Skip", (long) XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Skip, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_ProcessContents_Lax", (long) XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Lax, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_ProcessContents_Strict", (long) XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Strict, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_Prohibited", (long) XERCES_CPP_NAMESPACE::XMLAttDef::Prohibited, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_DefAttTypes_Count", (long) XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_DefAttTypes_Min", (long) XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Min, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_DefAttTypes_Max", (long) XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Max, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_DefAttTypes_Unknown", (long) XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Unknown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_NoReason", (long) XERCES_CPP_NAMESPACE::XMLAttDef::NoReason, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLAttDef_JustFaultIn", (long) XERCES_CPP_NAMESPACE::XMLAttDef::JustFaultIn, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Grammar_DTDGrammarType", (long) XERCES_CPP_NAMESPACE::Grammar::DTDGrammarType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Grammar_SchemaGrammarType", (long) XERCES_CPP_NAMESPACE::Grammar::SchemaGrammarType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Grammar_UnKnown", (long) XERCES_CPP_NAMESPACE::Grammar::UnKnown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Grammar_UNKNOWN_SCOPE", (long) XERCES_CPP_NAMESPACE::Grammar::UNKNOWN_SCOPE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Grammar_TOP_LEVEL_SCOPE", (long) XERCES_CPP_NAMESPACE::Grammar::TOP_LEVEL_SCOPE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DTDElementDecl_Empty", (long) XERCES_CPP_NAMESPACE::DTDElementDecl::Empty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DTDElementDecl_Any", (long) XERCES_CPP_NAMESPACE::DTDElementDecl::Any, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DTDElementDecl_Mixed_Simple", (long) XERCES_CPP_NAMESPACE::DTDElementDecl::Mixed_Simple, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DTDElementDecl_Children", (long) XERCES_CPP_NAMESPACE::DTDElementDecl::Children, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DTDElementDecl_ModelTypes_Count", (long) XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Empty", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Empty, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Any", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Any, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Mixed_Simple", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Mixed_Simple, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Mixed_Complex", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Mixed_Complex, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Children", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Children, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_Simple", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::Simple, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SchemaElementDecl_ModelTypes_Count", (long) XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_NoEscapes", (long) XERCES_CPP_NAMESPACE::XMLFormatter::NoEscapes, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_StdEscapes", (long) XERCES_CPP_NAMESPACE::XMLFormatter::StdEscapes, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_AttrEscapes", (long) XERCES_CPP_NAMESPACE::XMLFormatter::AttrEscapes, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_CharEscapes", (long) XERCES_CPP_NAMESPACE::XMLFormatter::CharEscapes, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_EscapeFlags_Count", (long) XERCES_CPP_NAMESPACE::XMLFormatter::EscapeFlags_Count, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_DefaultEscape", (long) XERCES_CPP_NAMESPACE::XMLFormatter::DefaultEscape, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_UnRep_Fail", (long) XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Fail, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_UnRep_CharRef", (long) XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_CharRef, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_UnRep_Replace", (long) XERCES_CPP_NAMESPACE::XMLFormatter::UnRep_Replace, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLFormatter_DefaultUnRep", (long) XERCES_CPP_NAMESPACE::XMLFormatter::DefaultUnRep, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLErrorReporter_ErrType_Warning", (long) XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrType_Warning, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLErrorReporter_ErrType_Error", (long) XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrType_Error, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLErrorReporter_ErrType_Fatal", (long) XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrType_Fatal, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "XMLErrorReporter_ErrTypes_Unknown", (long) XERCES_CPP_NAMESPACE::XMLErrorReporter::ErrTypes_Unknown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAX2XMLReader_Val_Never", (long) XERCES_CPP_NAMESPACE::SAX2XMLReader::Val_Never, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAX2XMLReader_Val_Always", (long) XERCES_CPP_NAMESPACE::SAX2XMLReader::Val_Always, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAX2XMLReader_Val_Auto", (long) XERCES_CPP_NAMESPACE::SAX2XMLReader::Val_Auto, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAXParser_Val_Never", (long) XERCES_CPP_NAMESPACE::SAXParser::Val_Never, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAXParser_Val_Always", (long) XERCES_CPP_NAMESPACE::SAXParser::Val_Always, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SAXParser_Val_Auto", (long) XERCES_CPP_NAMESPACE::SAXParser::Val_Auto, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INDEX_SIZE_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INDEX_SIZE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_DOMSTRING_SIZE_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::DOMSTRING_SIZE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_HIERARCHY_REQUEST_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::HIERARCHY_REQUEST_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_WRONG_DOCUMENT_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::WRONG_DOCUMENT_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INVALID_CHARACTER_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INVALID_CHARACTER_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_NO_DATA_ALLOWED_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::NO_DATA_ALLOWED_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_NO_MODIFICATION_ALLOWED_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::NO_MODIFICATION_ALLOWED_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_NOT_FOUND_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::NOT_FOUND_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_NOT_SUPPORTED_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::NOT_SUPPORTED_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INUSE_ATTRIBUTE_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INUSE_ATTRIBUTE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INVALID_STATE_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INVALID_STATE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_SYNTAX_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::SYNTAX_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INVALID_MODIFICATION_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INVALID_MODIFICATION_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_NAMESPACE_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::NAMESPACE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_INVALID_ACCESS_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::INVALID_ACCESS_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMException_VALIDATION_ERR", (long) XERCES_CPP_NAMESPACE::DOMException::VALIDATION_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_FILTER_ACCEPT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::FILTER_ACCEPT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_FILTER_REJECT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::FILTER_REJECT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_FILTER_SKIP", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::FILTER_SKIP, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_ALL", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_ALL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_ELEMENT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_ELEMENT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_ATTRIBUTE", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_ATTRIBUTE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_TEXT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_TEXT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_CDATA_SECTION", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_CDATA_SECTION, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_ENTITY_REFERENCE", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_ENTITY_REFERENCE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_ENTITY", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_ENTITY, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_PROCESSING_INSTRUCTION", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_PROCESSING_INSTRUCTION, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_COMMENT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_COMMENT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_DOCUMENT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_DOCUMENT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_DOCUMENT_TYPE", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_DOCUMENT_TYPE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_DOCUMENT_FRAGMENT", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_DOCUMENT_FRAGMENT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNodeFilter_SHOW_NOTATION", (long) XERCES_CPP_NAMESPACE::DOMNodeFilter::SHOW_NOTATION, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRange_START_TO_START", (long) XERCES_CPP_NAMESPACE::DOMRange::START_TO_START, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRange_START_TO_END", (long) XERCES_CPP_NAMESPACE::DOMRange::START_TO_END, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRange_END_TO_END", (long) XERCES_CPP_NAMESPACE::DOMRange::END_TO_END, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRange_END_TO_START", (long) XERCES_CPP_NAMESPACE::DOMRange::END_TO_START, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRangeException_BAD_BOUNDARYPOINTS_ERR", (long) XERCES_CPP_NAMESPACE::DOMRangeException::BAD_BOUNDARYPOINTS_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMRangeException_INVALID_NODE_TYPE_ERR", (long) XERCES_CPP_NAMESPACE::DOMRangeException::INVALID_NODE_TYPE_ERR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_ELEMENT_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::ELEMENT_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_ATTRIBUTE_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::ATTRIBUTE_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TEXT_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::TEXT_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_CDATA_SECTION_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::CDATA_SECTION_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_ENTITY_REFERENCE_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::ENTITY_REFERENCE_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_ENTITY_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::ENTITY_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_PROCESSING_INSTRUCTION_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::PROCESSING_INSTRUCTION_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_COMMENT_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::COMMENT_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_DOCUMENT_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_DOCUMENT_TYPE_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_TYPE_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_DOCUMENT_FRAGMENT_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_FRAGMENT_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_NOTATION_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::NOTATION_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_PRECEDING", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_PRECEDING, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_FOLLOWING", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_FOLLOWING, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_ANCESTOR", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_ANCESTOR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_DESCENDANT", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_DESCENDANT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_EQUIVALENT", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_EQUIVALENT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_SAME_NODE", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_SAME_NODE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMNode_TREE_POSITION_DISCONNECTED", (long) XERCES_CPP_NAMESPACE::DOMNode::TREE_POSITION_DISCONNECTED, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMImplementationLS_MODE_SYNCHRONOUS", (long) XERCES_CPP_NAMESPACE::DOMImplementationLS::MODE_SYNCHRONOUS, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMImplementationLS_MODE_ASYNCHRONOUS", (long) XERCES_CPP_NAMESPACE::DOMImplementationLS::MODE_ASYNCHRONOUS, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMBuilder_ACTION_REPLACE", (long) XERCES_CPP_NAMESPACE::DOMBuilder::ACTION_REPLACE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMBuilder_ACTION_APPEND_AS_CHILDREN", (long) XERCES_CPP_NAMESPACE::DOMBuilder::ACTION_APPEND_AS_CHILDREN, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMBuilder_ACTION_INSERT_AFTER", (long) XERCES_CPP_NAMESPACE::DOMBuilder::ACTION_INSERT_AFTER, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "DOMBuilder_ACTION_INSERT_BEFORE", (long) XERCES_CPP_NAMESPACE::DOMBuilder::ACTION_INSERT_BEFORE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "AbstractDOMParser_Val_Never", (long) XERCES_CPP_NAMESPACE::AbstractDOMParser::Val_Never, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "AbstractDOMParser_Val_Always", (long) XERCES_CPP_NAMESPACE::AbstractDOMParser::Val_Always, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "AbstractDOMParser_Val_Auto", (long) XERCES_CPP_NAMESPACE::AbstractDOMParser::Val_Auto, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_BASE_TYPE", (long) -1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_ERROR_TYPE", (long) 0, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_ENTITY_TYPE", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_NODE_TYPE", (long) 2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_CONTENT_TYPE", (long) 3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PERLCALLBACKHANDLER_DOCUMENT_TYPE", (long) 4, 0, 0, 0},
{0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "XML::Xercesc::DEBUG_UTF8_OUT", MAGIC_CLASS _wrap_set_DEBUG_UTF8_OUT, MAGIC_CLASS _wrap_val_DEBUG_UTF8_OUT,0 },
    { "XML::Xercesc::DEBUG_UTF8_IN", MAGIC_CLASS _wrap_set_DEBUG_UTF8_IN, MAGIC_CLASS _wrap_val_DEBUG_UTF8_IN,0 },
    { "XML::Xercesc::XMLPlatformUtils_fgArrayMemoryManager", MAGIC_CLASS _wrap_set_XMLPlatformUtils_fgArrayMemoryManager, MAGIC_CLASS _wrap_val_XMLPlatformUtils_fgArrayMemoryManager,&SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager },
    { "XML::Xercesc::XMLPlatformUtils_fgAtomicMutex", MAGIC_CLASS _wrap_set_XMLPlatformUtils_fgAtomicMutex, MAGIC_CLASS _wrap_val_XMLPlatformUtils_fgAtomicMutex,&SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLMutex },
    { "XML::Xercesc::XMLElementDecl_fgInvalidElemId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLElementDecl_fgInvalidElemId,0 },
    { "XML::Xercesc::XMLElementDecl_fgPCDataElemId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLElementDecl_fgPCDataElemId,0 },
    { "XML::Xercesc::XMLElementDecl_fgPCDataElemName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLElementDecl_fgPCDataElemName,0 },
    { "XML::Xercesc::XMLAttDef_fgInvalidAttrId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLAttDef_fgInvalidAttrId,0 },
    { "XML::Xercesc::XMLUni_fgAnyString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgAnyString,0 },
    { "XML::Xercesc::XMLUni_fgAttListString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgAttListString,0 },
    { "XML::Xercesc::XMLUni_fgCommentString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgCommentString,0 },
    { "XML::Xercesc::XMLUni_fgCDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgCDATAString,0 },
    { "XML::Xercesc::XMLUni_fgDefaultString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDefaultString,0 },
    { "XML::Xercesc::XMLUni_fgDocTypeString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDocTypeString,0 },
    { "XML::Xercesc::XMLUni_fgEBCDICEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEBCDICEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgElemString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgElemString,0 },
    { "XML::Xercesc::XMLUni_fgEmptyString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEmptyString,0 },
    { "XML::Xercesc::XMLUni_fgEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgEntitString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEntitString,0 },
    { "XML::Xercesc::XMLUni_fgEntityString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEntityString,0 },
    { "XML::Xercesc::XMLUni_fgEntitiesString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEntitiesString,0 },
    { "XML::Xercesc::XMLUni_fgEnumerationString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEnumerationString,0 },
    { "XML::Xercesc::XMLUni_fgExceptDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgExceptDomain,0 },
    { "XML::Xercesc::XMLUni_fgFixedString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgFixedString,0 },
    { "XML::Xercesc::XMLUni_fgIBM037EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM037EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgIBM037EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM037EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgIBM1047EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1047EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgIBM1047EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1047EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1140EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1140EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1140EncodingString3,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIBM1140EncodingString4,0 },
    { "XML::Xercesc::XMLUni_fgIESString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIESString,0 },
    { "XML::Xercesc::XMLUni_fgIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIDString,0 },
    { "XML::Xercesc::XMLUni_fgIDRefString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIDRefString,0 },
    { "XML::Xercesc::XMLUni_fgIDRefsString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIDRefsString,0 },
    { "XML::Xercesc::XMLUni_fgImpliedString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgImpliedString,0 },
    { "XML::Xercesc::XMLUni_fgIgnoreString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIgnoreString,0 },
    { "XML::Xercesc::XMLUni_fgIncludeString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIncludeString,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString3,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString4,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString5", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString5,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString6", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString6,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString7", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString7,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString8", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString8,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString9", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString9,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString10", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString10,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString11", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString11,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString12", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgISO88591EncodingString12,0 },
    { "XML::Xercesc::XMLUni_fgLocalHostString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgLocalHostString,0 },
    { "XML::Xercesc::XMLUni_fgNoString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNoString,0 },
    { "XML::Xercesc::XMLUni_fgNotationString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNotationString,0 },
    { "XML::Xercesc::XMLUni_fgNDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNDATAString,0 },
    { "XML::Xercesc::XMLUni_fgNmTokenString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNmTokenString,0 },
    { "XML::Xercesc::XMLUni_fgNmTokensString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNmTokensString,0 },
    { "XML::Xercesc::XMLUni_fgPCDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgPCDATAString,0 },
    { "XML::Xercesc::XMLUni_fgPIString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgPIString,0 },
    { "XML::Xercesc::XMLUni_fgPubIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgPubIDString,0 },
    { "XML::Xercesc::XMLUni_fgRefString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgRefString,0 },
    { "XML::Xercesc::XMLUni_fgRequiredString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgRequiredString,0 },
    { "XML::Xercesc::XMLUni_fgStandaloneString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgStandaloneString,0 },
    { "XML::Xercesc::XMLUni_fgVersion1_0", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgVersion1_0,0 },
    { "XML::Xercesc::XMLUni_fgVersion1_1", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgVersion1_1,0 },
    { "XML::Xercesc::XMLUni_fgSysIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSysIDString,0 },
    { "XML::Xercesc::XMLUni_fgUnknownURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUnknownURIName,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4EncodingString3,0 },
    { "XML::Xercesc::XMLUni_fgUCS4BEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4BEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUCS4BEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4BEncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUCS4LEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4LEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUCS4LEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUCS4LEncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUSASCIIEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUSASCIIEncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUSASCIIEncodingString3,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUSASCIIEncodingString4,0 },
    { "XML::Xercesc::XMLUni_fgUTF8EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF8EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUTF8EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF8EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16EncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16EncodingString3,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16EncodingString4,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString5", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16EncodingString5,0 },
    { "XML::Xercesc::XMLUni_fgUTF16BEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16BEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUTF16BEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16BEncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgUTF16LEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16LEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgUTF16LEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTF16LEncodingString2,0 },
    { "XML::Xercesc::XMLUni_fgVersionString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgVersionString,0 },
    { "XML::Xercesc::XMLUni_fgValidityDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgValidityDomain,0 },
    { "XML::Xercesc::XMLUni_fgWin1252EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgWin1252EncodingString,0 },
    { "XML::Xercesc::XMLUni_fgXMLChEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLChEncodingString,0 },
    { "XML::Xercesc::XMLUni_fgXMLDOMMsgDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDOMMsgDomain,0 },
    { "XML::Xercesc::XMLUni_fgXMLString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLString,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringSpace,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringHTab", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringHTab,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringCR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringCR,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringLF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringLF,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringSpaceU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringSpaceU,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringHTabU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringHTabU,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringCRU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringCRU,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringLFU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLStringLFU,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclString,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringSpace,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringHTab", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringHTab,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringLF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringLF,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringCR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringCR,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringSpaceU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringSpaceU,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringHTabU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringHTabU,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringLFU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringLFU,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringCRU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLDeclStringCRU,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLNSString,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSColonString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLNSColonString,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLNSURIName,0 },
    { "XML::Xercesc::XMLUni_fgXMLErrDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLErrDomain,0 },
    { "XML::Xercesc::XMLUni_fgXMLURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLURIName,0 },
    { "XML::Xercesc::XMLUni_fgYesString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgYesString,0 },
    { "XML::Xercesc::XMLUni_fgZeroLenString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgZeroLenString,0 },
    { "XML::Xercesc::XMLUni_fgDTDEntityString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDTDEntityString,0 },
    { "XML::Xercesc::XMLUni_fgAmp", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgAmp,0 },
    { "XML::Xercesc::XMLUni_fgLT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgLT,0 },
    { "XML::Xercesc::XMLUni_fgGT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgGT,0 },
    { "XML::Xercesc::XMLUni_fgQuot", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgQuot,0 },
    { "XML::Xercesc::XMLUni_fgApos", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgApos,0 },
    { "XML::Xercesc::XMLUni_fgWFXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgWFXMLScanner,0 },
    { "XML::Xercesc::XMLUni_fgIGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIGXMLScanner,0 },
    { "XML::Xercesc::XMLUni_fgSGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSGXMLScanner,0 },
    { "XML::Xercesc::XMLUni_fgDGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDGXMLScanner,0 },
    { "XML::Xercesc::XMLUni_fgCDataStart", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgCDataStart,0 },
    { "XML::Xercesc::XMLUni_fgCDataEnd", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgCDataEnd,0 },
    { "XML::Xercesc::XMLUni_fgArrayIndexOutOfBoundsException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgArrayIndexOutOfBoundsException_Name,0 },
    { "XML::Xercesc::XMLUni_fgEmptyStackException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEmptyStackException_Name,0 },
    { "XML::Xercesc::XMLUni_fgIllegalArgumentException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIllegalArgumentException_Name,0 },
    { "XML::Xercesc::XMLUni_fgInvalidCastException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgInvalidCastException_Name,0 },
    { "XML::Xercesc::XMLUni_fgIOException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgIOException_Name,0 },
    { "XML::Xercesc::XMLUni_fgNoSuchElementException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNoSuchElementException_Name,0 },
    { "XML::Xercesc::XMLUni_fgNullPointerException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNullPointerException_Name,0 },
    { "XML::Xercesc::XMLUni_fgXMLPlatformUtilsException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXMLPlatformUtilsException_Name,0 },
    { "XML::Xercesc::XMLUni_fgRuntimeException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgRuntimeException_Name,0 },
    { "XML::Xercesc::XMLUni_fgTranscodingException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgTranscodingException_Name,0 },
    { "XML::Xercesc::XMLUni_fgUnexpectedEOFException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUnexpectedEOFException_Name,0 },
    { "XML::Xercesc::XMLUni_fgUnsupportedEncodingException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUnsupportedEncodingException_Name,0 },
    { "XML::Xercesc::XMLUni_fgUTFDataFormatException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgUTFDataFormatException_Name,0 },
    { "XML::Xercesc::XMLUni_fgNetAccessorException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNetAccessorException_Name,0 },
    { "XML::Xercesc::XMLUni_fgMalformedURLException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgMalformedURLException_Name,0 },
    { "XML::Xercesc::XMLUni_fgNumberFormatException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNumberFormatException_Name,0 },
    { "XML::Xercesc::XMLUni_fgParseException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgParseException_Name,0 },
    { "XML::Xercesc::XMLUni_fgInvalidDatatypeFacetException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgInvalidDatatypeFacetException_Name,0 },
    { "XML::Xercesc::XMLUni_fgInvalidDatatypeValueException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgInvalidDatatypeValueException_Name,0 },
    { "XML::Xercesc::XMLUni_fgSchemaDateTimeException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSchemaDateTimeException_Name,0 },
    { "XML::Xercesc::XMLUni_fgXPathException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXPathException_Name,0 },
    { "XML::Xercesc::XMLUni_fgXSerializationException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXSerializationException_Name,0 },
    { "XML::Xercesc::XMLUni_fgNegINFString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNegINFString,0 },
    { "XML::Xercesc::XMLUni_fgNegZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNegZeroString,0 },
    { "XML::Xercesc::XMLUni_fgPosZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgPosZeroString,0 },
    { "XML::Xercesc::XMLUni_fgPosINFString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgPosINFString,0 },
    { "XML::Xercesc::XMLUni_fgNaNString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNaNString,0 },
    { "XML::Xercesc::XMLUni_fgEString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgEString,0 },
    { "XML::Xercesc::XMLUni_fgZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgZeroString,0 },
    { "XML::Xercesc::XMLUni_fgNullString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgNullString,0 },
    { "XML::Xercesc::XMLUni_fgXercesDynamic", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesDynamic,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesSchema,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaFullChecking", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesSchemaFullChecking,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaExternalSchemaLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesSchemaExternalSchemaLocation,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation,0 },
    { "XML::Xercesc::XMLUni_fgXercesSecurityManager", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesSecurityManager,0 },
    { "XML::Xercesc::XMLUni_fgXercesLoadExternalDTD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesLoadExternalDTD,0 },
    { "XML::Xercesc::XMLUni_fgXercesContinueAfterFatalError", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesContinueAfterFatalError,0 },
    { "XML::Xercesc::XMLUni_fgXercesValidationErrorAsFatal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesValidationErrorAsFatal,0 },
    { "XML::Xercesc::XMLUni_fgXercesUserAdoptsDOMDocument", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesUserAdoptsDOMDocument,0 },
    { "XML::Xercesc::XMLUni_fgXercesCacheGrammarFromParse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesCacheGrammarFromParse,0 },
    { "XML::Xercesc::XMLUni_fgXercesUseCachedGrammarInParse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesUseCachedGrammarInParse,0 },
    { "XML::Xercesc::XMLUni_fgXercesScannerName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesScannerName,0 },
    { "XML::Xercesc::XMLUni_fgXercesParserUseDocumentFromImplementation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesParserUseDocumentFromImplementation,0 },
    { "XML::Xercesc::XMLUni_fgXercesCalculateSrcOfs", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesCalculateSrcOfs,0 },
    { "XML::Xercesc::XMLUni_fgXercesStandardUriConformant", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercesStandardUriConformant,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSAX2CoreValidation,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreNameSpaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSAX2CoreNameSpaces,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreNameSpacePrefixes", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgSAX2CoreNameSpacePrefixes,0 },
    { "XML::Xercesc::XMLUni_fgDOMCanonicalForm", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMCanonicalForm,0 },
    { "XML::Xercesc::XMLUni_fgDOMCDATASections", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMCDATASections,0 },
    { "XML::Xercesc::XMLUni_fgDOMComments", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMComments,0 },
    { "XML::Xercesc::XMLUni_fgDOMCharsetOverridesXMLEncoding", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMCharsetOverridesXMLEncoding,0 },
    { "XML::Xercesc::XMLUni_fgDOMDatatypeNormalization", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMDatatypeNormalization,0 },
    { "XML::Xercesc::XMLUni_fgDOMEntities", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMEntities,0 },
    { "XML::Xercesc::XMLUni_fgDOMInfoset", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMInfoset,0 },
    { "XML::Xercesc::XMLUni_fgDOMNamespaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMNamespaces,0 },
    { "XML::Xercesc::XMLUni_fgDOMNamespaceDeclarations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMNamespaceDeclarations,0 },
    { "XML::Xercesc::XMLUni_fgDOMSupportedMediatypesOnly", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMSupportedMediatypesOnly,0 },
    { "XML::Xercesc::XMLUni_fgDOMValidateIfSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMValidateIfSchema,0 },
    { "XML::Xercesc::XMLUni_fgDOMValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMValidation,0 },
    { "XML::Xercesc::XMLUni_fgDOMWhitespaceInElementContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWhitespaceInElementContent,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTCanonicalForm", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTCanonicalForm,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTDiscardDefaultContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTDiscardDefaultContent,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTEntities", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTEntities,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTFormatPrettyPrint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTFormatPrettyPrint,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTNormalizeCharacters", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTNormalizeCharacters,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTSplitCdataSections", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTSplitCdataSections,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTValidation,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTWhitespaceInElementContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTWhitespaceInElementContent,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTBOM", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMWRTBOM,0 },
    { "XML::Xercesc::XMLUni_fgDOMXMLDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgDOMXMLDeclaration,0 },
    { "XML::Xercesc::XMLUni_fgXercescDefaultLocale", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_XMLUni_fgXercescDefaultLocale,0 },
{0}
};
static swig_command_info swig_commands[] = {
{"XML::Xercesc::delete_XMLDeleter", _wrap_delete_XMLDeleter},
{"XML::Xercesc::XMLPlatformUtils_Initialize", _wrap_XMLPlatformUtils_Initialize},
{"XML::Xercesc::XMLPlatformUtils_Terminate", _wrap_XMLPlatformUtils_Terminate},
{"XML::Xercesc::XMLPlatformUtils_panic", _wrap_XMLPlatformUtils_panic},
{"XML::Xercesc::XMLPlatformUtils_curFilePos", _wrap_XMLPlatformUtils_curFilePos},
{"XML::Xercesc::XMLPlatformUtils_closeFile", _wrap_XMLPlatformUtils_closeFile},
{"XML::Xercesc::XMLPlatformUtils_fileSize", _wrap_XMLPlatformUtils_fileSize},
{"XML::Xercesc::XMLPlatformUtils_openFile", _wrap_XMLPlatformUtils_openFile},
{"XML::Xercesc::XMLPlatformUtils_openFileToWrite", _wrap_XMLPlatformUtils_openFileToWrite},
{"XML::Xercesc::XMLPlatformUtils_openStdInHandle", _wrap_XMLPlatformUtils_openStdInHandle},
{"XML::Xercesc::XMLPlatformUtils_readFileBuffer", _wrap_XMLPlatformUtils_readFileBuffer},
{"XML::Xercesc::XMLPlatformUtils_writeBufferToFile", _wrap_XMLPlatformUtils_writeBufferToFile},
{"XML::Xercesc::XMLPlatformUtils_resetFile", _wrap_XMLPlatformUtils_resetFile},
{"XML::Xercesc::XMLPlatformUtils_getFullPath", _wrap_XMLPlatformUtils_getFullPath},
{"XML::Xercesc::XMLPlatformUtils_getCurrentDirectory", _wrap_XMLPlatformUtils_getCurrentDirectory},
{"XML::Xercesc::XMLPlatformUtils_removeDotSlash", _wrap_XMLPlatformUtils_removeDotSlash},
{"XML::Xercesc::XMLPlatformUtils_removeDotDotSlash", _wrap_XMLPlatformUtils_removeDotDotSlash},
{"XML::Xercesc::XMLPlatformUtils_isRelative", _wrap_XMLPlatformUtils_isRelative},
{"XML::Xercesc::XMLPlatformUtils_weavePaths", _wrap_XMLPlatformUtils_weavePaths},
{"XML::Xercesc::XMLPlatformUtils_getCurrentMillis", _wrap_XMLPlatformUtils_getCurrentMillis},
{"XML::Xercesc::XMLPlatformUtils_closeMutex", _wrap_XMLPlatformUtils_closeMutex},
{"XML::Xercesc::XMLPlatformUtils_lockMutex", _wrap_XMLPlatformUtils_lockMutex},
{"XML::Xercesc::XMLPlatformUtils_makeMutex", _wrap_XMLPlatformUtils_makeMutex},
{"XML::Xercesc::XMLPlatformUtils_unlockMutex", _wrap_XMLPlatformUtils_unlockMutex},
{"XML::Xercesc::XMLPlatformUtils_loadMsgSet", _wrap_XMLPlatformUtils_loadMsgSet},
{"XML::Xercesc::XMLPlatformUtils_compareAndSwap", _wrap_XMLPlatformUtils_compareAndSwap},
{"XML::Xercesc::XMLPlatformUtils_atomicIncrement", _wrap_XMLPlatformUtils_atomicIncrement},
{"XML::Xercesc::XMLPlatformUtils_atomicDecrement", _wrap_XMLPlatformUtils_atomicDecrement},
{"XML::Xercesc::XMLPlatformUtils_recognizeNEL", _wrap_XMLPlatformUtils_recognizeNEL},
{"XML::Xercesc::XMLPlatformUtils_isNELRecognized", _wrap_XMLPlatformUtils_isNELRecognized},
{"XML::Xercesc::XMLPlatformUtils_strictIANAEncoding", _wrap_XMLPlatformUtils_strictIANAEncoding},
{"XML::Xercesc::XMLPlatformUtils_isStrictIANAEncoding", _wrap_XMLPlatformUtils_isStrictIANAEncoding},
{"XML::Xercesc::XMLPlatformUtils_alignPointerForNewBlockAllocation", _wrap_XMLPlatformUtils_alignPointerForNewBlockAllocation},
{"XML::Xercesc::delete_XMLPlatformUtils", _wrap_delete_XMLPlatformUtils},
{"XML::Xercesc::XMLURL_lookupByName", _wrap_XMLURL_lookupByName},
{"XML::Xercesc::XMLURL_parse", _wrap_XMLURL_parse},
{"XML::Xercesc::new_XMLURL", _wrap_new_XMLURL},
{"XML::Xercesc::delete_XMLURL", _wrap_delete_XMLURL},
{"XML::Xercesc::XMLURL_operator_equal_to", _wrap_XMLURL_operator_equal_to},
{"XML::Xercesc::XMLURL_operator_not_equal_to", _wrap_XMLURL_operator_not_equal_to},
{"XML::Xercesc::XMLURL_getFragment", _wrap_XMLURL_getFragment},
{"XML::Xercesc::XMLURL_getHost", _wrap_XMLURL_getHost},
{"XML::Xercesc::XMLURL_getPassword", _wrap_XMLURL_getPassword},
{"XML::Xercesc::XMLURL_getPath", _wrap_XMLURL_getPath},
{"XML::Xercesc::XMLURL_getPortNum", _wrap_XMLURL_getPortNum},
{"XML::Xercesc::XMLURL_getProtocol", _wrap_XMLURL_getProtocol},
{"XML::Xercesc::XMLURL_getProtocolName", _wrap_XMLURL_getProtocolName},
{"XML::Xercesc::XMLURL_getQuery", _wrap_XMLURL_getQuery},
{"XML::Xercesc::XMLURL_getURLText", _wrap_XMLURL_getURLText},
{"XML::Xercesc::XMLURL_getUser", _wrap_XMLURL_getUser},
{"XML::Xercesc::XMLURL_getMemoryManager", _wrap_XMLURL_getMemoryManager},
{"XML::Xercesc::XMLURL_setURL", _wrap_XMLURL_setURL},
{"XML::Xercesc::XMLURL_isRelative", _wrap_XMLURL_isRelative},
{"XML::Xercesc::XMLURL_hasInvalidChar", _wrap_XMLURL_hasInvalidChar},
{"XML::Xercesc::XMLURL_makeNewStream", _wrap_XMLURL_makeNewStream},
{"XML::Xercesc::XMLURL_makeRelativeTo", _wrap_XMLURL_makeRelativeTo},
{"XML::Xercesc::delete_XMLUri", _wrap_delete_XMLUri},
{"XML::Xercesc::XMLUri_getUriText", _wrap_XMLUri_getUriText},
{"XML::Xercesc::XMLUri_getScheme", _wrap_XMLUri_getScheme},
{"XML::Xercesc::XMLUri_getUserInfo", _wrap_XMLUri_getUserInfo},
{"XML::Xercesc::XMLUri_getHost", _wrap_XMLUri_getHost},
{"XML::Xercesc::XMLUri_getPort", _wrap_XMLUri_getPort},
{"XML::Xercesc::XMLUri_getRegBasedAuthority", _wrap_XMLUri_getRegBasedAuthority},
{"XML::Xercesc::XMLUri_getPath", _wrap_XMLUri_getPath},
{"XML::Xercesc::XMLUri_getQueryString", _wrap_XMLUri_getQueryString},
{"XML::Xercesc::XMLUri_getFragment", _wrap_XMLUri_getFragment},
{"XML::Xercesc::XMLUri_setScheme", _wrap_XMLUri_setScheme},
{"XML::Xercesc::XMLUri_setUserInfo", _wrap_XMLUri_setUserInfo},
{"XML::Xercesc::XMLUri_setHost", _wrap_XMLUri_setHost},
{"XML::Xercesc::XMLUri_setPort", _wrap_XMLUri_setPort},
{"XML::Xercesc::XMLUri_setRegBasedAuthority", _wrap_XMLUri_setRegBasedAuthority},
{"XML::Xercesc::XMLUri_setPath", _wrap_XMLUri_setPath},
{"XML::Xercesc::XMLUri_setQueryString", _wrap_XMLUri_setQueryString},
{"XML::Xercesc::XMLUri_setFragment", _wrap_XMLUri_setFragment},
{"XML::Xercesc::XMLUri_isURIString", _wrap_XMLUri_isURIString},
{"XML::Xercesc::XMLUri_isValidURI", _wrap_XMLUri_isValidURI},
{"XML::Xercesc::new_XMLUri", _wrap_new_XMLUri},
{"XML::Xercesc::new_QName", _wrap_new_QName},
{"XML::Xercesc::delete_QName", _wrap_delete_QName},
{"XML::Xercesc::QName_getPrefix", _wrap_QName_getPrefix},
{"XML::Xercesc::QName_getLocalPart", _wrap_QName_getLocalPart},
{"XML::Xercesc::QName_getRawName", _wrap_QName_getRawName},
{"XML::Xercesc::QName_getMemoryManager", _wrap_QName_getMemoryManager},
{"XML::Xercesc::QName_setName", _wrap_QName_setName},
{"XML::Xercesc::QName_setPrefix", _wrap_QName_setPrefix},
{"XML::Xercesc::QName_setLocalPart", _wrap_QName_setLocalPart},
{"XML::Xercesc::QName_setNPrefix", _wrap_QName_setNPrefix},
{"XML::Xercesc::QName_setNLocalPart", _wrap_QName_setNLocalPart},
{"XML::Xercesc::QName_setURI", _wrap_QName_setURI},
{"XML::Xercesc::QName_setValues", _wrap_QName_setValues},
{"XML::Xercesc::QName_operator_equal_to", _wrap_QName_operator_equal_to},
{"XML::Xercesc::QName_cleanUp", _wrap_QName_cleanUp},
{"XML::Xercesc::HexBin_getDataLength", _wrap_HexBin_getDataLength},
{"XML::Xercesc::HexBin_isArrayByteHex", _wrap_HexBin_isArrayByteHex},
{"XML::Xercesc::delete_HexBin", _wrap_delete_HexBin},
{"XML::Xercesc::Base64_encode", _wrap_Base64_encode},
{"XML::Xercesc::Base64_decode", _wrap_Base64_decode},
{"XML::Xercesc::Base64_getDataLength", _wrap_Base64_getDataLength},
{"XML::Xercesc::delete_Base64", _wrap_delete_Base64},
{"XML::Xercesc::delete_XMLExcepts", _wrap_delete_XMLExcepts},
{"XML::Xercesc::delete_XMLException", _wrap_delete_XMLException},
{"XML::Xercesc::XMLException_getType", _wrap_XMLException_getType},
{"XML::Xercesc::XMLException_getCode", _wrap_XMLException_getCode},
{"XML::Xercesc::XMLException_getMessage", _wrap_XMLException_getMessage},
{"XML::Xercesc::XMLException_getSrcFile", _wrap_XMLException_getSrcFile},
{"XML::Xercesc::XMLException_getSrcLine", _wrap_XMLException_getSrcLine},
{"XML::Xercesc::XMLException_getErrorType", _wrap_XMLException_getErrorType},
{"XML::Xercesc::XMLException_setPosition", _wrap_XMLException_setPosition},
{"XML::Xercesc::XMLException_reinitMsgMutex", _wrap_XMLException_reinitMsgMutex},
{"XML::Xercesc::XMLException_reinitMsgLoader", _wrap_XMLException_reinitMsgLoader},
{"XML::Xercesc::delete_XMLElementDecl", _wrap_delete_XMLElementDecl},
{"XML::Xercesc::XMLElementDecl_findAttr", _wrap_XMLElementDecl_findAttr},
{"XML::Xercesc::XMLElementDecl_getAttDefList", _wrap_XMLElementDecl_getAttDefList},
{"XML::Xercesc::XMLElementDecl_getCharDataOpts", _wrap_XMLElementDecl_getCharDataOpts},
{"XML::Xercesc::XMLElementDecl_hasAttDefs", _wrap_XMLElementDecl_hasAttDefs},
{"XML::Xercesc::XMLElementDecl_resetDefs", _wrap_XMLElementDecl_resetDefs},
{"XML::Xercesc::XMLElementDecl_getContentSpec", _wrap_XMLElementDecl_getContentSpec},
{"XML::Xercesc::XMLElementDecl_setContentSpec", _wrap_XMLElementDecl_setContentSpec},
{"XML::Xercesc::XMLElementDecl_getContentModel", _wrap_XMLElementDecl_getContentModel},
{"XML::Xercesc::XMLElementDecl_setContentModel", _wrap_XMLElementDecl_setContentModel},
{"XML::Xercesc::XMLElementDecl_getFormattedContentModel", _wrap_XMLElementDecl_getFormattedContentModel},
{"XML::Xercesc::XMLElementDecl_getBaseName", _wrap_XMLElementDecl_getBaseName},
{"XML::Xercesc::XMLElementDecl_getURI", _wrap_XMLElementDecl_getURI},
{"XML::Xercesc::XMLElementDecl_getElementName", _wrap_XMLElementDecl_getElementName},
{"XML::Xercesc::XMLElementDecl_getFullName", _wrap_XMLElementDecl_getFullName},
{"XML::Xercesc::XMLElementDecl_getCreateReason", _wrap_XMLElementDecl_getCreateReason},
{"XML::Xercesc::XMLElementDecl_getId", _wrap_XMLElementDecl_getId},
{"XML::Xercesc::XMLElementDecl_getDOMTypeInfoUri", _wrap_XMLElementDecl_getDOMTypeInfoUri},
{"XML::Xercesc::XMLElementDecl_getDOMTypeInfoName", _wrap_XMLElementDecl_getDOMTypeInfoName},
{"XML::Xercesc::XMLElementDecl_isDeclared", _wrap_XMLElementDecl_isDeclared},
{"XML::Xercesc::XMLElementDecl_isExternal", _wrap_XMLElementDecl_isExternal},
{"XML::Xercesc::XMLElementDecl_getMemoryManager", _wrap_XMLElementDecl_getMemoryManager},
{"XML::Xercesc::XMLElementDecl_setElementName", _wrap_XMLElementDecl_setElementName},
{"XML::Xercesc::XMLElementDecl_setCreateReason", _wrap_XMLElementDecl_setCreateReason},
{"XML::Xercesc::XMLElementDecl_setId", _wrap_XMLElementDecl_setId},
{"XML::Xercesc::XMLElementDecl_setExternalElemDeclaration", _wrap_XMLElementDecl_setExternalElemDeclaration},
{"XML::Xercesc::XMLElementDecl_getObjectType", _wrap_XMLElementDecl_getObjectType},
{"XML::Xercesc::XMLElementDecl_storeElementDecl", _wrap_XMLElementDecl_storeElementDecl},
{"XML::Xercesc::XMLElementDecl_loadElementDecl", _wrap_XMLElementDecl_loadElementDecl},
{"XML::Xercesc::delete_XMLEntityDecl", _wrap_delete_XMLEntityDecl},
{"XML::Xercesc::XMLEntityDecl_getDeclaredInIntSubset", _wrap_XMLEntityDecl_getDeclaredInIntSubset},
{"XML::Xercesc::XMLEntityDecl_getIsParameter", _wrap_XMLEntityDecl_getIsParameter},
{"XML::Xercesc::XMLEntityDecl_getIsSpecialChar", _wrap_XMLEntityDecl_getIsSpecialChar},
{"XML::Xercesc::XMLEntityDecl_getId", _wrap_XMLEntityDecl_getId},
{"XML::Xercesc::XMLEntityDecl_getName", _wrap_XMLEntityDecl_getName},
{"XML::Xercesc::XMLEntityDecl_getNotationName", _wrap_XMLEntityDecl_getNotationName},
{"XML::Xercesc::XMLEntityDecl_getPublicId", _wrap_XMLEntityDecl_getPublicId},
{"XML::Xercesc::XMLEntityDecl_getSystemId", _wrap_XMLEntityDecl_getSystemId},
{"XML::Xercesc::XMLEntityDecl_getBaseURI", _wrap_XMLEntityDecl_getBaseURI},
{"XML::Xercesc::XMLEntityDecl_getValue", _wrap_XMLEntityDecl_getValue},
{"XML::Xercesc::XMLEntityDecl_getValueLen", _wrap_XMLEntityDecl_getValueLen},
{"XML::Xercesc::XMLEntityDecl_isExternal", _wrap_XMLEntityDecl_isExternal},
{"XML::Xercesc::XMLEntityDecl_isUnparsed", _wrap_XMLEntityDecl_isUnparsed},
{"XML::Xercesc::XMLEntityDecl_getMemoryManager", _wrap_XMLEntityDecl_getMemoryManager},
{"XML::Xercesc::XMLEntityDecl_setName", _wrap_XMLEntityDecl_setName},
{"XML::Xercesc::XMLEntityDecl_setNotationName", _wrap_XMLEntityDecl_setNotationName},
{"XML::Xercesc::XMLEntityDecl_setPublicId", _wrap_XMLEntityDecl_setPublicId},
{"XML::Xercesc::XMLEntityDecl_setSystemId", _wrap_XMLEntityDecl_setSystemId},
{"XML::Xercesc::XMLEntityDecl_setBaseURI", _wrap_XMLEntityDecl_setBaseURI},
{"XML::Xercesc::XMLEntityDecl_setValue", _wrap_XMLEntityDecl_setValue},
{"XML::Xercesc::XMLEntityDecl_setId", _wrap_XMLEntityDecl_setId},
{"XML::Xercesc::XMLEntityDecl_getKey", _wrap_XMLEntityDecl_getKey},
{"XML::Xercesc::new_XMLNotationDecl", _wrap_new_XMLNotationDecl},
{"XML::Xercesc::delete_XMLNotationDecl", _wrap_delete_XMLNotationDecl},
{"XML::Xercesc::XMLNotationDecl_getId", _wrap_XMLNotationDecl_getId},
{"XML::Xercesc::XMLNotationDecl_getName", _wrap_XMLNotationDecl_getName},
{"XML::Xercesc::XMLNotationDecl_getPublicId", _wrap_XMLNotationDecl_getPublicId},
{"XML::Xercesc::XMLNotationDecl_getSystemId", _wrap_XMLNotationDecl_getSystemId},
{"XML::Xercesc::XMLNotationDecl_getBaseURI", _wrap_XMLNotationDecl_getBaseURI},
{"XML::Xercesc::XMLNotationDecl_getNameSpaceId", _wrap_XMLNotationDecl_getNameSpaceId},
{"XML::Xercesc::XMLNotationDecl_getMemoryManager", _wrap_XMLNotationDecl_getMemoryManager},
{"XML::Xercesc::XMLNotationDecl_setId", _wrap_XMLNotationDecl_setId},
{"XML::Xercesc::XMLNotationDecl_setName", _wrap_XMLNotationDecl_setName},
{"XML::Xercesc::XMLNotationDecl_setPublicId", _wrap_XMLNotationDecl_setPublicId},
{"XML::Xercesc::XMLNotationDecl_setSystemId", _wrap_XMLNotationDecl_setSystemId},
{"XML::Xercesc::XMLNotationDecl_setBaseURI", _wrap_XMLNotationDecl_setBaseURI},
{"XML::Xercesc::XMLNotationDecl_setNameSpaceId", _wrap_XMLNotationDecl_setNameSpaceId},
{"XML::Xercesc::XMLNotationDecl_getKey", _wrap_XMLNotationDecl_getKey},
{"XML::Xercesc::delete_XMLAttDefList", _wrap_delete_XMLAttDefList},
{"XML::Xercesc::XMLAttDefList_hasMoreElements", _wrap_XMLAttDefList_hasMoreElements},
{"XML::Xercesc::XMLAttDefList_isEmpty", _wrap_XMLAttDefList_isEmpty},
{"XML::Xercesc::XMLAttDefList_ignore_me_for_now", _wrap_XMLAttDefList_ignore_me_for_now},
{"XML::Xercesc::XMLAttDefList_findAttDef", _wrap_XMLAttDefList_findAttDef},
{"XML::Xercesc::XMLAttDefList_nextElement", _wrap_XMLAttDefList_nextElement},
{"XML::Xercesc::XMLAttDefList_Reset", _wrap_XMLAttDefList_Reset},
{"XML::Xercesc::XMLAttDefList_getAttDefCount", _wrap_XMLAttDefList_getAttDefCount},
{"XML::Xercesc::XMLAttDefList_getAttDef", _wrap_XMLAttDefList_getAttDef},
{"XML::Xercesc::XMLAttDefList_getMemoryManager", _wrap_XMLAttDefList_getMemoryManager},
{"XML::Xercesc::XMLAttDef_getAttTypeString", _wrap_XMLAttDef_getAttTypeString},
{"XML::Xercesc::XMLAttDef_getDefAttTypeString", _wrap_XMLAttDef_getDefAttTypeString},
{"XML::Xercesc::delete_XMLAttDef", _wrap_delete_XMLAttDef},
{"XML::Xercesc::XMLAttDef_getFullName", _wrap_XMLAttDef_getFullName},
{"XML::Xercesc::XMLAttDef_reset", _wrap_XMLAttDef_reset},
{"XML::Xercesc::XMLAttDef_getDefaultType", _wrap_XMLAttDef_getDefaultType},
{"XML::Xercesc::XMLAttDef_getEnumeration", _wrap_XMLAttDef_getEnumeration},
{"XML::Xercesc::XMLAttDef_getId", _wrap_XMLAttDef_getId},
{"XML::Xercesc::XMLAttDef_getProvided", _wrap_XMLAttDef_getProvided},
{"XML::Xercesc::XMLAttDef_getType", _wrap_XMLAttDef_getType},
{"XML::Xercesc::XMLAttDef_getValue", _wrap_XMLAttDef_getValue},
{"XML::Xercesc::XMLAttDef_getCreateReason", _wrap_XMLAttDef_getCreateReason},
{"XML::Xercesc::XMLAttDef_isExternal", _wrap_XMLAttDef_isExternal},
{"XML::Xercesc::XMLAttDef_getMemoryManager", _wrap_XMLAttDef_getMemoryManager},
{"XML::Xercesc::XMLAttDef_getDOMTypeInfoUri", _wrap_XMLAttDef_getDOMTypeInfoUri},
{"XML::Xercesc::XMLAttDef_getDOMTypeInfoName", _wrap_XMLAttDef_getDOMTypeInfoName},
{"XML::Xercesc::XMLAttDef_setDefaultType", _wrap_XMLAttDef_setDefaultType},
{"XML::Xercesc::XMLAttDef_setId", _wrap_XMLAttDef_setId},
{"XML::Xercesc::XMLAttDef_setProvided", _wrap_XMLAttDef_setProvided},
{"XML::Xercesc::XMLAttDef_setType", _wrap_XMLAttDef_setType},
{"XML::Xercesc::XMLAttDef_setValue", _wrap_XMLAttDef_setValue},
{"XML::Xercesc::XMLAttDef_setEnumeration", _wrap_XMLAttDef_setEnumeration},
{"XML::Xercesc::XMLAttDef_setCreateReason", _wrap_XMLAttDef_setCreateReason},
{"XML::Xercesc::XMLAttDef_setExternalAttDeclaration", _wrap_XMLAttDef_setExternalAttDeclaration},
{"XML::Xercesc::delete_XMLValidator", _wrap_delete_XMLValidator},
{"XML::Xercesc::XMLValidator_checkContent", _wrap_XMLValidator_checkContent},
{"XML::Xercesc::XMLValidator_faultInAttr", _wrap_XMLValidator_faultInAttr},
{"XML::Xercesc::XMLValidator_preContentValidation", _wrap_XMLValidator_preContentValidation},
{"XML::Xercesc::XMLValidator_postParseValidation", _wrap_XMLValidator_postParseValidation},
{"XML::Xercesc::XMLValidator_reset", _wrap_XMLValidator_reset},
{"XML::Xercesc::XMLValidator_requiresNamespaces", _wrap_XMLValidator_requiresNamespaces},
{"XML::Xercesc::XMLValidator_validateAttrValue", _wrap_XMLValidator_validateAttrValue},
{"XML::Xercesc::XMLValidator_validateElement", _wrap_XMLValidator_validateElement},
{"XML::Xercesc::XMLValidator_getGrammar", _wrap_XMLValidator_getGrammar},
{"XML::Xercesc::XMLValidator_setGrammar", _wrap_XMLValidator_setGrammar},
{"XML::Xercesc::XMLValidator_handlesDTD", _wrap_XMLValidator_handlesDTD},
{"XML::Xercesc::XMLValidator_handlesSchema", _wrap_XMLValidator_handlesSchema},
{"XML::Xercesc::XMLValidator_setScannerInfo", _wrap_XMLValidator_setScannerInfo},
{"XML::Xercesc::XMLValidator_setErrorReporter", _wrap_XMLValidator_setErrorReporter},
{"XML::Xercesc::XMLValidator_emitError", _wrap_XMLValidator_emitError},
{"XML::Xercesc::XMLValidator_checkRootElement", _wrap_XMLValidator_checkRootElement},
{"XML::Xercesc::XMLValidator_reinitMsgMutex", _wrap_XMLValidator_reinitMsgMutex},
{"XML::Xercesc::XMLValidator_reinitMsgLoader", _wrap_XMLValidator_reinitMsgLoader},
{"XML::Xercesc::delete_Grammar", _wrap_delete_Grammar},
{"XML::Xercesc::Grammar_getGrammarType", _wrap_Grammar_getGrammarType},
{"XML::Xercesc::Grammar_getTargetNamespace", _wrap_Grammar_getTargetNamespace},
{"XML::Xercesc::Grammar_getValidated", _wrap_Grammar_getValidated},
{"XML::Xercesc::Grammar_findOrAddElemDecl", _wrap_Grammar_findOrAddElemDecl},
{"XML::Xercesc::Grammar_getElemId", _wrap_Grammar_getElemId},
{"XML::Xercesc::Grammar_getElemDecl", _wrap_Grammar_getElemDecl},
{"XML::Xercesc::Grammar_getNotationDecl", _wrap_Grammar_getNotationDecl},
{"XML::Xercesc::Grammar_putElemDecl", _wrap_Grammar_putElemDecl},
{"XML::Xercesc::Grammar_putNotationDecl", _wrap_Grammar_putNotationDecl},
{"XML::Xercesc::Grammar_setValidated", _wrap_Grammar_setValidated},
{"XML::Xercesc::Grammar_reset", _wrap_Grammar_reset},
{"XML::Xercesc::Grammar_setGrammarDescription", _wrap_Grammar_setGrammarDescription},
{"XML::Xercesc::Grammar_getGrammarDescription", _wrap_Grammar_getGrammarDescription},
{"XML::Xercesc::Grammar_storeGrammar", _wrap_Grammar_storeGrammar},
{"XML::Xercesc::Grammar_loadGrammar", _wrap_Grammar_loadGrammar},
{"XML::Xercesc::new_DTDElementDecl", _wrap_new_DTDElementDecl},
{"XML::Xercesc::delete_DTDElementDecl", _wrap_delete_DTDElementDecl},
{"XML::Xercesc::DTDElementDecl_findAttr", _wrap_DTDElementDecl_findAttr},
{"XML::Xercesc::DTDElementDecl_getAttDefList", _wrap_DTDElementDecl_getAttDefList},
{"XML::Xercesc::DTDElementDecl_getCharDataOpts", _wrap_DTDElementDecl_getCharDataOpts},
{"XML::Xercesc::DTDElementDecl_hasAttDefs", _wrap_DTDElementDecl_hasAttDefs},
{"XML::Xercesc::DTDElementDecl_resetDefs", _wrap_DTDElementDecl_resetDefs},
{"XML::Xercesc::DTDElementDecl_getContentSpec", _wrap_DTDElementDecl_getContentSpec},
{"XML::Xercesc::DTDElementDecl_setContentSpec", _wrap_DTDElementDecl_setContentSpec},
{"XML::Xercesc::DTDElementDecl_getContentModel", _wrap_DTDElementDecl_getContentModel},
{"XML::Xercesc::DTDElementDecl_setContentModel", _wrap_DTDElementDecl_setContentModel},
{"XML::Xercesc::DTDElementDecl_getFormattedContentModel", _wrap_DTDElementDecl_getFormattedContentModel},
{"XML::Xercesc::DTDElementDecl_getKey", _wrap_DTDElementDecl_getKey},
{"XML::Xercesc::DTDElementDecl_getAttDef", _wrap_DTDElementDecl_getAttDef},
{"XML::Xercesc::DTDElementDecl_getModelType", _wrap_DTDElementDecl_getModelType},
{"XML::Xercesc::DTDElementDecl_getDOMTypeInfoName", _wrap_DTDElementDecl_getDOMTypeInfoName},
{"XML::Xercesc::DTDElementDecl_getDOMTypeInfoUri", _wrap_DTDElementDecl_getDOMTypeInfoUri},
{"XML::Xercesc::DTDElementDecl_addAttDef", _wrap_DTDElementDecl_addAttDef},
{"XML::Xercesc::DTDElementDecl_setModelType", _wrap_DTDElementDecl_setModelType},
{"XML::Xercesc::DTDElementDecl_getObjectType", _wrap_DTDElementDecl_getObjectType},
{"XML::Xercesc::new_DTDElementDeclEnumerator", _wrap_new_DTDElementDeclEnumerator},
{"XML::Xercesc::delete_DTDElementDeclEnumerator", _wrap_delete_DTDElementDeclEnumerator},
{"XML::Xercesc::DTDElementDeclEnumerator_hasMoreElements", _wrap_DTDElementDeclEnumerator_hasMoreElements},
{"XML::Xercesc::DTDElementDeclEnumerator_nextElement", _wrap_DTDElementDeclEnumerator_nextElement},
{"XML::Xercesc::DTDElementDeclEnumerator_Reset", _wrap_DTDElementDeclEnumerator_Reset},
{"XML::Xercesc::DTDElementDeclEnumerator_size", _wrap_DTDElementDeclEnumerator_size},
{"XML::Xercesc::new_DTDEntityDecl", _wrap_new_DTDEntityDecl},
{"XML::Xercesc::delete_DTDEntityDecl", _wrap_delete_DTDEntityDecl},
{"XML::Xercesc::DTDEntityDecl_getDeclaredInIntSubset", _wrap_DTDEntityDecl_getDeclaredInIntSubset},
{"XML::Xercesc::DTDEntityDecl_getIsParameter", _wrap_DTDEntityDecl_getIsParameter},
{"XML::Xercesc::DTDEntityDecl_getIsSpecialChar", _wrap_DTDEntityDecl_getIsSpecialChar},
{"XML::Xercesc::DTDEntityDecl_setDeclaredInIntSubset", _wrap_DTDEntityDecl_setDeclaredInIntSubset},
{"XML::Xercesc::DTDEntityDecl_setIsParameter", _wrap_DTDEntityDecl_setIsParameter},
{"XML::Xercesc::DTDEntityDecl_setIsSpecialChar", _wrap_DTDEntityDecl_setIsSpecialChar},
{"XML::Xercesc::new_DTDEntityDeclEnumerator", _wrap_new_DTDEntityDeclEnumerator},
{"XML::Xercesc::delete_DTDEntityDeclEnumerator", _wrap_delete_DTDEntityDeclEnumerator},
{"XML::Xercesc::DTDEntityDeclEnumerator_hasMoreElements", _wrap_DTDEntityDeclEnumerator_hasMoreElements},
{"XML::Xercesc::DTDEntityDeclEnumerator_nextElement", _wrap_DTDEntityDeclEnumerator_nextElement},
{"XML::Xercesc::DTDEntityDeclEnumerator_Reset", _wrap_DTDEntityDeclEnumerator_Reset},
{"XML::Xercesc::DTDEntityDeclEnumerator_size", _wrap_DTDEntityDeclEnumerator_size},
{"XML::Xercesc::delete_DTDAttDefList", _wrap_delete_DTDAttDefList},
{"XML::Xercesc::DTDAttDefList_hasMoreElements", _wrap_DTDAttDefList_hasMoreElements},
{"XML::Xercesc::DTDAttDefList_isEmpty", _wrap_DTDAttDefList_isEmpty},
{"XML::Xercesc::DTDAttDefList_ignore_me_for_now", _wrap_DTDAttDefList_ignore_me_for_now},
{"XML::Xercesc::DTDAttDefList_findAttDef", _wrap_DTDAttDefList_findAttDef},
{"XML::Xercesc::DTDAttDefList_nextElement", _wrap_DTDAttDefList_nextElement},
{"XML::Xercesc::DTDAttDefList_Reset", _wrap_DTDAttDefList_Reset},
{"XML::Xercesc::DTDAttDefList_getAttDefCount", _wrap_DTDAttDefList_getAttDefCount},
{"XML::Xercesc::DTDAttDefList_getAttDef", _wrap_DTDAttDefList_getAttDef},
{"XML::Xercesc::new_DTDAttDefList", _wrap_new_DTDAttDefList},
{"XML::Xercesc::new_DTDAttDef", _wrap_new_DTDAttDef},
{"XML::Xercesc::delete_DTDAttDef", _wrap_delete_DTDAttDef},
{"XML::Xercesc::DTDAttDef_getFullName", _wrap_DTDAttDef_getFullName},
{"XML::Xercesc::DTDAttDef_reset", _wrap_DTDAttDef_reset},
{"XML::Xercesc::DTDAttDef_getElemId", _wrap_DTDAttDef_getElemId},
{"XML::Xercesc::DTDAttDef_getDOMTypeInfoName", _wrap_DTDAttDef_getDOMTypeInfoName},
{"XML::Xercesc::DTDAttDef_getDOMTypeInfoUri", _wrap_DTDAttDef_getDOMTypeInfoUri},
{"XML::Xercesc::DTDAttDef_setElemId", _wrap_DTDAttDef_setElemId},
{"XML::Xercesc::DTDAttDef_setName", _wrap_DTDAttDef_setName},
{"XML::Xercesc::new_DTDGrammar", _wrap_new_DTDGrammar},
{"XML::Xercesc::delete_DTDGrammar", _wrap_delete_DTDGrammar},
{"XML::Xercesc::DTDGrammar_getGrammarType", _wrap_DTDGrammar_getGrammarType},
{"XML::Xercesc::DTDGrammar_getTargetNamespace", _wrap_DTDGrammar_getTargetNamespace},
{"XML::Xercesc::DTDGrammar_findOrAddElemDecl", _wrap_DTDGrammar_findOrAddElemDecl},
{"XML::Xercesc::DTDGrammar_getElemId", _wrap_DTDGrammar_getElemId},
{"XML::Xercesc::DTDGrammar_getElemDecl", _wrap_DTDGrammar_getElemDecl},
{"XML::Xercesc::DTDGrammar_getNotationDecl", _wrap_DTDGrammar_getNotationDecl},
{"XML::Xercesc::DTDGrammar_getValidated", _wrap_DTDGrammar_getValidated},
{"XML::Xercesc::DTDGrammar_putElemDecl", _wrap_DTDGrammar_putElemDecl},
{"XML::Xercesc::DTDGrammar_putNotationDecl", _wrap_DTDGrammar_putNotationDecl},
{"XML::Xercesc::DTDGrammar_setValidated", _wrap_DTDGrammar_setValidated},
{"XML::Xercesc::DTDGrammar_reset", _wrap_DTDGrammar_reset},
{"XML::Xercesc::DTDGrammar_getRootElemId", _wrap_DTDGrammar_getRootElemId},
{"XML::Xercesc::DTDGrammar_getEntityDecl", _wrap_DTDGrammar_getEntityDecl},
{"XML::Xercesc::DTDGrammar_getEntityDeclPool", _wrap_DTDGrammar_getEntityDeclPool},
{"XML::Xercesc::DTDGrammar_getElemEnumerator", _wrap_DTDGrammar_getElemEnumerator},
{"XML::Xercesc::DTDGrammar_getEntityEnumerator", _wrap_DTDGrammar_getEntityEnumerator},
{"XML::Xercesc::DTDGrammar_getNotationEnumerator", _wrap_DTDGrammar_getNotationEnumerator},
{"XML::Xercesc::DTDGrammar_setRootElemId", _wrap_DTDGrammar_setRootElemId},
{"XML::Xercesc::DTDGrammar_setGrammarDescription", _wrap_DTDGrammar_setGrammarDescription},
{"XML::Xercesc::DTDGrammar_getGrammarDescription", _wrap_DTDGrammar_getGrammarDescription},
{"XML::Xercesc::DTDGrammar_putEntityDecl", _wrap_DTDGrammar_putEntityDecl},
{"XML::Xercesc::DTDGrammar_reinitDfltEntities", _wrap_DTDGrammar_reinitDfltEntities},
{"XML::Xercesc::new_DTDValidator", _wrap_new_DTDValidator},
{"XML::Xercesc::delete_DTDValidator", _wrap_delete_DTDValidator},
{"XML::Xercesc::DTDValidator_checkContent", _wrap_DTDValidator_checkContent},
{"XML::Xercesc::DTDValidator_faultInAttr", _wrap_DTDValidator_faultInAttr},
{"XML::Xercesc::DTDValidator_preContentValidation", _wrap_DTDValidator_preContentValidation},
{"XML::Xercesc::DTDValidator_postParseValidation", _wrap_DTDValidator_postParseValidation},
{"XML::Xercesc::DTDValidator_reset", _wrap_DTDValidator_reset},
{"XML::Xercesc::DTDValidator_requiresNamespaces", _wrap_DTDValidator_requiresNamespaces},
{"XML::Xercesc::DTDValidator_validateAttrValue", _wrap_DTDValidator_validateAttrValue},
{"XML::Xercesc::DTDValidator_validateElement", _wrap_DTDValidator_validateElement},
{"XML::Xercesc::DTDValidator_getGrammar", _wrap_DTDValidator_getGrammar},
{"XML::Xercesc::DTDValidator_setGrammar", _wrap_DTDValidator_setGrammar},
{"XML::Xercesc::DTDValidator_handlesDTD", _wrap_DTDValidator_handlesDTD},
{"XML::Xercesc::DTDValidator_handlesSchema", _wrap_DTDValidator_handlesSchema},
{"XML::Xercesc::new_SchemaElementDecl", _wrap_new_SchemaElementDecl},
{"XML::Xercesc::delete_SchemaElementDecl", _wrap_delete_SchemaElementDecl},
{"XML::Xercesc::SchemaElementDecl_findAttr", _wrap_SchemaElementDecl_findAttr},
{"XML::Xercesc::SchemaElementDecl_getAttDefList", _wrap_SchemaElementDecl_getAttDefList},
{"XML::Xercesc::SchemaElementDecl_getCharDataOpts", _wrap_SchemaElementDecl_getCharDataOpts},
{"XML::Xercesc::SchemaElementDecl_hasAttDefs", _wrap_SchemaElementDecl_hasAttDefs},
{"XML::Xercesc::SchemaElementDecl_resetDefs", _wrap_SchemaElementDecl_resetDefs},
{"XML::Xercesc::SchemaElementDecl_getContentSpec", _wrap_SchemaElementDecl_getContentSpec},
{"XML::Xercesc::SchemaElementDecl_setContentSpec", _wrap_SchemaElementDecl_setContentSpec},
{"XML::Xercesc::SchemaElementDecl_getContentModel", _wrap_SchemaElementDecl_getContentModel},
{"XML::Xercesc::SchemaElementDecl_setContentModel", _wrap_SchemaElementDecl_setContentModel},
{"XML::Xercesc::SchemaElementDecl_getFormattedContentModel", _wrap_SchemaElementDecl_getFormattedContentModel},
{"XML::Xercesc::SchemaElementDecl_getAttDef", _wrap_SchemaElementDecl_getAttDef},
{"XML::Xercesc::SchemaElementDecl_getAttWildCard", _wrap_SchemaElementDecl_getAttWildCard},
{"XML::Xercesc::SchemaElementDecl_getModelType", _wrap_SchemaElementDecl_getModelType},
{"XML::Xercesc::SchemaElementDecl_getPSVIScope", _wrap_SchemaElementDecl_getPSVIScope},
{"XML::Xercesc::SchemaElementDecl_getDatatypeValidator", _wrap_SchemaElementDecl_getDatatypeValidator},
{"XML::Xercesc::SchemaElementDecl_getEnclosingScope", _wrap_SchemaElementDecl_getEnclosingScope},
{"XML::Xercesc::SchemaElementDecl_getFinalSet", _wrap_SchemaElementDecl_getFinalSet},
{"XML::Xercesc::SchemaElementDecl_getBlockSet", _wrap_SchemaElementDecl_getBlockSet},
{"XML::Xercesc::SchemaElementDecl_getMiscFlags", _wrap_SchemaElementDecl_getMiscFlags},
{"XML::Xercesc::SchemaElementDecl_getDefaultValue", _wrap_SchemaElementDecl_getDefaultValue},
{"XML::Xercesc::SchemaElementDecl_getComplexTypeInfo", _wrap_SchemaElementDecl_getComplexTypeInfo},
{"XML::Xercesc::SchemaElementDecl_isGlobalDecl", _wrap_SchemaElementDecl_isGlobalDecl},
{"XML::Xercesc::SchemaElementDecl_getSubstitutionGroupElem", _wrap_SchemaElementDecl_getSubstitutionGroupElem},
{"XML::Xercesc::SchemaElementDecl_getValidity", _wrap_SchemaElementDecl_getValidity},
{"XML::Xercesc::SchemaElementDecl_getValidationAttempted", _wrap_SchemaElementDecl_getValidationAttempted},
{"XML::Xercesc::SchemaElementDecl_getTypeType", _wrap_SchemaElementDecl_getTypeType},
{"XML::Xercesc::SchemaElementDecl_getTypeUri", _wrap_SchemaElementDecl_getTypeUri},
{"XML::Xercesc::SchemaElementDecl_getTypeName", _wrap_SchemaElementDecl_getTypeName},
{"XML::Xercesc::SchemaElementDecl_getTypeAnonymous", _wrap_SchemaElementDecl_getTypeAnonymous},
{"XML::Xercesc::SchemaElementDecl_isTypeDefinitionUnion", _wrap_SchemaElementDecl_isTypeDefinitionUnion},
{"XML::Xercesc::SchemaElementDecl_getMemberTypeUri", _wrap_SchemaElementDecl_getMemberTypeUri},
{"XML::Xercesc::SchemaElementDecl_getMemberTypeAnonymous", _wrap_SchemaElementDecl_getMemberTypeAnonymous},
{"XML::Xercesc::SchemaElementDecl_getMemberTypeName", _wrap_SchemaElementDecl_getMemberTypeName},
{"XML::Xercesc::SchemaElementDecl_getDOMTypeInfoUri", _wrap_SchemaElementDecl_getDOMTypeInfoUri},
{"XML::Xercesc::SchemaElementDecl_getDOMTypeInfoName", _wrap_SchemaElementDecl_getDOMTypeInfoName},
{"XML::Xercesc::SchemaElementDecl_setElemId", _wrap_SchemaElementDecl_setElemId},
{"XML::Xercesc::SchemaElementDecl_setModelType", _wrap_SchemaElementDecl_setModelType},
{"XML::Xercesc::SchemaElementDecl_setPSVIScope", _wrap_SchemaElementDecl_setPSVIScope},
{"XML::Xercesc::SchemaElementDecl_setDatatypeValidator", _wrap_SchemaElementDecl_setDatatypeValidator},
{"XML::Xercesc::SchemaElementDecl_setEnclosingScope", _wrap_SchemaElementDecl_setEnclosingScope},
{"XML::Xercesc::SchemaElementDecl_setFinalSet", _wrap_SchemaElementDecl_setFinalSet},
{"XML::Xercesc::SchemaElementDecl_setBlockSet", _wrap_SchemaElementDecl_setBlockSet},
{"XML::Xercesc::SchemaElementDecl_setMiscFlags", _wrap_SchemaElementDecl_setMiscFlags},
{"XML::Xercesc::SchemaElementDecl_setDefaultValue", _wrap_SchemaElementDecl_setDefaultValue},
{"XML::Xercesc::SchemaElementDecl_setComplexTypeInfo", _wrap_SchemaElementDecl_setComplexTypeInfo},
{"XML::Xercesc::SchemaElementDecl_setXsiComplexTypeInfo", _wrap_SchemaElementDecl_setXsiComplexTypeInfo},
{"XML::Xercesc::SchemaElementDecl_setXsiSimpleTypeInfo", _wrap_SchemaElementDecl_setXsiSimpleTypeInfo},
{"XML::Xercesc::SchemaElementDecl_setAttWildCard", _wrap_SchemaElementDecl_setAttWildCard},
{"XML::Xercesc::SchemaElementDecl_setSubstitutionGroupElem", _wrap_SchemaElementDecl_setSubstitutionGroupElem},
{"XML::Xercesc::SchemaElementDecl_setValidity", _wrap_SchemaElementDecl_setValidity},
{"XML::Xercesc::SchemaElementDecl_setValidationAttempted", _wrap_SchemaElementDecl_setValidationAttempted},
{"XML::Xercesc::SchemaElementDecl_updateValidityFromElement", _wrap_SchemaElementDecl_updateValidityFromElement},
{"XML::Xercesc::SchemaElementDecl_updateValidityFromAttribute", _wrap_SchemaElementDecl_updateValidityFromAttribute},
{"XML::Xercesc::SchemaElementDecl_reset", _wrap_SchemaElementDecl_reset},
{"XML::Xercesc::SchemaElementDecl_addIdentityConstraint", _wrap_SchemaElementDecl_addIdentityConstraint},
{"XML::Xercesc::SchemaElementDecl_getIdentityConstraintCount", _wrap_SchemaElementDecl_getIdentityConstraintCount},
{"XML::Xercesc::SchemaElementDecl_getIdentityConstraintAt", _wrap_SchemaElementDecl_getIdentityConstraintAt},
{"XML::Xercesc::SchemaElementDecl_getObjectType", _wrap_SchemaElementDecl_getObjectType},
{"XML::Xercesc::delete_SchemaElementDeclEnumerator", _wrap_delete_SchemaElementDeclEnumerator},
{"XML::Xercesc::new_SchemaElementDeclEnumerator", _wrap_new_SchemaElementDeclEnumerator},
{"XML::Xercesc::SchemaElementDeclEnumerator_hasMoreElements", _wrap_SchemaElementDeclEnumerator_hasMoreElements},
{"XML::Xercesc::SchemaElementDeclEnumerator_nextElement", _wrap_SchemaElementDeclEnumerator_nextElement},
{"XML::Xercesc::SchemaElementDeclEnumerator_Reset", _wrap_SchemaElementDeclEnumerator_Reset},
{"XML::Xercesc::SchemaElementDeclEnumerator_size", _wrap_SchemaElementDeclEnumerator_size},
{"XML::Xercesc::SchemaElementDeclEnumerator_resetKey", _wrap_SchemaElementDeclEnumerator_resetKey},
{"XML::Xercesc::SchemaElementDeclEnumerator_nextElementKey", _wrap_SchemaElementDeclEnumerator_nextElementKey},
{"XML::Xercesc::SchemaElementDeclEnumerator_hasMoreKeys", _wrap_SchemaElementDeclEnumerator_hasMoreKeys},
{"XML::Xercesc::new_SchemaGrammar", _wrap_new_SchemaGrammar},
{"XML::Xercesc::delete_SchemaGrammar", _wrap_delete_SchemaGrammar},
{"XML::Xercesc::SchemaGrammar_getGrammarType", _wrap_SchemaGrammar_getGrammarType},
{"XML::Xercesc::SchemaGrammar_getTargetNamespace", _wrap_SchemaGrammar_getTargetNamespace},
{"XML::Xercesc::SchemaGrammar_findOrAddElemDecl", _wrap_SchemaGrammar_findOrAddElemDecl},
{"XML::Xercesc::SchemaGrammar_getElemId", _wrap_SchemaGrammar_getElemId},
{"XML::Xercesc::SchemaGrammar_getElemDecl", _wrap_SchemaGrammar_getElemDecl},
{"XML::Xercesc::SchemaGrammar_getNotationDecl", _wrap_SchemaGrammar_getNotationDecl},
{"XML::Xercesc::SchemaGrammar_getValidated", _wrap_SchemaGrammar_getValidated},
{"XML::Xercesc::SchemaGrammar_putElemDecl", _wrap_SchemaGrammar_putElemDecl},
{"XML::Xercesc::SchemaGrammar_putNotationDecl", _wrap_SchemaGrammar_putNotationDecl},
{"XML::Xercesc::SchemaGrammar_setValidated", _wrap_SchemaGrammar_setValidated},
{"XML::Xercesc::SchemaGrammar_reset", _wrap_SchemaGrammar_reset},
{"XML::Xercesc::SchemaGrammar_getElemEnumerator", _wrap_SchemaGrammar_getElemEnumerator},
{"XML::Xercesc::SchemaGrammar_getNotationEnumerator", _wrap_SchemaGrammar_getNotationEnumerator},
{"XML::Xercesc::SchemaGrammar_getAttributeDeclRegistry", _wrap_SchemaGrammar_getAttributeDeclRegistry},
{"XML::Xercesc::SchemaGrammar_getComplexTypeRegistry", _wrap_SchemaGrammar_getComplexTypeRegistry},
{"XML::Xercesc::SchemaGrammar_getGroupInfoRegistry", _wrap_SchemaGrammar_getGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_getAttGroupInfoRegistry", _wrap_SchemaGrammar_getAttGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_getDatatypeRegistry", _wrap_SchemaGrammar_getDatatypeRegistry},
{"XML::Xercesc::SchemaGrammar_getNamespaceScope", _wrap_SchemaGrammar_getNamespaceScope},
{"XML::Xercesc::SchemaGrammar_getValidSubstitutionGroups", _wrap_SchemaGrammar_getValidSubstitutionGroups},
{"XML::Xercesc::SchemaGrammar_getIDRefList", _wrap_SchemaGrammar_getIDRefList},
{"XML::Xercesc::SchemaGrammar_getValidationContext", _wrap_SchemaGrammar_getValidationContext},
{"XML::Xercesc::SchemaGrammar_setTargetNamespace", _wrap_SchemaGrammar_setTargetNamespace},
{"XML::Xercesc::SchemaGrammar_setAttributeDeclRegistry", _wrap_SchemaGrammar_setAttributeDeclRegistry},
{"XML::Xercesc::SchemaGrammar_setComplexTypeRegistry", _wrap_SchemaGrammar_setComplexTypeRegistry},
{"XML::Xercesc::SchemaGrammar_setGroupInfoRegistry", _wrap_SchemaGrammar_setGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_setAttGroupInfoRegistry", _wrap_SchemaGrammar_setAttGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_setNamespaceScope", _wrap_SchemaGrammar_setNamespaceScope},
{"XML::Xercesc::SchemaGrammar_setValidSubstitutionGroups", _wrap_SchemaGrammar_setValidSubstitutionGroups},
{"XML::Xercesc::SchemaGrammar_setGrammarDescription", _wrap_SchemaGrammar_setGrammarDescription},
{"XML::Xercesc::SchemaGrammar_getGrammarDescription", _wrap_SchemaGrammar_getGrammarDescription},
{"XML::Xercesc::SchemaGrammar_putGroupElemDecl", _wrap_SchemaGrammar_putGroupElemDecl},
{"XML::Xercesc::SchemaGrammar_putAnnotation", _wrap_SchemaGrammar_putAnnotation},
{"XML::Xercesc::SchemaGrammar_addAnnotation", _wrap_SchemaGrammar_addAnnotation},
{"XML::Xercesc::SchemaGrammar_getAnnotation", _wrap_SchemaGrammar_getAnnotation},
{"XML::Xercesc::new_SchemaValidator", _wrap_new_SchemaValidator},
{"XML::Xercesc::delete_SchemaValidator", _wrap_delete_SchemaValidator},
{"XML::Xercesc::SchemaValidator_checkContent", _wrap_SchemaValidator_checkContent},
{"XML::Xercesc::SchemaValidator_faultInAttr", _wrap_SchemaValidator_faultInAttr},
{"XML::Xercesc::SchemaValidator_preContentValidation", _wrap_SchemaValidator_preContentValidation},
{"XML::Xercesc::SchemaValidator_postParseValidation", _wrap_SchemaValidator_postParseValidation},
{"XML::Xercesc::SchemaValidator_reset", _wrap_SchemaValidator_reset},
{"XML::Xercesc::SchemaValidator_requiresNamespaces", _wrap_SchemaValidator_requiresNamespaces},
{"XML::Xercesc::SchemaValidator_validateAttrValue", _wrap_SchemaValidator_validateAttrValue},
{"XML::Xercesc::SchemaValidator_validateElement", _wrap_SchemaValidator_validateElement},
{"XML::Xercesc::SchemaValidator_getGrammar", _wrap_SchemaValidator_getGrammar},
{"XML::Xercesc::SchemaValidator_setGrammar", _wrap_SchemaValidator_setGrammar},
{"XML::Xercesc::SchemaValidator_handlesDTD", _wrap_SchemaValidator_handlesDTD},
{"XML::Xercesc::SchemaValidator_handlesSchema", _wrap_SchemaValidator_handlesSchema},
{"XML::Xercesc::SchemaValidator_normalizeWhiteSpace", _wrap_SchemaValidator_normalizeWhiteSpace},
{"XML::Xercesc::SchemaValidator_setGrammarResolver", _wrap_SchemaValidator_setGrammarResolver},
{"XML::Xercesc::SchemaValidator_setXsiType", _wrap_SchemaValidator_setXsiType},
{"XML::Xercesc::SchemaValidator_setNillable", _wrap_SchemaValidator_setNillable},
{"XML::Xercesc::SchemaValidator_setErrorReporter", _wrap_SchemaValidator_setErrorReporter},
{"XML::Xercesc::SchemaValidator_setExitOnFirstFatal", _wrap_SchemaValidator_setExitOnFirstFatal},
{"XML::Xercesc::SchemaValidator_setDatatypeBuffer", _wrap_SchemaValidator_setDatatypeBuffer},
{"XML::Xercesc::SchemaValidator_clearDatatypeBuffer", _wrap_SchemaValidator_clearDatatypeBuffer},
{"XML::Xercesc::SchemaValidator_getCurrentTypeInfo", _wrap_SchemaValidator_getCurrentTypeInfo},
{"XML::Xercesc::SchemaValidator_getCurrentDatatypeValidator", _wrap_SchemaValidator_getCurrentDatatypeValidator},
{"XML::Xercesc::SchemaValidator_getMostRecentAttrValidator", _wrap_SchemaValidator_getMostRecentAttrValidator},
{"XML::Xercesc::SchemaValidator_getErrorOccurred", _wrap_SchemaValidator_getErrorOccurred},
{"XML::Xercesc::SchemaValidator_getIsElemSpecified", _wrap_SchemaValidator_getIsElemSpecified},
{"XML::Xercesc::SchemaValidator_getNormalizedValue", _wrap_SchemaValidator_getNormalizedValue},
{"XML::Xercesc::delete_SchemaAttDefList", _wrap_delete_SchemaAttDefList},
{"XML::Xercesc::SchemaAttDefList_hasMoreElements", _wrap_SchemaAttDefList_hasMoreElements},
{"XML::Xercesc::SchemaAttDefList_isEmpty", _wrap_SchemaAttDefList_isEmpty},
{"XML::Xercesc::SchemaAttDefList_ignore_me_for_now", _wrap_SchemaAttDefList_ignore_me_for_now},
{"XML::Xercesc::SchemaAttDefList_findAttDef", _wrap_SchemaAttDefList_findAttDef},
{"XML::Xercesc::SchemaAttDefList_nextElement", _wrap_SchemaAttDefList_nextElement},
{"XML::Xercesc::SchemaAttDefList_Reset", _wrap_SchemaAttDefList_Reset},
{"XML::Xercesc::SchemaAttDefList_getAttDefCount", _wrap_SchemaAttDefList_getAttDefCount},
{"XML::Xercesc::SchemaAttDefList_getAttDef", _wrap_SchemaAttDefList_getAttDef},
{"XML::Xercesc::new_SchemaAttDefList", _wrap_new_SchemaAttDefList},
{"XML::Xercesc::new_SchemaAttDef", _wrap_new_SchemaAttDef},
{"XML::Xercesc::delete_SchemaAttDef", _wrap_delete_SchemaAttDef},
{"XML::Xercesc::SchemaAttDef_getFullName", _wrap_SchemaAttDef_getFullName},
{"XML::Xercesc::SchemaAttDef_reset", _wrap_SchemaAttDef_reset},
{"XML::Xercesc::SchemaAttDef_getValidity", _wrap_SchemaAttDef_getValidity},
{"XML::Xercesc::SchemaAttDef_getValidationAttempted", _wrap_SchemaAttDef_getValidationAttempted},
{"XML::Xercesc::SchemaAttDef_getTypeType", _wrap_SchemaAttDef_getTypeType},
{"XML::Xercesc::SchemaAttDef_getTypeUri", _wrap_SchemaAttDef_getTypeUri},
{"XML::Xercesc::SchemaAttDef_getTypeName", _wrap_SchemaAttDef_getTypeName},
{"XML::Xercesc::SchemaAttDef_getTypeAnonymous", _wrap_SchemaAttDef_getTypeAnonymous},
{"XML::Xercesc::SchemaAttDef_isTypeDefinitionUnion", _wrap_SchemaAttDef_isTypeDefinitionUnion},
{"XML::Xercesc::SchemaAttDef_getMemberTypeUri", _wrap_SchemaAttDef_getMemberTypeUri},
{"XML::Xercesc::SchemaAttDef_getMemberTypeAnonymous", _wrap_SchemaAttDef_getMemberTypeAnonymous},
{"XML::Xercesc::SchemaAttDef_getMemberTypeName", _wrap_SchemaAttDef_getMemberTypeName},
{"XML::Xercesc::SchemaAttDef_getDOMTypeInfoUri", _wrap_SchemaAttDef_getDOMTypeInfoUri},
{"XML::Xercesc::SchemaAttDef_getDOMTypeInfoName", _wrap_SchemaAttDef_getDOMTypeInfoName},
{"XML::Xercesc::SchemaAttDef_getElemId", _wrap_SchemaAttDef_getElemId},
{"XML::Xercesc::SchemaAttDef_getAttName", _wrap_SchemaAttDef_getAttName},
{"XML::Xercesc::SchemaAttDef_getDatatypeValidator", _wrap_SchemaAttDef_getDatatypeValidator},
{"XML::Xercesc::SchemaAttDef_getNamespaceList", _wrap_SchemaAttDef_getNamespaceList},
{"XML::Xercesc::SchemaAttDef_getBaseAttDecl", _wrap_SchemaAttDef_getBaseAttDecl},
{"XML::Xercesc::SchemaAttDef_getPSVIScope", _wrap_SchemaAttDef_getPSVIScope},
{"XML::Xercesc::SchemaAttDef_getEnclosingCT", _wrap_SchemaAttDef_getEnclosingCT},
{"XML::Xercesc::SchemaAttDef_setElemId", _wrap_SchemaAttDef_setElemId},
{"XML::Xercesc::SchemaAttDef_setAttName", _wrap_SchemaAttDef_setAttName},
{"XML::Xercesc::SchemaAttDef_setDatatypeValidator", _wrap_SchemaAttDef_setDatatypeValidator},
{"XML::Xercesc::SchemaAttDef_setAnyDatatypeValidator", _wrap_SchemaAttDef_setAnyDatatypeValidator},
{"XML::Xercesc::SchemaAttDef_setBaseAttDecl", _wrap_SchemaAttDef_setBaseAttDecl},
{"XML::Xercesc::SchemaAttDef_setPSVIScope", _wrap_SchemaAttDef_setPSVIScope},
{"XML::Xercesc::SchemaAttDef_setMembertypeValidator", _wrap_SchemaAttDef_setMembertypeValidator},
{"XML::Xercesc::SchemaAttDef_setNamespaceList", _wrap_SchemaAttDef_setNamespaceList},
{"XML::Xercesc::SchemaAttDef_resetNamespaceList", _wrap_SchemaAttDef_resetNamespaceList},
{"XML::Xercesc::SchemaAttDef_setValidity", _wrap_SchemaAttDef_setValidity},
{"XML::Xercesc::SchemaAttDef_setValidationAttempted", _wrap_SchemaAttDef_setValidationAttempted},
{"XML::Xercesc::SchemaAttDef_setEnclosingCT", _wrap_SchemaAttDef_setEnclosingCT},
{"XML::Xercesc::new_SAXException", _wrap_new_SAXException},
{"XML::Xercesc::delete_SAXException", _wrap_delete_SAXException},
{"XML::Xercesc::SAXException_getMessage", _wrap_SAXException_getMessage},
{"XML::Xercesc::new_SAXNotSupportedException", _wrap_new_SAXNotSupportedException},
{"XML::Xercesc::delete_SAXNotSupportedException", _wrap_delete_SAXNotSupportedException},
{"XML::Xercesc::new_SAXNotRecognizedException", _wrap_new_SAXNotRecognizedException},
{"XML::Xercesc::delete_SAXNotRecognizedException", _wrap_delete_SAXNotRecognizedException},
{"XML::Xercesc::new_SAXParseException", _wrap_new_SAXParseException},
{"XML::Xercesc::delete_SAXParseException", _wrap_delete_SAXParseException},
{"XML::Xercesc::SAXParseException_getColumnNumber", _wrap_SAXParseException_getColumnNumber},
{"XML::Xercesc::SAXParseException_getLineNumber", _wrap_SAXParseException_getLineNumber},
{"XML::Xercesc::SAXParseException_getPublicId", _wrap_SAXParseException_getPublicId},
{"XML::Xercesc::SAXParseException_getSystemId", _wrap_SAXParseException_getSystemId},
{"XML::Xercesc::delete_ErrorHandler", _wrap_delete_ErrorHandler},
{"XML::Xercesc::ErrorHandler_warning", _wrap_ErrorHandler_warning},
{"XML::Xercesc::ErrorHandler_error", _wrap_ErrorHandler_error},
{"XML::Xercesc::ErrorHandler_fatalError", _wrap_ErrorHandler_fatalError},
{"XML::Xercesc::ErrorHandler_resetErrors", _wrap_ErrorHandler_resetErrors},
{"XML::Xercesc::delete_DTDHandler", _wrap_delete_DTDHandler},
{"XML::Xercesc::DTDHandler_notationDecl", _wrap_DTDHandler_notationDecl},
{"XML::Xercesc::DTDHandler_unparsedEntityDecl", _wrap_DTDHandler_unparsedEntityDecl},
{"XML::Xercesc::DTDHandler_resetDocType", _wrap_DTDHandler_resetDocType},
{"XML::Xercesc::delete_DocumentHandler", _wrap_delete_DocumentHandler},
{"XML::Xercesc::DocumentHandler_characters", _wrap_DocumentHandler_characters},
{"XML::Xercesc::DocumentHandler_endDocument", _wrap_DocumentHandler_endDocument},
{"XML::Xercesc::DocumentHandler_endElement", _wrap_DocumentHandler_endElement},
{"XML::Xercesc::DocumentHandler_ignorableWhitespace", _wrap_DocumentHandler_ignorableWhitespace},
{"XML::Xercesc::DocumentHandler_processingInstruction", _wrap_DocumentHandler_processingInstruction},
{"XML::Xercesc::DocumentHandler_resetDocument", _wrap_DocumentHandler_resetDocument},
{"XML::Xercesc::DocumentHandler_setDocumentLocator", _wrap_DocumentHandler_setDocumentLocator},
{"XML::Xercesc::DocumentHandler_startDocument", _wrap_DocumentHandler_startDocument},
{"XML::Xercesc::DocumentHandler_startElement", _wrap_DocumentHandler_startElement},
{"XML::Xercesc::delete_EntityResolver", _wrap_delete_EntityResolver},
{"XML::Xercesc::EntityResolver_resolveEntity", _wrap_EntityResolver_resolveEntity},
{"XML::Xercesc::delete_AttributeList", _wrap_delete_AttributeList},
{"XML::Xercesc::AttributeList_getLength", _wrap_AttributeList_getLength},
{"XML::Xercesc::AttributeList_getName", _wrap_AttributeList_getName},
{"XML::Xercesc::AttributeList_getType", _wrap_AttributeList_getType},
{"XML::Xercesc::AttributeList_getType__overload__name", _wrap_AttributeList_getType__overload__name},
{"XML::Xercesc::AttributeList_getValue__overload__name", _wrap_AttributeList_getValue__overload__name},
{"XML::Xercesc::AttributeList_getValue", _wrap_AttributeList_getValue},
{"XML::Xercesc::HandlerBase_characters", _wrap_HandlerBase_characters},
{"XML::Xercesc::HandlerBase_endDocument", _wrap_HandlerBase_endDocument},
{"XML::Xercesc::HandlerBase_endElement", _wrap_HandlerBase_endElement},
{"XML::Xercesc::HandlerBase_ignorableWhitespace", _wrap_HandlerBase_ignorableWhitespace},
{"XML::Xercesc::HandlerBase_processingInstruction", _wrap_HandlerBase_processingInstruction},
{"XML::Xercesc::HandlerBase_resetDocument", _wrap_HandlerBase_resetDocument},
{"XML::Xercesc::HandlerBase_setDocumentLocator", _wrap_HandlerBase_setDocumentLocator},
{"XML::Xercesc::HandlerBase_startDocument", _wrap_HandlerBase_startDocument},
{"XML::Xercesc::HandlerBase_startElement", _wrap_HandlerBase_startElement},
{"XML::Xercesc::HandlerBase_resolveEntity", _wrap_HandlerBase_resolveEntity},
{"XML::Xercesc::HandlerBase_error", _wrap_HandlerBase_error},
{"XML::Xercesc::HandlerBase_fatalError", _wrap_HandlerBase_fatalError},
{"XML::Xercesc::HandlerBase_warning", _wrap_HandlerBase_warning},
{"XML::Xercesc::HandlerBase_resetErrors", _wrap_HandlerBase_resetErrors},
{"XML::Xercesc::HandlerBase_notationDecl", _wrap_HandlerBase_notationDecl},
{"XML::Xercesc::HandlerBase_resetDocType", _wrap_HandlerBase_resetDocType},
{"XML::Xercesc::HandlerBase_unparsedEntityDecl", _wrap_HandlerBase_unparsedEntityDecl},
{"XML::Xercesc::new_HandlerBase", _wrap_new_HandlerBase},
{"XML::Xercesc::delete_HandlerBase", _wrap_delete_HandlerBase},
{"XML::Xercesc::delete_Locator", _wrap_delete_Locator},
{"XML::Xercesc::Locator_getPublicId", _wrap_Locator_getPublicId},
{"XML::Xercesc::Locator_getSystemId", _wrap_Locator_getSystemId},
{"XML::Xercesc::Locator_getLineNumber", _wrap_Locator_getLineNumber},
{"XML::Xercesc::Locator_getColumnNumber", _wrap_Locator_getColumnNumber},
{"XML::Xercesc::delete_Attributes", _wrap_delete_Attributes},
{"XML::Xercesc::Attributes_getLength", _wrap_Attributes_getLength},
{"XML::Xercesc::Attributes_getURI", _wrap_Attributes_getURI},
{"XML::Xercesc::Attributes_getLocalName", _wrap_Attributes_getLocalName},
{"XML::Xercesc::Attributes_getQName", _wrap_Attributes_getQName},
{"XML::Xercesc::Attributes_getIndex", _wrap_Attributes_getIndex},
{"XML::Xercesc::Attributes_getType", _wrap_Attributes_getType},
{"XML::Xercesc::Attributes_getType__overload__name", _wrap_Attributes_getType__overload__name},
{"XML::Xercesc::Attributes_getValue", _wrap_Attributes_getValue},
{"XML::Xercesc::Attributes_getValue__overload__name", _wrap_Attributes_getValue__overload__name},
{"XML::Xercesc::delete_ContentHandler", _wrap_delete_ContentHandler},
{"XML::Xercesc::ContentHandler_characters", _wrap_ContentHandler_characters},
{"XML::Xercesc::ContentHandler_endDocument", _wrap_ContentHandler_endDocument},
{"XML::Xercesc::ContentHandler_endElement", _wrap_ContentHandler_endElement},
{"XML::Xercesc::ContentHandler_ignorableWhitespace", _wrap_ContentHandler_ignorableWhitespace},
{"XML::Xercesc::ContentHandler_processingInstruction", _wrap_ContentHandler_processingInstruction},
{"XML::Xercesc::ContentHandler_setDocumentLocator", _wrap_ContentHandler_setDocumentLocator},
{"XML::Xercesc::ContentHandler_startDocument", _wrap_ContentHandler_startDocument},
{"XML::Xercesc::ContentHandler_startElement", _wrap_ContentHandler_startElement},
{"XML::Xercesc::ContentHandler_startPrefixMapping", _wrap_ContentHandler_startPrefixMapping},
{"XML::Xercesc::ContentHandler_endPrefixMapping", _wrap_ContentHandler_endPrefixMapping},
{"XML::Xercesc::ContentHandler_skippedEntity", _wrap_ContentHandler_skippedEntity},
{"XML::Xercesc::delete_LexicalHandler", _wrap_delete_LexicalHandler},
{"XML::Xercesc::LexicalHandler_comment", _wrap_LexicalHandler_comment},
{"XML::Xercesc::LexicalHandler_endCDATA", _wrap_LexicalHandler_endCDATA},
{"XML::Xercesc::LexicalHandler_endDTD", _wrap_LexicalHandler_endDTD},
{"XML::Xercesc::LexicalHandler_endEntity", _wrap_LexicalHandler_endEntity},
{"XML::Xercesc::LexicalHandler_startCDATA", _wrap_LexicalHandler_startCDATA},
{"XML::Xercesc::LexicalHandler_startDTD", _wrap_LexicalHandler_startDTD},
{"XML::Xercesc::LexicalHandler_startEntity", _wrap_LexicalHandler_startEntity},
{"XML::Xercesc::delete_DeclHandler", _wrap_delete_DeclHandler},
{"XML::Xercesc::DeclHandler_elementDecl", _wrap_DeclHandler_elementDecl},
{"XML::Xercesc::DeclHandler_attributeDecl", _wrap_DeclHandler_attributeDecl},
{"XML::Xercesc::DeclHandler_internalEntityDecl", _wrap_DeclHandler_internalEntityDecl},
{"XML::Xercesc::DeclHandler_externalEntityDecl", _wrap_DeclHandler_externalEntityDecl},
{"XML::Xercesc::DefaultHandler_characters", _wrap_DefaultHandler_characters},
{"XML::Xercesc::DefaultHandler_endDocument", _wrap_DefaultHandler_endDocument},
{"XML::Xercesc::DefaultHandler_endElement", _wrap_DefaultHandler_endElement},
{"XML::Xercesc::DefaultHandler_ignorableWhitespace", _wrap_DefaultHandler_ignorableWhitespace},
{"XML::Xercesc::DefaultHandler_processingInstruction", _wrap_DefaultHandler_processingInstruction},
{"XML::Xercesc::DefaultHandler_resetDocument", _wrap_DefaultHandler_resetDocument},
{"XML::Xercesc::DefaultHandler_setDocumentLocator", _wrap_DefaultHandler_setDocumentLocator},
{"XML::Xercesc::DefaultHandler_startDocument", _wrap_DefaultHandler_startDocument},
{"XML::Xercesc::DefaultHandler_startElement", _wrap_DefaultHandler_startElement},
{"XML::Xercesc::DefaultHandler_startPrefixMapping", _wrap_DefaultHandler_startPrefixMapping},
{"XML::Xercesc::DefaultHandler_endPrefixMapping", _wrap_DefaultHandler_endPrefixMapping},
{"XML::Xercesc::DefaultHandler_skippedEntity", _wrap_DefaultHandler_skippedEntity},
{"XML::Xercesc::DefaultHandler_resolveEntity", _wrap_DefaultHandler_resolveEntity},
{"XML::Xercesc::DefaultHandler_error", _wrap_DefaultHandler_error},
{"XML::Xercesc::DefaultHandler_fatalError", _wrap_DefaultHandler_fatalError},
{"XML::Xercesc::DefaultHandler_warning", _wrap_DefaultHandler_warning},
{"XML::Xercesc::DefaultHandler_resetErrors", _wrap_DefaultHandler_resetErrors},
{"XML::Xercesc::DefaultHandler_notationDecl", _wrap_DefaultHandler_notationDecl},
{"XML::Xercesc::DefaultHandler_resetDocType", _wrap_DefaultHandler_resetDocType},
{"XML::Xercesc::DefaultHandler_unparsedEntityDecl", _wrap_DefaultHandler_unparsedEntityDecl},
{"XML::Xercesc::DefaultHandler_comment", _wrap_DefaultHandler_comment},
{"XML::Xercesc::DefaultHandler_endCDATA", _wrap_DefaultHandler_endCDATA},
{"XML::Xercesc::DefaultHandler_endDTD", _wrap_DefaultHandler_endDTD},
{"XML::Xercesc::DefaultHandler_endEntity", _wrap_DefaultHandler_endEntity},
{"XML::Xercesc::DefaultHandler_startCDATA", _wrap_DefaultHandler_startCDATA},
{"XML::Xercesc::DefaultHandler_startDTD", _wrap_DefaultHandler_startDTD},
{"XML::Xercesc::DefaultHandler_startEntity", _wrap_DefaultHandler_startEntity},
{"XML::Xercesc::DefaultHandler_elementDecl", _wrap_DefaultHandler_elementDecl},
{"XML::Xercesc::DefaultHandler_attributeDecl", _wrap_DefaultHandler_attributeDecl},
{"XML::Xercesc::DefaultHandler_internalEntityDecl", _wrap_DefaultHandler_internalEntityDecl},
{"XML::Xercesc::DefaultHandler_externalEntityDecl", _wrap_DefaultHandler_externalEntityDecl},
{"XML::Xercesc::new_DefaultHandler", _wrap_new_DefaultHandler},
{"XML::Xercesc::delete_DefaultHandler", _wrap_delete_DefaultHandler},
{"XML::Xercesc::delete_InputSource", _wrap_delete_InputSource},
{"XML::Xercesc::InputSource_makeStream", _wrap_InputSource_makeStream},
{"XML::Xercesc::InputSource_getEncoding", _wrap_InputSource_getEncoding},
{"XML::Xercesc::InputSource_getPublicId", _wrap_InputSource_getPublicId},
{"XML::Xercesc::InputSource_getSystemId", _wrap_InputSource_getSystemId},
{"XML::Xercesc::InputSource_getIssueFatalErrorIfNotFound", _wrap_InputSource_getIssueFatalErrorIfNotFound},
{"XML::Xercesc::InputSource_getMemoryManager", _wrap_InputSource_getMemoryManager},
{"XML::Xercesc::InputSource_setEncoding", _wrap_InputSource_setEncoding},
{"XML::Xercesc::InputSource_setPublicId", _wrap_InputSource_setPublicId},
{"XML::Xercesc::InputSource_setSystemId", _wrap_InputSource_setSystemId},
{"XML::Xercesc::InputSource_setIssueFatalErrorIfNotFound", _wrap_InputSource_setIssueFatalErrorIfNotFound},
{"XML::Xercesc::new_MemBufInputSource", _wrap_new_MemBufInputSource},
{"XML::Xercesc::delete_MemBufInputSource", _wrap_delete_MemBufInputSource},
{"XML::Xercesc::MemBufInputSource_makeStream", _wrap_MemBufInputSource_makeStream},
{"XML::Xercesc::MemBufInputSource_setCopyBufToStream", _wrap_MemBufInputSource_setCopyBufToStream},
{"XML::Xercesc::new_StdInInputSource", _wrap_new_StdInInputSource},
{"XML::Xercesc::delete_StdInInputSource", _wrap_delete_StdInInputSource},
{"XML::Xercesc::StdInInputSource_makeStream", _wrap_StdInInputSource_makeStream},
{"XML::Xercesc::new_LocalFileInputSource", _wrap_new_LocalFileInputSource},
{"XML::Xercesc::delete_LocalFileInputSource", _wrap_delete_LocalFileInputSource},
{"XML::Xercesc::LocalFileInputSource_makeStream", _wrap_LocalFileInputSource_makeStream},
{"XML::Xercesc::new_URLInputSource", _wrap_new_URLInputSource},
{"XML::Xercesc::delete_URLInputSource", _wrap_delete_URLInputSource},
{"XML::Xercesc::URLInputSource_makeStream", _wrap_URLInputSource_makeStream},
{"XML::Xercesc::URLInputSource_urlSrc", _wrap_URLInputSource_urlSrc},
{"XML::Xercesc::new_XMLFormatter", _wrap_new_XMLFormatter},
{"XML::Xercesc::delete_XMLFormatter", _wrap_delete_XMLFormatter},
{"XML::Xercesc::XMLFormatter_formatBuf", _wrap_XMLFormatter_formatBuf},
{"XML::Xercesc::XMLFormatter_writeBOM", _wrap_XMLFormatter_writeBOM},
{"XML::Xercesc::XMLFormatter_getEncodingName", _wrap_XMLFormatter_getEncodingName},
{"XML::Xercesc::XMLFormatter_getTranscoder", _wrap_XMLFormatter_getTranscoder},
{"XML::Xercesc::XMLFormatter_setEscapeFlags", _wrap_XMLFormatter_setEscapeFlags},
{"XML::Xercesc::XMLFormatter_setUnRepFlags", _wrap_XMLFormatter_setUnRepFlags},
{"XML::Xercesc::delete_XMLFormatTarget", _wrap_delete_XMLFormatTarget},
{"XML::Xercesc::XMLFormatTarget_writeChars", _wrap_XMLFormatTarget_writeChars},
{"XML::Xercesc::XMLFormatTarget_flush", _wrap_XMLFormatTarget_flush},
{"XML::Xercesc::new_MemBufFormatTarget", _wrap_new_MemBufFormatTarget},
{"XML::Xercesc::delete_MemBufFormatTarget", _wrap_delete_MemBufFormatTarget},
{"XML::Xercesc::MemBufFormatTarget_writeChars", _wrap_MemBufFormatTarget_writeChars},
{"XML::Xercesc::MemBufFormatTarget_getRawBuffer", _wrap_MemBufFormatTarget_getRawBuffer},
{"XML::Xercesc::MemBufFormatTarget_getLen", _wrap_MemBufFormatTarget_getLen},
{"XML::Xercesc::MemBufFormatTarget_reset", _wrap_MemBufFormatTarget_reset},
{"XML::Xercesc::new_LocalFileFormatTarget", _wrap_new_LocalFileFormatTarget},
{"XML::Xercesc::delete_LocalFileFormatTarget", _wrap_delete_LocalFileFormatTarget},
{"XML::Xercesc::LocalFileFormatTarget_writeChars", _wrap_LocalFileFormatTarget_writeChars},
{"XML::Xercesc::LocalFileFormatTarget_flush", _wrap_LocalFileFormatTarget_flush},
{"XML::Xercesc::new_StdOutFormatTarget", _wrap_new_StdOutFormatTarget},
{"XML::Xercesc::delete_StdOutFormatTarget", _wrap_delete_StdOutFormatTarget},
{"XML::Xercesc::StdOutFormatTarget_writeChars", _wrap_StdOutFormatTarget_writeChars},
{"XML::Xercesc::StdOutFormatTarget_flush", _wrap_StdOutFormatTarget_flush},
{"XML::Xercesc::delete_XMLUni", _wrap_delete_XMLUni},
{"XML::Xercesc::new_XMLPScanToken", _wrap_new_XMLPScanToken},
{"XML::Xercesc::delete_XMLPScanToken", _wrap_delete_XMLPScanToken},
{"XML::Xercesc::delete_Parser", _wrap_delete_Parser},
{"XML::Xercesc::Parser_setEntityResolver", _wrap_Parser_setEntityResolver},
{"XML::Xercesc::Parser_setDTDHandler", _wrap_Parser_setDTDHandler},
{"XML::Xercesc::Parser_setDocumentHandler", _wrap_Parser_setDocumentHandler},
{"XML::Xercesc::Parser_setErrorHandler", _wrap_Parser_setErrorHandler},
{"XML::Xercesc::Parser_parse", _wrap_Parser_parse},
{"XML::Xercesc::delete_XMLDocumentHandler", _wrap_delete_XMLDocumentHandler},
{"XML::Xercesc::XMLDocumentHandler_elementTypeInfo", _wrap_XMLDocumentHandler_elementTypeInfo},
{"XML::Xercesc::delete_XMLErrorReporter", _wrap_delete_XMLErrorReporter},
{"XML::Xercesc::XMLErrorReporter_error", _wrap_XMLErrorReporter_error},
{"XML::Xercesc::XMLErrorReporter_resetErrors", _wrap_XMLErrorReporter_resetErrors},
{"XML::Xercesc::delete_XMLEntityHandler", _wrap_delete_XMLEntityHandler},
{"XML::Xercesc::delete_DocTypeHandler", _wrap_delete_DocTypeHandler},
{"XML::Xercesc::delete_SAX2XMLReader", _wrap_delete_SAX2XMLReader},
{"XML::Xercesc::SAX2XMLReader_getContentHandler", _wrap_SAX2XMLReader_getContentHandler},
{"XML::Xercesc::SAX2XMLReader_getDTDHandler", _wrap_SAX2XMLReader_getDTDHandler},
{"XML::Xercesc::SAX2XMLReader_getEntityResolver", _wrap_SAX2XMLReader_getEntityResolver},
{"XML::Xercesc::SAX2XMLReader_getErrorHandler", _wrap_SAX2XMLReader_getErrorHandler},
{"XML::Xercesc::SAX2XMLReader_getFeature", _wrap_SAX2XMLReader_getFeature},
{"XML::Xercesc::SAX2XMLReader_getProperty", _wrap_SAX2XMLReader_getProperty},
{"XML::Xercesc::SAX2XMLReader_setContentHandler", _wrap_SAX2XMLReader_setContentHandler},
{"XML::Xercesc::SAX2XMLReader_setDTDHandler", _wrap_SAX2XMLReader_setDTDHandler},
{"XML::Xercesc::SAX2XMLReader_setEntityResolver", _wrap_SAX2XMLReader_setEntityResolver},
{"XML::Xercesc::SAX2XMLReader_setErrorHandler", _wrap_SAX2XMLReader_setErrorHandler},
{"XML::Xercesc::SAX2XMLReader_setFeature", _wrap_SAX2XMLReader_setFeature},
{"XML::Xercesc::SAX2XMLReader_setProperty", _wrap_SAX2XMLReader_setProperty},
{"XML::Xercesc::SAX2XMLReader_parse", _wrap_SAX2XMLReader_parse},
{"XML::Xercesc::SAX2XMLReader_getDeclarationHandler", _wrap_SAX2XMLReader_getDeclarationHandler},
{"XML::Xercesc::SAX2XMLReader_getLexicalHandler", _wrap_SAX2XMLReader_getLexicalHandler},
{"XML::Xercesc::SAX2XMLReader_setDeclarationHandler", _wrap_SAX2XMLReader_setDeclarationHandler},
{"XML::Xercesc::SAX2XMLReader_setLexicalHandler", _wrap_SAX2XMLReader_setLexicalHandler},
{"XML::Xercesc::SAX2XMLReader_getValidator", _wrap_SAX2XMLReader_getValidator},
{"XML::Xercesc::SAX2XMLReader_getErrorCount", _wrap_SAX2XMLReader_getErrorCount},
{"XML::Xercesc::SAX2XMLReader_getExitOnFirstFatalError", _wrap_SAX2XMLReader_getExitOnFirstFatalError},
{"XML::Xercesc::SAX2XMLReader_getValidationConstraintFatal", _wrap_SAX2XMLReader_getValidationConstraintFatal},
{"XML::Xercesc::SAX2XMLReader_getGrammar", _wrap_SAX2XMLReader_getGrammar},
{"XML::Xercesc::SAX2XMLReader_getRootGrammar", _wrap_SAX2XMLReader_getRootGrammar},
{"XML::Xercesc::SAX2XMLReader_getURIText", _wrap_SAX2XMLReader_getURIText},
{"XML::Xercesc::SAX2XMLReader_getSrcOffset", _wrap_SAX2XMLReader_getSrcOffset},
{"XML::Xercesc::SAX2XMLReader_setValidator", _wrap_SAX2XMLReader_setValidator},
{"XML::Xercesc::SAX2XMLReader_setExitOnFirstFatalError", _wrap_SAX2XMLReader_setExitOnFirstFatalError},
{"XML::Xercesc::SAX2XMLReader_setValidationConstraintFatal", _wrap_SAX2XMLReader_setValidationConstraintFatal},
{"XML::Xercesc::SAX2XMLReader_parseFirst", _wrap_SAX2XMLReader_parseFirst},
{"XML::Xercesc::SAX2XMLReader_parseNext", _wrap_SAX2XMLReader_parseNext},
{"XML::Xercesc::SAX2XMLReader_parseReset", _wrap_SAX2XMLReader_parseReset},
{"XML::Xercesc::SAX2XMLReader_loadGrammar", _wrap_SAX2XMLReader_loadGrammar},
{"XML::Xercesc::SAX2XMLReader_resetCachedGrammarPool", _wrap_SAX2XMLReader_resetCachedGrammarPool},
{"XML::Xercesc::SAX2XMLReader_installAdvDocHandler", _wrap_SAX2XMLReader_installAdvDocHandler},
{"XML::Xercesc::SAX2XMLReader_removeAdvDocHandler", _wrap_SAX2XMLReader_removeAdvDocHandler},
{"XML::Xercesc::XMLReaderFactory_createXMLReader", _wrap_XMLReaderFactory_createXMLReader},
{"XML::Xercesc::new_SAXParser", _wrap_new_SAXParser},
{"XML::Xercesc::delete_SAXParser", _wrap_delete_SAXParser},
{"XML::Xercesc::SAXParser_getDocumentHandler", _wrap_SAXParser_getDocumentHandler},
{"XML::Xercesc::SAXParser_getEntityResolver", _wrap_SAXParser_getEntityResolver},
{"XML::Xercesc::SAXParser_getXMLEntityResolver", _wrap_SAXParser_getXMLEntityResolver},
{"XML::Xercesc::SAXParser_getErrorHandler", _wrap_SAXParser_getErrorHandler},
{"XML::Xercesc::SAXParser_getPSVIHandler", _wrap_SAXParser_getPSVIHandler},
{"XML::Xercesc::SAXParser_getValidator", _wrap_SAXParser_getValidator},
{"XML::Xercesc::SAXParser_getValidationScheme", _wrap_SAXParser_getValidationScheme},
{"XML::Xercesc::SAXParser_getDoSchema", _wrap_SAXParser_getDoSchema},
{"XML::Xercesc::SAXParser_getValidationSchemaFullChecking", _wrap_SAXParser_getValidationSchemaFullChecking},
{"XML::Xercesc::SAXParser_getErrorCount", _wrap_SAXParser_getErrorCount},
{"XML::Xercesc::SAXParser_getDoNamespaces", _wrap_SAXParser_getDoNamespaces},
{"XML::Xercesc::SAXParser_getExitOnFirstFatalError", _wrap_SAXParser_getExitOnFirstFatalError},
{"XML::Xercesc::SAXParser_getValidationConstraintFatal", _wrap_SAXParser_getValidationConstraintFatal},
{"XML::Xercesc::SAXParser_getExternalSchemaLocation", _wrap_SAXParser_getExternalSchemaLocation},
{"XML::Xercesc::SAXParser_getExternalNoNamespaceSchemaLocation", _wrap_SAXParser_getExternalNoNamespaceSchemaLocation},
{"XML::Xercesc::SAXParser_getSecurityManager", _wrap_SAXParser_getSecurityManager},
{"XML::Xercesc::SAXParser_getLoadExternalDTD", _wrap_SAXParser_getLoadExternalDTD},
{"XML::Xercesc::SAXParser_isCachingGrammarFromParse", _wrap_SAXParser_isCachingGrammarFromParse},
{"XML::Xercesc::SAXParser_isUsingCachedGrammarInParse", _wrap_SAXParser_isUsingCachedGrammarInParse},
{"XML::Xercesc::SAXParser_getCalculateSrcOfs", _wrap_SAXParser_getCalculateSrcOfs},
{"XML::Xercesc::SAXParser_getStandardUriConformant", _wrap_SAXParser_getStandardUriConformant},
{"XML::Xercesc::SAXParser_getGrammar", _wrap_SAXParser_getGrammar},
{"XML::Xercesc::SAXParser_getRootGrammar", _wrap_SAXParser_getRootGrammar},
{"XML::Xercesc::SAXParser_getURIText", _wrap_SAXParser_getURIText},
{"XML::Xercesc::SAXParser_getSrcOffset", _wrap_SAXParser_getSrcOffset},
{"XML::Xercesc::SAXParser_setDoNamespaces", _wrap_SAXParser_setDoNamespaces},
{"XML::Xercesc::SAXParser_setValidationScheme", _wrap_SAXParser_setValidationScheme},
{"XML::Xercesc::SAXParser_setDoSchema", _wrap_SAXParser_setDoSchema},
{"XML::Xercesc::SAXParser_setValidationSchemaFullChecking", _wrap_SAXParser_setValidationSchemaFullChecking},
{"XML::Xercesc::SAXParser_setExitOnFirstFatalError", _wrap_SAXParser_setExitOnFirstFatalError},
{"XML::Xercesc::SAXParser_setValidationConstraintFatal", _wrap_SAXParser_setValidationConstraintFatal},
{"XML::Xercesc::SAXParser_setExternalSchemaLocation", _wrap_SAXParser_setExternalSchemaLocation},
{"XML::Xercesc::SAXParser_setExternalNoNamespaceSchemaLocation", _wrap_SAXParser_setExternalNoNamespaceSchemaLocation},
{"XML::Xercesc::SAXParser_setSecurityManager", _wrap_SAXParser_setSecurityManager},
{"XML::Xercesc::SAXParser_setLoadExternalDTD", _wrap_SAXParser_setLoadExternalDTD},
{"XML::Xercesc::SAXParser_cacheGrammarFromParse", _wrap_SAXParser_cacheGrammarFromParse},
{"XML::Xercesc::SAXParser_useCachedGrammarInParse", _wrap_SAXParser_useCachedGrammarInParse},
{"XML::Xercesc::SAXParser_setCalculateSrcOfs", _wrap_SAXParser_setCalculateSrcOfs},
{"XML::Xercesc::SAXParser_setStandardUriConformant", _wrap_SAXParser_setStandardUriConformant},
{"XML::Xercesc::SAXParser_useScanner", _wrap_SAXParser_useScanner},
{"XML::Xercesc::SAXParser_installAdvDocHandler", _wrap_SAXParser_installAdvDocHandler},
{"XML::Xercesc::SAXParser_removeAdvDocHandler", _wrap_SAXParser_removeAdvDocHandler},
{"XML::Xercesc::SAXParser_parseFirst", _wrap_SAXParser_parseFirst},
{"XML::Xercesc::SAXParser_parseNext", _wrap_SAXParser_parseNext},
{"XML::Xercesc::SAXParser_parseReset", _wrap_SAXParser_parseReset},
{"XML::Xercesc::SAXParser_loadGrammar", _wrap_SAXParser_loadGrammar},
{"XML::Xercesc::SAXParser_resetCachedGrammarPool", _wrap_SAXParser_resetCachedGrammarPool},
{"XML::Xercesc::SAXParser_parse", _wrap_SAXParser_parse},
{"XML::Xercesc::SAXParser_setDocumentHandler", _wrap_SAXParser_setDocumentHandler},
{"XML::Xercesc::SAXParser_setDTDHandler", _wrap_SAXParser_setDTDHandler},
{"XML::Xercesc::SAXParser_setErrorHandler", _wrap_SAXParser_setErrorHandler},
{"XML::Xercesc::SAXParser_setPSVIHandler", _wrap_SAXParser_setPSVIHandler},
{"XML::Xercesc::SAXParser_setEntityResolver", _wrap_SAXParser_setEntityResolver},
{"XML::Xercesc::SAXParser_setXMLEntityResolver", _wrap_SAXParser_setXMLEntityResolver},
{"XML::Xercesc::SAXParser_error", _wrap_SAXParser_error},
{"XML::Xercesc::SAXParser_resetErrors", _wrap_SAXParser_resetErrors},
{"XML::Xercesc::new_DOMException", _wrap_new_DOMException},
{"XML::Xercesc::delete_DOMException", _wrap_delete_DOMException},
{"XML::Xercesc::DOMException_code_set", _wrap_DOMException_code_set},
{"XML::Xercesc::DOMException_code_get", _wrap_DOMException_code_get},
{"XML::Xercesc::DOMException_msg_set", _wrap_DOMException_msg_set},
{"XML::Xercesc::DOMException_msg_get", _wrap_DOMException_msg_get},
{"XML::Xercesc::delete_DOMDocumentRange", _wrap_delete_DOMDocumentRange},
{"XML::Xercesc::DOMDocumentRange_createRange", _wrap_DOMDocumentRange_createRange},
{"XML::Xercesc::delete_DOMDocumentTraversal", _wrap_delete_DOMDocumentTraversal},
{"XML::Xercesc::DOMDocumentTraversal_createNodeIterator", _wrap_DOMDocumentTraversal_createNodeIterator},
{"XML::Xercesc::DOMDocumentTraversal_createTreeWalker", _wrap_DOMDocumentTraversal_createTreeWalker},
{"XML::Xercesc::delete_DOMNodeFilter", _wrap_delete_DOMNodeFilter},
{"XML::Xercesc::DOMNodeFilter_acceptNode", _wrap_DOMNodeFilter_acceptNode},
{"XML::Xercesc::delete_DOMNodeIterator", _wrap_delete_DOMNodeIterator},
{"XML::Xercesc::DOMNodeIterator_getRoot", _wrap_DOMNodeIterator_getRoot},
{"XML::Xercesc::DOMNodeIterator_getWhatToShow", _wrap_DOMNodeIterator_getWhatToShow},
{"XML::Xercesc::DOMNodeIterator_getFilter", _wrap_DOMNodeIterator_getFilter},
{"XML::Xercesc::DOMNodeIterator_getExpandEntityReferences", _wrap_DOMNodeIterator_getExpandEntityReferences},
{"XML::Xercesc::DOMNodeIterator_nextNode", _wrap_DOMNodeIterator_nextNode},
{"XML::Xercesc::DOMNodeIterator_previousNode", _wrap_DOMNodeIterator_previousNode},
{"XML::Xercesc::DOMNodeIterator_detach", _wrap_DOMNodeIterator_detach},
{"XML::Xercesc::DOMNodeIterator_release", _wrap_DOMNodeIterator_release},
{"XML::Xercesc::delete_DOMRange", _wrap_delete_DOMRange},
{"XML::Xercesc::DOMRange_getStartContainer", _wrap_DOMRange_getStartContainer},
{"XML::Xercesc::DOMRange_getStartOffset", _wrap_DOMRange_getStartOffset},
{"XML::Xercesc::DOMRange_getEndContainer", _wrap_DOMRange_getEndContainer},
{"XML::Xercesc::DOMRange_getEndOffset", _wrap_DOMRange_getEndOffset},
{"XML::Xercesc::DOMRange_getCollapsed", _wrap_DOMRange_getCollapsed},
{"XML::Xercesc::DOMRange_getCommonAncestorContainer", _wrap_DOMRange_getCommonAncestorContainer},
{"XML::Xercesc::DOMRange_setStart", _wrap_DOMRange_setStart},
{"XML::Xercesc::DOMRange_setEnd", _wrap_DOMRange_setEnd},
{"XML::Xercesc::DOMRange_setStartBefore", _wrap_DOMRange_setStartBefore},
{"XML::Xercesc::DOMRange_setStartAfter", _wrap_DOMRange_setStartAfter},
{"XML::Xercesc::DOMRange_setEndBefore", _wrap_DOMRange_setEndBefore},
{"XML::Xercesc::DOMRange_setEndAfter", _wrap_DOMRange_setEndAfter},
{"XML::Xercesc::DOMRange_collapse", _wrap_DOMRange_collapse},
{"XML::Xercesc::DOMRange_selectNode", _wrap_DOMRange_selectNode},
{"XML::Xercesc::DOMRange_selectNodeContents", _wrap_DOMRange_selectNodeContents},
{"XML::Xercesc::DOMRange_compareBoundaryPoints", _wrap_DOMRange_compareBoundaryPoints},
{"XML::Xercesc::DOMRange_deleteContents", _wrap_DOMRange_deleteContents},
{"XML::Xercesc::DOMRange_extractContents", _wrap_DOMRange_extractContents},
{"XML::Xercesc::DOMRange_cloneContents", _wrap_DOMRange_cloneContents},
{"XML::Xercesc::DOMRange_insertNode", _wrap_DOMRange_insertNode},
{"XML::Xercesc::DOMRange_surroundContents", _wrap_DOMRange_surroundContents},
{"XML::Xercesc::DOMRange_cloneRange", _wrap_DOMRange_cloneRange},
{"XML::Xercesc::DOMRange_toString", _wrap_DOMRange_toString},
{"XML::Xercesc::DOMRange_detach", _wrap_DOMRange_detach},
{"XML::Xercesc::DOMRange_release", _wrap_DOMRange_release},
{"XML::Xercesc::new_DOMRangeException", _wrap_new_DOMRangeException},
{"XML::Xercesc::delete_DOMRangeException", _wrap_delete_DOMRangeException},
{"XML::Xercesc::DOMRangeException_code_set", _wrap_DOMRangeException_code_set},
{"XML::Xercesc::DOMRangeException_code_get", _wrap_DOMRangeException_code_get},
{"XML::Xercesc::delete_DOMTreeWalker", _wrap_delete_DOMTreeWalker},
{"XML::Xercesc::DOMTreeWalker_getRoot", _wrap_DOMTreeWalker_getRoot},
{"XML::Xercesc::DOMTreeWalker_getWhatToShow", _wrap_DOMTreeWalker_getWhatToShow},
{"XML::Xercesc::DOMTreeWalker_getFilter", _wrap_DOMTreeWalker_getFilter},
{"XML::Xercesc::DOMTreeWalker_getExpandEntityReferences", _wrap_DOMTreeWalker_getExpandEntityReferences},
{"XML::Xercesc::DOMTreeWalker_getCurrentNode", _wrap_DOMTreeWalker_getCurrentNode},
{"XML::Xercesc::DOMTreeWalker_parentNode", _wrap_DOMTreeWalker_parentNode},
{"XML::Xercesc::DOMTreeWalker_firstChild", _wrap_DOMTreeWalker_firstChild},
{"XML::Xercesc::DOMTreeWalker_lastChild", _wrap_DOMTreeWalker_lastChild},
{"XML::Xercesc::DOMTreeWalker_previousSibling", _wrap_DOMTreeWalker_previousSibling},
{"XML::Xercesc::DOMTreeWalker_nextSibling", _wrap_DOMTreeWalker_nextSibling},
{"XML::Xercesc::DOMTreeWalker_previousNode", _wrap_DOMTreeWalker_previousNode},
{"XML::Xercesc::DOMTreeWalker_nextNode", _wrap_DOMTreeWalker_nextNode},
{"XML::Xercesc::DOMTreeWalker_setCurrentNode", _wrap_DOMTreeWalker_setCurrentNode},
{"XML::Xercesc::DOMTreeWalker_release", _wrap_DOMTreeWalker_release},
{"XML::Xercesc::delete_DOMNode", _wrap_delete_DOMNode},
{"XML::Xercesc::DOMNode_getNodeName", _wrap_DOMNode_getNodeName},
{"XML::Xercesc::DOMNode_getNodeValue", _wrap_DOMNode_getNodeValue},
{"XML::Xercesc::DOMNode_getNodeType", _wrap_DOMNode_getNodeType},
{"XML::Xercesc::DOMNode_getParentNode", _wrap_DOMNode_getParentNode},
{"XML::Xercesc::DOMNode_getChildNodes", _wrap_DOMNode_getChildNodes},
{"XML::Xercesc::DOMNode_getFirstChild", _wrap_DOMNode_getFirstChild},
{"XML::Xercesc::DOMNode_getLastChild", _wrap_DOMNode_getLastChild},
{"XML::Xercesc::DOMNode_getPreviousSibling", _wrap_DOMNode_getPreviousSibling},
{"XML::Xercesc::DOMNode_getNextSibling", _wrap_DOMNode_getNextSibling},
{"XML::Xercesc::DOMNode_getAttributes", _wrap_DOMNode_getAttributes},
{"XML::Xercesc::DOMNode_getOwnerDocument", _wrap_DOMNode_getOwnerDocument},
{"XML::Xercesc::DOMNode_cloneNode", _wrap_DOMNode_cloneNode},
{"XML::Xercesc::DOMNode_insertBefore", _wrap_DOMNode_insertBefore},
{"XML::Xercesc::DOMNode_replaceChild", _wrap_DOMNode_replaceChild},
{"XML::Xercesc::DOMNode_removeChild", _wrap_DOMNode_removeChild},
{"XML::Xercesc::DOMNode_appendChild", _wrap_DOMNode_appendChild},
{"XML::Xercesc::DOMNode_hasChildNodes", _wrap_DOMNode_hasChildNodes},
{"XML::Xercesc::DOMNode_setNodeValue", _wrap_DOMNode_setNodeValue},
{"XML::Xercesc::DOMNode_normalize", _wrap_DOMNode_normalize},
{"XML::Xercesc::DOMNode_isSupported", _wrap_DOMNode_isSupported},
{"XML::Xercesc::DOMNode_getNamespaceURI", _wrap_DOMNode_getNamespaceURI},
{"XML::Xercesc::DOMNode_getPrefix", _wrap_DOMNode_getPrefix},
{"XML::Xercesc::DOMNode_getLocalName", _wrap_DOMNode_getLocalName},
{"XML::Xercesc::DOMNode_setPrefix", _wrap_DOMNode_setPrefix},
{"XML::Xercesc::DOMNode_hasAttributes", _wrap_DOMNode_hasAttributes},
{"XML::Xercesc::DOMNode_isSameNode", _wrap_DOMNode_isSameNode},
{"XML::Xercesc::DOMNode_isEqualNode", _wrap_DOMNode_isEqualNode},
{"XML::Xercesc::DOMNode_setUserData", _wrap_DOMNode_setUserData},
{"XML::Xercesc::DOMNode_getUserData", _wrap_DOMNode_getUserData},
{"XML::Xercesc::DOMNode_getBaseURI", _wrap_DOMNode_getBaseURI},
{"XML::Xercesc::DOMNode_compareTreePosition", _wrap_DOMNode_compareTreePosition},
{"XML::Xercesc::DOMNode_getTextContent", _wrap_DOMNode_getTextContent},
{"XML::Xercesc::DOMNode_setTextContent", _wrap_DOMNode_setTextContent},
{"XML::Xercesc::DOMNode_lookupNamespacePrefix", _wrap_DOMNode_lookupNamespacePrefix},
{"XML::Xercesc::DOMNode_isDefaultNamespace", _wrap_DOMNode_isDefaultNamespace},
{"XML::Xercesc::DOMNode_lookupNamespaceURI", _wrap_DOMNode_lookupNamespaceURI},
{"XML::Xercesc::DOMNode_getInterface", _wrap_DOMNode_getInterface},
{"XML::Xercesc::DOMNode_release", _wrap_DOMNode_release},
{"XML::Xercesc::DOMNode_operator_equal_to", _wrap_DOMNode_operator_equal_to},
{"XML::Xercesc::DOMNode_operator_not_equal_to", _wrap_DOMNode_operator_not_equal_to},
{"XML::Xercesc::delete_DOMAttr", _wrap_delete_DOMAttr},
{"XML::Xercesc::DOMAttr_getName", _wrap_DOMAttr_getName},
{"XML::Xercesc::DOMAttr_getSpecified", _wrap_DOMAttr_getSpecified},
{"XML::Xercesc::DOMAttr_getValue", _wrap_DOMAttr_getValue},
{"XML::Xercesc::DOMAttr_setValue", _wrap_DOMAttr_setValue},
{"XML::Xercesc::DOMAttr_getOwnerElement", _wrap_DOMAttr_getOwnerElement},
{"XML::Xercesc::DOMAttr_isId", _wrap_DOMAttr_isId},
{"XML::Xercesc::DOMAttr_getTypeInfo", _wrap_DOMAttr_getTypeInfo},
{"XML::Xercesc::delete_DOMCharacterData", _wrap_delete_DOMCharacterData},
{"XML::Xercesc::DOMCharacterData_getData", _wrap_DOMCharacterData_getData},
{"XML::Xercesc::DOMCharacterData_getLength", _wrap_DOMCharacterData_getLength},
{"XML::Xercesc::DOMCharacterData_substringData", _wrap_DOMCharacterData_substringData},
{"XML::Xercesc::DOMCharacterData_appendData", _wrap_DOMCharacterData_appendData},
{"XML::Xercesc::DOMCharacterData_insertData", _wrap_DOMCharacterData_insertData},
{"XML::Xercesc::DOMCharacterData_deleteData", _wrap_DOMCharacterData_deleteData},
{"XML::Xercesc::DOMCharacterData_replaceData", _wrap_DOMCharacterData_replaceData},
{"XML::Xercesc::DOMCharacterData_setData", _wrap_DOMCharacterData_setData},
{"XML::Xercesc::delete_DOMText", _wrap_delete_DOMText},
{"XML::Xercesc::DOMText_splitText", _wrap_DOMText_splitText},
{"XML::Xercesc::DOMText_getIsWhitespaceInElementContent", _wrap_DOMText_getIsWhitespaceInElementContent},
{"XML::Xercesc::DOMText_getWholeText", _wrap_DOMText_getWholeText},
{"XML::Xercesc::DOMText_replaceWholeText", _wrap_DOMText_replaceWholeText},
{"XML::Xercesc::DOMText_isIgnorableWhitespace", _wrap_DOMText_isIgnorableWhitespace},
{"XML::Xercesc::delete_DOMCDATASection", _wrap_delete_DOMCDATASection},
{"XML::Xercesc::delete_DOMComment", _wrap_delete_DOMComment},
{"XML::Xercesc::delete_DOMDocument", _wrap_delete_DOMDocument},
{"XML::Xercesc::DOMDocument_createElement", _wrap_DOMDocument_createElement},
{"XML::Xercesc::DOMDocument_createDocumentFragment", _wrap_DOMDocument_createDocumentFragment},
{"XML::Xercesc::DOMDocument_createTextNode", _wrap_DOMDocument_createTextNode},
{"XML::Xercesc::DOMDocument_createComment", _wrap_DOMDocument_createComment},
{"XML::Xercesc::DOMDocument_createCDATASection", _wrap_DOMDocument_createCDATASection},
{"XML::Xercesc::DOMDocument_createProcessingInstruction", _wrap_DOMDocument_createProcessingInstruction},
{"XML::Xercesc::DOMDocument_createAttribute", _wrap_DOMDocument_createAttribute},
{"XML::Xercesc::DOMDocument_createEntityReference", _wrap_DOMDocument_createEntityReference},
{"XML::Xercesc::DOMDocument_getDoctype", _wrap_DOMDocument_getDoctype},
{"XML::Xercesc::DOMDocument_getImplementation", _wrap_DOMDocument_getImplementation},
{"XML::Xercesc::DOMDocument_getDocumentElement", _wrap_DOMDocument_getDocumentElement},
{"XML::Xercesc::DOMDocument_getElementsByTagName", _wrap_DOMDocument_getElementsByTagName},
{"XML::Xercesc::DOMDocument_importNode", _wrap_DOMDocument_importNode},
{"XML::Xercesc::DOMDocument_createAttributeNS", _wrap_DOMDocument_createAttributeNS},
{"XML::Xercesc::DOMDocument_getElementsByTagNameNS", _wrap_DOMDocument_getElementsByTagNameNS},
{"XML::Xercesc::DOMDocument_getElementById", _wrap_DOMDocument_getElementById},
{"XML::Xercesc::DOMDocument_getActualEncoding", _wrap_DOMDocument_getActualEncoding},
{"XML::Xercesc::DOMDocument_setActualEncoding", _wrap_DOMDocument_setActualEncoding},
{"XML::Xercesc::DOMDocument_getEncoding", _wrap_DOMDocument_getEncoding},
{"XML::Xercesc::DOMDocument_setEncoding", _wrap_DOMDocument_setEncoding},
{"XML::Xercesc::DOMDocument_getStandalone", _wrap_DOMDocument_getStandalone},
{"XML::Xercesc::DOMDocument_setStandalone", _wrap_DOMDocument_setStandalone},
{"XML::Xercesc::DOMDocument_getVersion", _wrap_DOMDocument_getVersion},
{"XML::Xercesc::DOMDocument_setVersion", _wrap_DOMDocument_setVersion},
{"XML::Xercesc::DOMDocument_getDocumentURI", _wrap_DOMDocument_getDocumentURI},
{"XML::Xercesc::DOMDocument_setDocumentURI", _wrap_DOMDocument_setDocumentURI},
{"XML::Xercesc::DOMDocument_getStrictErrorChecking", _wrap_DOMDocument_getStrictErrorChecking},
{"XML::Xercesc::DOMDocument_setStrictErrorChecking", _wrap_DOMDocument_setStrictErrorChecking},
{"XML::Xercesc::DOMDocument_renameNode", _wrap_DOMDocument_renameNode},
{"XML::Xercesc::DOMDocument_adoptNode", _wrap_DOMDocument_adoptNode},
{"XML::Xercesc::DOMDocument_normalizeDocument", _wrap_DOMDocument_normalizeDocument},
{"XML::Xercesc::DOMDocument_getDOMConfiguration", _wrap_DOMDocument_getDOMConfiguration},
{"XML::Xercesc::DOMDocument_createEntity", _wrap_DOMDocument_createEntity},
{"XML::Xercesc::DOMDocument_createDocumentType", _wrap_DOMDocument_createDocumentType},
{"XML::Xercesc::DOMDocument_createNotation", _wrap_DOMDocument_createNotation},
{"XML::Xercesc::DOMDocument_createElementNS", _wrap_DOMDocument_createElementNS},
{"XML::Xercesc::DOMDocument_toDOMNode", _wrap_DOMDocument_toDOMNode},
{"XML::Xercesc::DOMDocument_toDOMDocumentTraversal", _wrap_DOMDocument_toDOMDocumentTraversal},
{"XML::Xercesc::delete_DOMDocumentFragment", _wrap_delete_DOMDocumentFragment},
{"XML::Xercesc::delete_DOMDocumentType", _wrap_delete_DOMDocumentType},
{"XML::Xercesc::DOMDocumentType_getName", _wrap_DOMDocumentType_getName},
{"XML::Xercesc::DOMDocumentType_getEntities", _wrap_DOMDocumentType_getEntities},
{"XML::Xercesc::DOMDocumentType_getNotations", _wrap_DOMDocumentType_getNotations},
{"XML::Xercesc::DOMDocumentType_getPublicId", _wrap_DOMDocumentType_getPublicId},
{"XML::Xercesc::DOMDocumentType_getSystemId", _wrap_DOMDocumentType_getSystemId},
{"XML::Xercesc::DOMDocumentType_getInternalSubset", _wrap_DOMDocumentType_getInternalSubset},
{"XML::Xercesc::delete_DOMImplementationLS", _wrap_delete_DOMImplementationLS},
{"XML::Xercesc::DOMImplementationLS_createDOMBuilder", _wrap_DOMImplementationLS_createDOMBuilder},
{"XML::Xercesc::DOMImplementationLS_createDOMWriter", _wrap_DOMImplementationLS_createDOMWriter},
{"XML::Xercesc::DOMImplementationLS_createDOMInputSource", _wrap_DOMImplementationLS_createDOMInputSource},
{"XML::Xercesc::delete_DOMImplementation", _wrap_delete_DOMImplementation},
{"XML::Xercesc::DOMImplementation_hasFeature", _wrap_DOMImplementation_hasFeature},
{"XML::Xercesc::DOMImplementation_createDocumentType", _wrap_DOMImplementation_createDocumentType},
{"XML::Xercesc::DOMImplementation_getInterface", _wrap_DOMImplementation_getInterface},
{"XML::Xercesc::DOMImplementation_createDocument", _wrap_DOMImplementation_createDocument},
{"XML::Xercesc::DOMImplementation_getImplementation", _wrap_DOMImplementation_getImplementation},
{"XML::Xercesc::delete_DOMElement", _wrap_delete_DOMElement},
{"XML::Xercesc::DOMElement_getTagName", _wrap_DOMElement_getTagName},
{"XML::Xercesc::DOMElement_getAttribute", _wrap_DOMElement_getAttribute},
{"XML::Xercesc::DOMElement_getAttributeNode", _wrap_DOMElement_getAttributeNode},
{"XML::Xercesc::DOMElement_getElementsByTagName", _wrap_DOMElement_getElementsByTagName},
{"XML::Xercesc::DOMElement_setAttribute", _wrap_DOMElement_setAttribute},
{"XML::Xercesc::DOMElement_setAttributeNode", _wrap_DOMElement_setAttributeNode},
{"XML::Xercesc::DOMElement_removeAttributeNode", _wrap_DOMElement_removeAttributeNode},
{"XML::Xercesc::DOMElement_removeAttribute", _wrap_DOMElement_removeAttribute},
{"XML::Xercesc::DOMElement_getAttributeNS", _wrap_DOMElement_getAttributeNS},
{"XML::Xercesc::DOMElement_setAttributeNS", _wrap_DOMElement_setAttributeNS},
{"XML::Xercesc::DOMElement_removeAttributeNS", _wrap_DOMElement_removeAttributeNS},
{"XML::Xercesc::DOMElement_getAttributeNodeNS", _wrap_DOMElement_getAttributeNodeNS},
{"XML::Xercesc::DOMElement_setAttributeNodeNS", _wrap_DOMElement_setAttributeNodeNS},
{"XML::Xercesc::DOMElement_getElementsByTagNameNS", _wrap_DOMElement_getElementsByTagNameNS},
{"XML::Xercesc::DOMElement_hasAttribute", _wrap_DOMElement_hasAttribute},
{"XML::Xercesc::DOMElement_hasAttributeNS", _wrap_DOMElement_hasAttributeNS},
{"XML::Xercesc::DOMElement_setIdAttribute", _wrap_DOMElement_setIdAttribute},
{"XML::Xercesc::DOMElement_setIdAttributeNS", _wrap_DOMElement_setIdAttributeNS},
{"XML::Xercesc::DOMElement_setIdAttributeNode", _wrap_DOMElement_setIdAttributeNode},
{"XML::Xercesc::DOMElement_getTypeInfo", _wrap_DOMElement_getTypeInfo},
{"XML::Xercesc::delete_DOMEntity", _wrap_delete_DOMEntity},
{"XML::Xercesc::DOMEntity_getPublicId", _wrap_DOMEntity_getPublicId},
{"XML::Xercesc::DOMEntity_getSystemId", _wrap_DOMEntity_getSystemId},
{"XML::Xercesc::DOMEntity_getNotationName", _wrap_DOMEntity_getNotationName},
{"XML::Xercesc::DOMEntity_getActualEncoding", _wrap_DOMEntity_getActualEncoding},
{"XML::Xercesc::DOMEntity_setActualEncoding", _wrap_DOMEntity_setActualEncoding},
{"XML::Xercesc::DOMEntity_getEncoding", _wrap_DOMEntity_getEncoding},
{"XML::Xercesc::DOMEntity_setEncoding", _wrap_DOMEntity_setEncoding},
{"XML::Xercesc::DOMEntity_getVersion", _wrap_DOMEntity_getVersion},
{"XML::Xercesc::DOMEntity_setVersion", _wrap_DOMEntity_setVersion},
{"XML::Xercesc::delete_DOMEntityReference", _wrap_delete_DOMEntityReference},
{"XML::Xercesc::delete_DOMNamedNodeMap", _wrap_delete_DOMNamedNodeMap},
{"XML::Xercesc::DOMNamedNodeMap_setNamedItem", _wrap_DOMNamedNodeMap_setNamedItem},
{"XML::Xercesc::DOMNamedNodeMap_item", _wrap_DOMNamedNodeMap_item},
{"XML::Xercesc::DOMNamedNodeMap_getNamedItem", _wrap_DOMNamedNodeMap_getNamedItem},
{"XML::Xercesc::DOMNamedNodeMap_getLength", _wrap_DOMNamedNodeMap_getLength},
{"XML::Xercesc::DOMNamedNodeMap_removeNamedItem", _wrap_DOMNamedNodeMap_removeNamedItem},
{"XML::Xercesc::DOMNamedNodeMap_getNamedItemNS", _wrap_DOMNamedNodeMap_getNamedItemNS},
{"XML::Xercesc::DOMNamedNodeMap_setNamedItemNS", _wrap_DOMNamedNodeMap_setNamedItemNS},
{"XML::Xercesc::DOMNamedNodeMap_removeNamedItemNS", _wrap_DOMNamedNodeMap_removeNamedItemNS},
{"XML::Xercesc::delete_DOMNodeList", _wrap_delete_DOMNodeList},
{"XML::Xercesc::DOMNodeList_item", _wrap_DOMNodeList_item},
{"XML::Xercesc::DOMNodeList_getLength", _wrap_DOMNodeList_getLength},
{"XML::Xercesc::delete_DOMNotation", _wrap_delete_DOMNotation},
{"XML::Xercesc::DOMNotation_getPublicId", _wrap_DOMNotation_getPublicId},
{"XML::Xercesc::DOMNotation_getSystemId", _wrap_DOMNotation_getSystemId},
{"XML::Xercesc::delete_DOMProcessingInstruction", _wrap_delete_DOMProcessingInstruction},
{"XML::Xercesc::DOMProcessingInstruction_getTarget", _wrap_DOMProcessingInstruction_getTarget},
{"XML::Xercesc::DOMProcessingInstruction_getData", _wrap_DOMProcessingInstruction_getData},
{"XML::Xercesc::DOMProcessingInstruction_setData", _wrap_DOMProcessingInstruction_setData},
{"XML::Xercesc::delete_DOMInputSource", _wrap_delete_DOMInputSource},
{"XML::Xercesc::DOMInputSource_getEncoding", _wrap_DOMInputSource_getEncoding},
{"XML::Xercesc::DOMInputSource_getPublicId", _wrap_DOMInputSource_getPublicId},
{"XML::Xercesc::DOMInputSource_getSystemId", _wrap_DOMInputSource_getSystemId},
{"XML::Xercesc::DOMInputSource_getBaseURI", _wrap_DOMInputSource_getBaseURI},
{"XML::Xercesc::DOMInputSource_setEncoding", _wrap_DOMInputSource_setEncoding},
{"XML::Xercesc::DOMInputSource_setPublicId", _wrap_DOMInputSource_setPublicId},
{"XML::Xercesc::DOMInputSource_setSystemId", _wrap_DOMInputSource_setSystemId},
{"XML::Xercesc::DOMInputSource_setBaseURI", _wrap_DOMInputSource_setBaseURI},
{"XML::Xercesc::DOMInputSource_makeStream", _wrap_DOMInputSource_makeStream},
{"XML::Xercesc::DOMInputSource_setIssueFatalErrorIfNotFound", _wrap_DOMInputSource_setIssueFatalErrorIfNotFound},
{"XML::Xercesc::DOMInputSource_getIssueFatalErrorIfNotFound", _wrap_DOMInputSource_getIssueFatalErrorIfNotFound},
{"XML::Xercesc::DOMInputSource_release", _wrap_DOMInputSource_release},
{"XML::Xercesc::new_Wrapper4InputSource", _wrap_new_Wrapper4InputSource},
{"XML::Xercesc::delete_Wrapper4InputSource", _wrap_delete_Wrapper4InputSource},
{"XML::Xercesc::Wrapper4InputSource_makeStream", _wrap_Wrapper4InputSource_makeStream},
{"XML::Xercesc::Wrapper4InputSource_getEncoding", _wrap_Wrapper4InputSource_getEncoding},
{"XML::Xercesc::Wrapper4InputSource_getPublicId", _wrap_Wrapper4InputSource_getPublicId},
{"XML::Xercesc::Wrapper4InputSource_getSystemId", _wrap_Wrapper4InputSource_getSystemId},
{"XML::Xercesc::Wrapper4InputSource_getBaseURI", _wrap_Wrapper4InputSource_getBaseURI},
{"XML::Xercesc::Wrapper4InputSource_getIssueFatalErrorIfNotFound", _wrap_Wrapper4InputSource_getIssueFatalErrorIfNotFound},
{"XML::Xercesc::Wrapper4InputSource_setEncoding", _wrap_Wrapper4InputSource_setEncoding},
{"XML::Xercesc::Wrapper4InputSource_setPublicId", _wrap_Wrapper4InputSource_setPublicId},
{"XML::Xercesc::Wrapper4InputSource_setSystemId", _wrap_Wrapper4InputSource_setSystemId},
{"XML::Xercesc::Wrapper4InputSource_setBaseURI", _wrap_Wrapper4InputSource_setBaseURI},
{"XML::Xercesc::Wrapper4InputSource_setIssueFatalErrorIfNotFound", _wrap_Wrapper4InputSource_setIssueFatalErrorIfNotFound},
{"XML::Xercesc::Wrapper4InputSource_release", _wrap_Wrapper4InputSource_release},
{"XML::Xercesc::new_Wrapper4DOMInputSource", _wrap_new_Wrapper4DOMInputSource},
{"XML::Xercesc::delete_Wrapper4DOMInputSource", _wrap_delete_Wrapper4DOMInputSource},
{"XML::Xercesc::Wrapper4DOMInputSource_makeStream", _wrap_Wrapper4DOMInputSource_makeStream},
{"XML::Xercesc::Wrapper4DOMInputSource_getEncoding", _wrap_Wrapper4DOMInputSource_getEncoding},
{"XML::Xercesc::Wrapper4DOMInputSource_getPublicId", _wrap_Wrapper4DOMInputSource_getPublicId},
{"XML::Xercesc::Wrapper4DOMInputSource_getSystemId", _wrap_Wrapper4DOMInputSource_getSystemId},
{"XML::Xercesc::Wrapper4DOMInputSource_getIssueFatalErrorIfNotFound", _wrap_Wrapper4DOMInputSource_getIssueFatalErrorIfNotFound},
{"XML::Xercesc::Wrapper4DOMInputSource_setEncoding", _wrap_Wrapper4DOMInputSource_setEncoding},
{"XML::Xercesc::Wrapper4DOMInputSource_setPublicId", _wrap_Wrapper4DOMInputSource_setPublicId},
{"XML::Xercesc::Wrapper4DOMInputSource_setSystemId", _wrap_Wrapper4DOMInputSource_setSystemId},
{"XML::Xercesc::Wrapper4DOMInputSource_setIssueFatalErrorIfNotFound", _wrap_Wrapper4DOMInputSource_setIssueFatalErrorIfNotFound},
{"XML::Xercesc::delete_DOMBuilder", _wrap_delete_DOMBuilder},
{"XML::Xercesc::DOMBuilder_getErrorHandler", _wrap_DOMBuilder_getErrorHandler},
{"XML::Xercesc::DOMBuilder_getEntityResolver", _wrap_DOMBuilder_getEntityResolver},
{"XML::Xercesc::DOMBuilder_getFilter", _wrap_DOMBuilder_getFilter},
{"XML::Xercesc::DOMBuilder_setErrorHandler", _wrap_DOMBuilder_setErrorHandler},
{"XML::Xercesc::DOMBuilder_setEntityResolver", _wrap_DOMBuilder_setEntityResolver},
{"XML::Xercesc::DOMBuilder_setFilter", _wrap_DOMBuilder_setFilter},
{"XML::Xercesc::DOMBuilder_setFeature", _wrap_DOMBuilder_setFeature},
{"XML::Xercesc::DOMBuilder_getFeature", _wrap_DOMBuilder_getFeature},
{"XML::Xercesc::DOMBuilder_canSetFeature", _wrap_DOMBuilder_canSetFeature},
{"XML::Xercesc::DOMBuilder_parse", _wrap_DOMBuilder_parse},
{"XML::Xercesc::DOMBuilder_parseURI", _wrap_DOMBuilder_parseURI},
{"XML::Xercesc::DOMBuilder_parseWithContext", _wrap_DOMBuilder_parseWithContext},
{"XML::Xercesc::DOMBuilder_getProperty", _wrap_DOMBuilder_getProperty},
{"XML::Xercesc::DOMBuilder_setProperty", _wrap_DOMBuilder_setProperty},
{"XML::Xercesc::DOMBuilder_release", _wrap_DOMBuilder_release},
{"XML::Xercesc::DOMBuilder_resetDocumentPool", _wrap_DOMBuilder_resetDocumentPool},
{"XML::Xercesc::DOMBuilder_loadGrammar", _wrap_DOMBuilder_loadGrammar},
{"XML::Xercesc::DOMBuilder_getGrammar", _wrap_DOMBuilder_getGrammar},
{"XML::Xercesc::DOMBuilder_getRootGrammar", _wrap_DOMBuilder_getRootGrammar},
{"XML::Xercesc::DOMBuilder_getURIText", _wrap_DOMBuilder_getURIText},
{"XML::Xercesc::DOMBuilder_resetCachedGrammarPool", _wrap_DOMBuilder_resetCachedGrammarPool},
{"XML::Xercesc::DOMBuilder_getSrcOffset", _wrap_DOMBuilder_getSrcOffset},
{"XML::Xercesc::DOMImplementationRegistry_getDOMImplementation", _wrap_DOMImplementationRegistry_getDOMImplementation},
{"XML::Xercesc::DOMImplementationRegistry_addSource", _wrap_DOMImplementationRegistry_addSource},
{"XML::Xercesc::delete_DOMImplementationRegistry", _wrap_delete_DOMImplementationRegistry},
{"XML::Xercesc::delete_DOMImplementationSource", _wrap_delete_DOMImplementationSource},
{"XML::Xercesc::DOMImplementationSource_getDOMImplementation", _wrap_DOMImplementationSource_getDOMImplementation},
{"XML::Xercesc::delete_DOMLocator", _wrap_delete_DOMLocator},
{"XML::Xercesc::DOMLocator_getLineNumber", _wrap_DOMLocator_getLineNumber},
{"XML::Xercesc::DOMLocator_getColumnNumber", _wrap_DOMLocator_getColumnNumber},
{"XML::Xercesc::DOMLocator_getOffset", _wrap_DOMLocator_getOffset},
{"XML::Xercesc::DOMLocator_getErrorNode", _wrap_DOMLocator_getErrorNode},
{"XML::Xercesc::DOMLocator_getURI", _wrap_DOMLocator_getURI},
{"XML::Xercesc::DOMLocator_setLineNumber", _wrap_DOMLocator_setLineNumber},
{"XML::Xercesc::DOMLocator_setColumnNumber", _wrap_DOMLocator_setColumnNumber},
{"XML::Xercesc::DOMLocator_setOffset", _wrap_DOMLocator_setOffset},
{"XML::Xercesc::DOMLocator_setErrorNode", _wrap_DOMLocator_setErrorNode},
{"XML::Xercesc::DOMLocator_setURI", _wrap_DOMLocator_setURI},
{"XML::Xercesc::delete_DOMWriter", _wrap_delete_DOMWriter},
{"XML::Xercesc::DOMWriter_canSetFeature", _wrap_DOMWriter_canSetFeature},
{"XML::Xercesc::DOMWriter_setFeature", _wrap_DOMWriter_setFeature},
{"XML::Xercesc::DOMWriter_getFeature", _wrap_DOMWriter_getFeature},
{"XML::Xercesc::DOMWriter_setEncoding", _wrap_DOMWriter_setEncoding},
{"XML::Xercesc::DOMWriter_setNewLine", _wrap_DOMWriter_setNewLine},
{"XML::Xercesc::DOMWriter_setErrorHandler", _wrap_DOMWriter_setErrorHandler},
{"XML::Xercesc::DOMWriter_setFilter", _wrap_DOMWriter_setFilter},
{"XML::Xercesc::DOMWriter_getEncoding", _wrap_DOMWriter_getEncoding},
{"XML::Xercesc::DOMWriter_getNewLine", _wrap_DOMWriter_getNewLine},
{"XML::Xercesc::DOMWriter_getErrorHandler", _wrap_DOMWriter_getErrorHandler},
{"XML::Xercesc::DOMWriter_getFilter", _wrap_DOMWriter_getFilter},
{"XML::Xercesc::DOMWriter_writeNode", _wrap_DOMWriter_writeNode},
{"XML::Xercesc::DOMWriter_writeToString", _wrap_DOMWriter_writeToString},
{"XML::Xercesc::DOMWriter_release", _wrap_DOMWriter_release},
{"XML::Xercesc::delete_DOMWriterFilter", _wrap_delete_DOMWriterFilter},
{"XML::Xercesc::DOMWriterFilter_acceptNode", _wrap_DOMWriterFilter_acceptNode},
{"XML::Xercesc::DOMWriterFilter_getWhatToShow", _wrap_DOMWriterFilter_getWhatToShow},
{"XML::Xercesc::DOMWriterFilter_setWhatToShow", _wrap_DOMWriterFilter_setWhatToShow},
{"XML::Xercesc::delete_AbstractDOMParser", _wrap_delete_AbstractDOMParser},
{"XML::Xercesc::AbstractDOMParser_reset", _wrap_AbstractDOMParser_reset},
{"XML::Xercesc::AbstractDOMParser_adoptDocument", _wrap_AbstractDOMParser_adoptDocument},
{"XML::Xercesc::AbstractDOMParser_getDocument", _wrap_AbstractDOMParser_getDocument},
{"XML::Xercesc::AbstractDOMParser_getValidator", _wrap_AbstractDOMParser_getValidator},
{"XML::Xercesc::AbstractDOMParser_getValidationScheme", _wrap_AbstractDOMParser_getValidationScheme},
{"XML::Xercesc::AbstractDOMParser_getDoSchema", _wrap_AbstractDOMParser_getDoSchema},
{"XML::Xercesc::AbstractDOMParser_getValidationSchemaFullChecking", _wrap_AbstractDOMParser_getValidationSchemaFullChecking},
{"XML::Xercesc::AbstractDOMParser_getErrorCount", _wrap_AbstractDOMParser_getErrorCount},
{"XML::Xercesc::AbstractDOMParser_getDoNamespaces", _wrap_AbstractDOMParser_getDoNamespaces},
{"XML::Xercesc::AbstractDOMParser_getExitOnFirstFatalError", _wrap_AbstractDOMParser_getExitOnFirstFatalError},
{"XML::Xercesc::AbstractDOMParser_getValidationConstraintFatal", _wrap_AbstractDOMParser_getValidationConstraintFatal},
{"XML::Xercesc::AbstractDOMParser_getCreateEntityReferenceNodes", _wrap_AbstractDOMParser_getCreateEntityReferenceNodes},
{"XML::Xercesc::AbstractDOMParser_getIncludeIgnorableWhitespace", _wrap_AbstractDOMParser_getIncludeIgnorableWhitespace},
{"XML::Xercesc::AbstractDOMParser_getExternalSchemaLocation", _wrap_AbstractDOMParser_getExternalSchemaLocation},
{"XML::Xercesc::AbstractDOMParser_getExternalNoNamespaceSchemaLocation", _wrap_AbstractDOMParser_getExternalNoNamespaceSchemaLocation},
{"XML::Xercesc::AbstractDOMParser_getSecurityManager", _wrap_AbstractDOMParser_getSecurityManager},
{"XML::Xercesc::AbstractDOMParser_getLoadExternalDTD", _wrap_AbstractDOMParser_getLoadExternalDTD},
{"XML::Xercesc::AbstractDOMParser_getCreateCommentNodes", _wrap_AbstractDOMParser_getCreateCommentNodes},
{"XML::Xercesc::AbstractDOMParser_getCalculateSrcOfs", _wrap_AbstractDOMParser_getCalculateSrcOfs},
{"XML::Xercesc::AbstractDOMParser_getStandardUriConformant", _wrap_AbstractDOMParser_getStandardUriConformant},
{"XML::Xercesc::AbstractDOMParser_getPSVIHandler", _wrap_AbstractDOMParser_getPSVIHandler},
{"XML::Xercesc::AbstractDOMParser_setDoNamespaces", _wrap_AbstractDOMParser_setDoNamespaces},
{"XML::Xercesc::AbstractDOMParser_setExitOnFirstFatalError", _wrap_AbstractDOMParser_setExitOnFirstFatalError},
{"XML::Xercesc::AbstractDOMParser_setValidationConstraintFatal", _wrap_AbstractDOMParser_setValidationConstraintFatal},
{"XML::Xercesc::AbstractDOMParser_setCreateEntityReferenceNodes", _wrap_AbstractDOMParser_setCreateEntityReferenceNodes},
{"XML::Xercesc::AbstractDOMParser_setIncludeIgnorableWhitespace", _wrap_AbstractDOMParser_setIncludeIgnorableWhitespace},
{"XML::Xercesc::AbstractDOMParser_setValidationScheme", _wrap_AbstractDOMParser_setValidationScheme},
{"XML::Xercesc::AbstractDOMParser_setDoSchema", _wrap_AbstractDOMParser_setDoSchema},
{"XML::Xercesc::AbstractDOMParser_setValidationSchemaFullChecking", _wrap_AbstractDOMParser_setValidationSchemaFullChecking},
{"XML::Xercesc::AbstractDOMParser_setExternalSchemaLocation", _wrap_AbstractDOMParser_setExternalSchemaLocation},
{"XML::Xercesc::AbstractDOMParser_setExternalNoNamespaceSchemaLocation", _wrap_AbstractDOMParser_setExternalNoNamespaceSchemaLocation},
{"XML::Xercesc::AbstractDOMParser_setSecurityManager", _wrap_AbstractDOMParser_setSecurityManager},
{"XML::Xercesc::AbstractDOMParser_setLoadExternalDTD", _wrap_AbstractDOMParser_setLoadExternalDTD},
{"XML::Xercesc::AbstractDOMParser_setCreateCommentNodes", _wrap_AbstractDOMParser_setCreateCommentNodes},
{"XML::Xercesc::AbstractDOMParser_setCalculateSrcOfs", _wrap_AbstractDOMParser_setCalculateSrcOfs},
{"XML::Xercesc::AbstractDOMParser_setStandardUriConformant", _wrap_AbstractDOMParser_setStandardUriConformant},
{"XML::Xercesc::AbstractDOMParser_useScanner", _wrap_AbstractDOMParser_useScanner},
{"XML::Xercesc::AbstractDOMParser_useImplementation", _wrap_AbstractDOMParser_useImplementation},
{"XML::Xercesc::AbstractDOMParser_setPSVIHandler", _wrap_AbstractDOMParser_setPSVIHandler},
{"XML::Xercesc::AbstractDOMParser_parse", _wrap_AbstractDOMParser_parse},
{"XML::Xercesc::AbstractDOMParser_parseFirst", _wrap_AbstractDOMParser_parseFirst},
{"XML::Xercesc::AbstractDOMParser_parseNext", _wrap_AbstractDOMParser_parseNext},
{"XML::Xercesc::AbstractDOMParser_parseReset", _wrap_AbstractDOMParser_parseReset},
{"XML::Xercesc::AbstractDOMParser_elementTypeInfo", _wrap_AbstractDOMParser_elementTypeInfo},
{"XML::Xercesc::AbstractDOMParser_getExpandEntityReferences", _wrap_AbstractDOMParser_getExpandEntityReferences},
{"XML::Xercesc::AbstractDOMParser_setExpandEntityReferences", _wrap_AbstractDOMParser_setExpandEntityReferences},
{"XML::Xercesc::new_XercesDOMParser", _wrap_new_XercesDOMParser},
{"XML::Xercesc::delete_XercesDOMParser", _wrap_delete_XercesDOMParser},
{"XML::Xercesc::XercesDOMParser_getErrorHandler", _wrap_XercesDOMParser_getErrorHandler},
{"XML::Xercesc::XercesDOMParser_getEntityResolver", _wrap_XercesDOMParser_getEntityResolver},
{"XML::Xercesc::XercesDOMParser_getXMLEntityResolver", _wrap_XercesDOMParser_getXMLEntityResolver},
{"XML::Xercesc::XercesDOMParser_isCachingGrammarFromParse", _wrap_XercesDOMParser_isCachingGrammarFromParse},
{"XML::Xercesc::XercesDOMParser_isUsingCachedGrammarInParse", _wrap_XercesDOMParser_isUsingCachedGrammarInParse},
{"XML::Xercesc::XercesDOMParser_getGrammar", _wrap_XercesDOMParser_getGrammar},
{"XML::Xercesc::XercesDOMParser_getRootGrammar", _wrap_XercesDOMParser_getRootGrammar},
{"XML::Xercesc::XercesDOMParser_getURIText", _wrap_XercesDOMParser_getURIText},
{"XML::Xercesc::XercesDOMParser_getSrcOffset", _wrap_XercesDOMParser_getSrcOffset},
{"XML::Xercesc::XercesDOMParser_setErrorHandler", _wrap_XercesDOMParser_setErrorHandler},
{"XML::Xercesc::XercesDOMParser_setEntityResolver", _wrap_XercesDOMParser_setEntityResolver},
{"XML::Xercesc::XercesDOMParser_setXMLEntityResolver", _wrap_XercesDOMParser_setXMLEntityResolver},
{"XML::Xercesc::XercesDOMParser_cacheGrammarFromParse", _wrap_XercesDOMParser_cacheGrammarFromParse},
{"XML::Xercesc::XercesDOMParser_useCachedGrammarInParse", _wrap_XercesDOMParser_useCachedGrammarInParse},
{"XML::Xercesc::XercesDOMParser_resetDocumentPool", _wrap_XercesDOMParser_resetDocumentPool},
{"XML::Xercesc::XercesDOMParser_error", _wrap_XercesDOMParser_error},
{"XML::Xercesc::XercesDOMParser_resetErrors", _wrap_XercesDOMParser_resetErrors},
{"XML::Xercesc::XercesDOMParser_loadGrammar", _wrap_XercesDOMParser_loadGrammar},
{"XML::Xercesc::XercesDOMParser_resetCachedGrammarPool", _wrap_XercesDOMParser_resetCachedGrammarPool},
{"XML::Xercesc::new_PerlCallbackHandler", _wrap_new_PerlCallbackHandler},
{"XML::Xercesc::delete_PerlCallbackHandler", _wrap_delete_PerlCallbackHandler},
{"XML::Xercesc::PerlCallbackHandler_type", _wrap_PerlCallbackHandler_type},
{"XML::Xercesc::PerlCallbackHandler_set_callback_obj", _wrap_PerlCallbackHandler_set_callback_obj},
{"XML::Xercesc::new_PerlErrorCallbackHandler", _wrap_new_PerlErrorCallbackHandler},
{"XML::Xercesc::delete_PerlErrorCallbackHandler", _wrap_delete_PerlErrorCallbackHandler},
{"XML::Xercesc::PerlErrorCallbackHandler_type", _wrap_PerlErrorCallbackHandler_type},
{"XML::Xercesc::PerlErrorCallbackHandler_resetErrors", _wrap_PerlErrorCallbackHandler_resetErrors},
{"XML::Xercesc::new_PerlDocumentCallbackHandler", _wrap_new_PerlDocumentCallbackHandler},
{"XML::Xercesc::delete_PerlDocumentCallbackHandler", _wrap_delete_PerlDocumentCallbackHandler},
{"XML::Xercesc::PerlDocumentCallbackHandler_type", _wrap_PerlDocumentCallbackHandler_type},
{"XML::Xercesc::PerlDocumentCallbackHandler_characters", _wrap_PerlDocumentCallbackHandler_characters},
{"XML::Xercesc::PerlDocumentCallbackHandler_processingInstruction", _wrap_PerlDocumentCallbackHandler_processingInstruction},
{"XML::Xercesc::PerlDocumentCallbackHandler_setDocumentLocator", _wrap_PerlDocumentCallbackHandler_setDocumentLocator},
{"XML::Xercesc::new_PerlContentCallbackHandler", _wrap_new_PerlContentCallbackHandler},
{"XML::Xercesc::delete_PerlContentCallbackHandler", _wrap_delete_PerlContentCallbackHandler},
{"XML::Xercesc::PerlContentCallbackHandler_type", _wrap_PerlContentCallbackHandler_type},
{"XML::Xercesc::PerlContentCallbackHandler_characters", _wrap_PerlContentCallbackHandler_characters},
{"XML::Xercesc::PerlContentCallbackHandler_processingInstruction", _wrap_PerlContentCallbackHandler_processingInstruction},
{"XML::Xercesc::PerlContentCallbackHandler_setDocumentLocator", _wrap_PerlContentCallbackHandler_setDocumentLocator},
{"XML::Xercesc::PerlContentCallbackHandler_startPrefixMapping", _wrap_PerlContentCallbackHandler_startPrefixMapping},
{"XML::Xercesc::PerlContentCallbackHandler_endPrefixMapping", _wrap_PerlContentCallbackHandler_endPrefixMapping},
{"XML::Xercesc::PerlContentCallbackHandler_skippedEntity", _wrap_PerlContentCallbackHandler_skippedEntity},
{"XML::Xercesc::new_PerlEntityResolverHandler", _wrap_new_PerlEntityResolverHandler},
{"XML::Xercesc::delete_PerlEntityResolverHandler", _wrap_delete_PerlEntityResolverHandler},
{"XML::Xercesc::PerlEntityResolverHandler_type", _wrap_PerlEntityResolverHandler_type},
{"XML::Xercesc::new_PerlNodeFilterCallbackHandler", _wrap_new_PerlNodeFilterCallbackHandler},
{"XML::Xercesc::delete_PerlNodeFilterCallbackHandler", _wrap_delete_PerlNodeFilterCallbackHandler},
{"XML::Xercesc::PerlNodeFilterCallbackHandler_type", _wrap_PerlNodeFilterCallbackHandler_type},
{0,0}
};

#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    static int _init = 0;
    if (!_init) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }	
        _init = 1;
    }
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    
    SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar->dcast = (swig_dycast_func) Grammar_dynamic_cast;
    
    
    SWIGTYPE_p_PerlCallbackHandler->dcast = (swig_dycast_func) PerlCallbackHandler_dynamic_cast;
    
    
    SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->dcast = (swig_dycast_func) DOMNode_dynamic_cast;
    
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter, (void*) "XML::Xerces::XMLDeleter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils, (void*) "XML::Xerces::XMLPlatformUtils");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, (void*) "XML::Xerces::XMLURL");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, (void*) "XML::Xerces::XMLUri");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, (void*) "XML::Xerces::QName");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__HexBin, (void*) "XML::Xerces::HexBin");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Base64, (void*) "XML::Xerces::Base64");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts, (void*) "XML::Xerces::XMLExcepts");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, (void*) "XML::Xerces::XMLException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, (void*) "XML::Xerces::XMLElementDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, (void*) "XML::Xerces::XMLEntityDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, (void*) "XML::Xerces::XMLNotationDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, (void*) "XML::Xerces::XMLAttDefList");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, (void*) "XML::Xerces::XMLAttDef");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, (void*) "XML::Xerces::XMLValidator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void*) "XML::Xerces::Grammar");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, (void*) "XML::Xerces::DTDElementDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, (void*) "XML::Xerces::DTDElementDeclEnumerator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, (void*) "XML::Xerces::DTDEntityDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, (void*) "XML::Xerces::DTDEntityDeclEnumerator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, (void*) "XML::Xerces::DTDAttDefList");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, (void*) "XML::Xerces::DTDAttDef");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, (void*) "XML::Xerces::DTDGrammar");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, (void*) "XML::Xerces::DTDValidator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, (void*) "XML::Xerces::SchemaElementDecl");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, (void*) "XML::Xerces::SchemaElementDeclEnumerator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, (void*) "XML::Xerces::SchemaGrammar");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, (void*) "XML::Xerces::SchemaValidator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, (void*) "XML::Xerces::SchemaAttDefList");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, (void*) "XML::Xerces::SchemaAttDef");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, (void*) "XML::Xerces::SAXException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, (void*) "XML::Xerces::SAXNotSupportedException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, (void*) "XML::Xerces::SAXNotRecognizedException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, (void*) "XML::Xerces::SAXParseException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, (void*) "XML::Xerces::ErrorHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDHandler, (void*) "XML::Xerces::DTDHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocumentHandler, (void*) "XML::Xerces::DocumentHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, (void*) "XML::Xerces::EntityResolver");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__AttributeList, (void*) "XML::Xerces::AttributeList");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__HandlerBase, (void*) "XML::Xerces::HandlerBase");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator, (void*) "XML::Xerces::Locator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Attributes, (void*) "XML::Xerces::Attributes");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentHandler, (void*) "XML::Xerces::ContentHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__LexicalHandler, (void*) "XML::Xerces::LexicalHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DeclHandler, (void*) "XML::Xerces::DeclHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DefaultHandler, (void*) "XML::Xerces::DefaultHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__InputSource, (void*) "XML::Xerces::InputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufInputSource, (void*) "XML::Xerces::MemBufInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdInInputSource, (void*) "XML::Xerces::StdInInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileInputSource, (void*) "XML::Xerces::LocalFileInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__URLInputSource, (void*) "XML::Xerces::URLInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatter, (void*) "XML::Xerces::XMLFormatter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLFormatTarget, (void*) "XML::Xerces::XMLFormatTarget");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemBufFormatTarget, (void*) "XML::Xerces::MemBufFormatTarget");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__LocalFileFormatTarget, (void*) "XML::Xerces::LocalFileFormatTarget");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__StdOutFormatTarget, (void*) "XML::Xerces::StdOutFormatTarget");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni, (void*) "XML::Xerces::XMLUni");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, (void*) "XML::Xerces::XMLPScanToken");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Parser, (void*) "XML::Xerces::Parser");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, (void*) "XML::Xerces::XMLDocumentHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLErrorReporter, (void*) "XML::Xerces::XMLErrorReporter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityHandler, (void*) "XML::Xerces::XMLEntityHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DocTypeHandler, (void*) "XML::Xerces::DocTypeHandler");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAX2XMLReader, (void*) "XML::Xerces::SAX2XMLReader");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLReaderFactory, (void*) "XML::Xerces::XMLReaderFactory");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParser, (void*) "XML::Xerces::SAXParser");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, (void*) "XML::Xerces::DOMException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentRange, (void*) "XML::Xerces::DOMDocumentRange");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentTraversal, (void*) "XML::Xerces::DOMDocumentTraversal");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeFilter, (void*) "XML::Xerces::DOMNodeFilter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeIterator, (void*) "XML::Xerces::DOMNodeIterator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRange, (void*) "XML::Xerces::DOMRange");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMRangeException, (void*) "XML::Xerces::DOMRangeException");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTreeWalker, (void*) "XML::Xerces::DOMTreeWalker");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, (void*) "XML::Xerces::DOMNode");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, (void*) "XML::Xerces::DOMAttr");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, (void*) "XML::Xerces::DOMCharacterData");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, (void*) "XML::Xerces::DOMText");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection, (void*) "XML::Xerces::DOMCDATASection");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment, (void*) "XML::Xerces::DOMComment");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, (void*) "XML::Xerces::DOMDocument");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, (void*) "XML::Xerces::DOMDocumentFragment");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, (void*) "XML::Xerces::DOMDocumentType");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationLS, (void*) "XML::Xerces::DOMImplementationLS");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementation, (void*) "XML::Xerces::DOMImplementation");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, (void*) "XML::Xerces::DOMElement");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, (void*) "XML::Xerces::DOMEntity");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference, (void*) "XML::Xerces::DOMEntityReference");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, (void*) "XML::Xerces::DOMNamedNodeMap");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, (void*) "XML::Xerces::DOMNodeList");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation, (void*) "XML::Xerces::DOMNotation");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, (void*) "XML::Xerces::DOMProcessingInstruction");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMInputSource, (void*) "XML::Xerces::DOMInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4InputSource, (void*) "XML::Xerces::Wrapper4InputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Wrapper4DOMInputSource, (void*) "XML::Xerces::Wrapper4DOMInputSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMBuilder, (void*) "XML::Xerces::DOMBuilder");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationRegistry, (void*) "XML::Xerces::DOMImplementationRegistry");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMImplementationSource, (void*) "XML::Xerces::DOMImplementationSource");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMLocator, (void*) "XML::Xerces::DOMLocator");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriter, (void*) "XML::Xerces::DOMWriter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMWriterFilter, (void*) "XML::Xerces::DOMWriterFilter");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__AbstractDOMParser, (void*) "XML::Xerces::AbstractDOMParser");
    SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XercesDOMParser, (void*) "XML::Xerces::XercesDOMParser");
    SWIG_TypeClientData(SWIGTYPE_p_PerlCallbackHandler, (void*) "XML::Xerces::PerlCallbackHandler");
    SWIG_TypeClientData(SWIGTYPE_p_PerlErrorCallbackHandler, (void*) "XML::Xerces::PerlErrorCallbackHandler");
    SWIG_TypeClientData(SWIGTYPE_p_PerlDocumentCallbackHandler, (void*) "XML::Xerces::PerlDocumentCallbackHandler");
    SWIG_TypeClientData(SWIGTYPE_p_PerlContentCallbackHandler, (void*) "XML::Xerces::PerlContentCallbackHandler");
    SWIG_TypeClientData(SWIGTYPE_p_PerlEntityResolverHandler, (void*) "XML::Xerces::PerlEntityResolverHandler");
    SWIG_TypeClientData(SWIGTYPE_p_PerlNodeFilterCallbackHandler, (void*) "XML::Xerces::PerlNodeFilterCallbackHandler");
    
    // we create the global transcoder for UTF-8 to UTF-16
    XMLTransService::Codes failReason;
    XMLPlatformUtils::Initialize(); // first we must create the transservice
    UTF8_ENCODING = XMLString::transcode("UTF-8");
    UTF8_TRANSCODER =
    XMLPlatformUtils::fgTransService->makeNewTranscoderFor(UTF8_ENCODING,
    failReason,
    1024,
    XMLPlatformUtils::fgMemoryManager);
    if (! UTF8_TRANSCODER) {
        croak("ERROR: XML::Xerces: INIT: Could not create UTF-8 transcoder");
    }
    
    
    ISO_8859_1_ENCODING = XMLString::transcode("ISO-8859-1");
    ISO_8859_1_TRANSCODER =
    XMLPlatformUtils::fgTransService->makeNewTranscoderFor(ISO_8859_1_ENCODING,
    failReason,
    1024,
    XMLPlatformUtils::fgMemoryManager);
    if (! ISO_8859_1_TRANSCODER) {
        croak("ERROR: XML::Xerces: INIT: Could not create ISO-8859-1 transcoder");
    }
    
    
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

